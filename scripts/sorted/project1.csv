student,Q1.a,Q1.b,comment,grade,Q1.c,comment,grade,Q1.d,comment,grade,Q1.e,comment,grade,Q2,comment,grade
A0218820J,/* The code is written for PostgreSQL */,"/*There are three  tables in this answer sheet, including two entities tables named customer and grocery,                   */
/*  and one relationship table named purchase:                                                                              */
/*customer table: indicates the basic customer info, including customer id, full name and the country of the customer lived. */
/* Table schema: customer (customer_id, customer, full_name, country)   */                                                    
/*PRIMARY KEY: customer_id                                              */
/*grocery table: indicates the grocery products info, including their id, name, country of origin and price.    */
/*Table schema: grocery(product_id, product_name, country_of_origin, price)                                     */
/*PRIMARY KEY: product_id                                                                                       */
/*purchase table: indicates the purchases that associate customers with the products they purchased. */
/*                This table also records the transaction time and quantity as extra attributes.    */
/*Table schema:                                                                                     */
/*CREATE TABLE purchase(customer_id, product_id, payment_time, quantity)                           */
/*PRIMARY KEY(ustomer_id, product_id, payment_time)                                                */", , ,"DROP TABLE if EXISTS customer, grocery, purchase;
CREATE TABLE customer 
(customer_id int PRIMARY KEY, 
full_name varchar, 
country varchar);
CREATE TABLE grocery 
(product_id int PRIMARY KEY,
 product_name varchar, 
 country_of_origin varchar NOT NULL,
 price DECIMAL(3,1) NOT NULL CHECK (price >0));
CREATE TABLE purchase 
(customer_id int REFERENCES  customer (customer_id) ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED, 
 product_id int REFERENCES  grocery (product_id) ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED, 
 payment_time time,
 quantity int NOT NULL CHECK (quantity>0),
 PRIMARY KEY (customer_id,product_id,payment_time));", , ,"insert into grocery (Product_id, Product_name, country_of_origin, price) values (1, 'Tomato - Plum With Basil', 'Portugal', 4.7);
insert into grocery (Product_id, Product_name, country_of_origin, price) values (2, 'Cheese - Cottage Cheese', 'Macedonia', 17.1);
insert into grocery (Product_id, Product_name, country_of_origin, price) values (3, 'Jolt Cola', 'France', 13.2);
 
insert into customer (customer_id, full_name, country) values (1, 'Claiborne Leppington', 'Malta');
insert into customer (customer_id, full_name, country) values (2, 'Ede Birkenshaw', 'China');
insert into customer (customer_id, full_name, country) values (3, 'Afton Pinilla', 'China');", , ,"INSERT INTO purchase(customer_id, product_id, quantity,payment_time)
(SELECT c.customer_id, 
        g.product_id, 
        FLOOR(RANDOM()*10+1), 
		timestamp '2021-01-10' +random() * (timestamp '2021-01-01' -timestamp '2021-8-20')           
FROM customer c, grocery g
ORDER BY 1
LIMIT 1000)
ON CONFLICT DO NOTHING;", , ,,,
A0218855U,/* The code is written for PostgreSQL */,"/*With evolving variants of the viruses, COVID-19 situation is still severe in most of the regions. 
Therefore, prompt identification of close contacts is critical to control the virus spread and potential outbreak. 
Many countries have established the sophisticated contact tracing system including Singapore using TraceTogether. 
In this project, I would like to simulate a small portion of the database that might be used in the contact tracing process.
Entity set 1 is defined as ‘personal’, which contains the personal particulars such as nric_id, first_name, last_name, gender, contact_number, and vacination_status. 
‘nric_id’ is set PRIMARY KEY as it is the unique identifier of a person. 
Take note due to Mockaroo data generation constraints, the format of the nric_id and contact_number is not the same as what they are like in reality.
Entity set 2 is defined as ‘loc’, which includes the list of locations that confirmed cases have visited containing attributes like place, date, time, no_of_confirmed_case, no_of_quarantined_case. 
Combining with date info, we will be able to identify which area and time period have risk exposure. 
The info on how many confirmed cases and how many quarantined cases for each location is also counted. 
Combination of ‘place’ and ‘date’ is the PRIMARY KEY for this table. 
For simplicity, I did not specify the timing though in reality we should have more detailed timing of each visitor to narrow the tracking. 
Relationship table ‘visit’ will link each person to the location and date with risk exposure. 
In practice, when we compare this table with individual TraceTogether history, we will be able to alert the individuals if there is any risk exposure to them. 
In this case, there are no other attributes in the relationship table. 
*/", , ,"create table personal (
	nric_id VARCHAR(50) PRIMARY KEY,
	first_name VARCHAR(50),
	last_name VARCHAR(50),
	gender VARCHAR(50),
	contact_number VARCHAR(50),
	vacination_status VARCHAR(50));
create table loc (
	place VARCHAR(50),
	date DATE,
	no_of_confirmed_case INT,
	no_of_quarantined_case INT,
	PRIMARY KEY (place, date));
create table visit (
	nric_id VARCHAR(50) REFERENCES personal (nric_id),
	place VARCHAR(50),
	date DATE,	
	FOREIGN KEY (place, date) REFERENCES loc (place, date));", , ,"/* Insert 100 enties for table personal*/ insert into personal (nric_id, first_name, last_name, gender, contact_number, vacination_status) values ('09-0600269', 'Meghann', 'Baynham', 'Genderfluid', '(362) 1657025', false);
insert into personal (nric_id, first_name, last_name, gender, contact_number, vacination_status) values ('48-5325276', 'Marnia', 'Filyakov', 'Genderfluid', '(463) 7351439', false);
insert into personal (nric_id, first_name, last_name, gender, contact_number, vacination_status) values ('51-2191296', 'Anthe', 'Batha', 'Non-binary', '(521) 1297378', true);
 
select * from personal;
/* Insert 100 enties for table loc*/ insert into loc (place, date, no_of_confirmed_case, no_of_quarantined_case) values ('857 Hooker Junction', '2021-08-13', 2, 37);
insert into loc (place, date, no_of_confirmed_case, no_of_quarantined_case) values ('04226 Oriole Trail', '2021-08-14', 3, 3);", , ,"insert into visit
select
	p.nric_id,
	l.place,
	l.date
from personal p cross join loc l
where random() <= 0.1 
LIMIT 1000;
select * from visit;", , ,,,
A0231917E,/* The code is written for PostgreSQL */,"/*It's a case of vaccination appointment.
E1 contains the information of permanent resproidents and long-term pass 
holders in Singapore. But the NRIC/FIN coding rule is different from real
world.
E2 contains the information of the three kinds of vaccines allowed in SG.
R means the relationship of who has appointed which vaccine of how many
doses.
*/", , ,"/*E1*/
CREATE TABLE IF NOT EXISTS SG_people (
	NRICorFIN VARCHAR(50) PRIMARY KEY,
	first_name VARCHAR(50) NOT NULL,
	last_name VARCHAR(50) NOT NULL,
	email VARCHAR(50) UNIQUE,
	gender VARCHAR(50),
	age INT CHECK(age>=12 AND age<=60),
	mobile VARCHAR(50) UNIQUE NOT NULL
);
/*E2*/
CREATE TABLE IF NOT EXISTS vaccine (
	proid INT UNIQUE,
	vaccine_name VARCHAR(32) NOT NULL CHECK(vaccine_name='Pfizer&BioNTech' OR vaccine_name = 'Moderna' OR vaccine_name = 'Sinovac'), 
	appoint_date DATE NOT NULL,
	dose INT NOT NULL CHECK(dose=1 OR dose=2),
	PRIMARY KEY(vaccine_name, appoint_date)
);
/*R*/
CREATE TABLE IF NOT EXISTS appointed (
	NRICorFIN VARCHAR(50) REFERENCES SG_people(NRICorFIN)ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
	vaccine_name VARCHAR(32),
	appoint_date DATE,
	PRIMARY KEY (NRICorFIN, vaccine_name, appoint_date),
	FOREIGN KEY (vaccine_name, appoint_date) REFERENCES vaccine(vaccine_name, appoint_date) ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED
);", , ,"/*E1*/ DELETE FROM SG_people;
insert into SG_people (NRICorFIN, first_name, last_name, email, gender, age, mobile) values ('Z1450852W', 'Eduard', 'Benoey', 'ebenoey0@state.gov', 'Male', 57, '802-141-0558');
insert into SG_people (NRICorFIN, first_name, last_name, email, gender, age, mobile) values ('W6343813I', 'Gabi', 'Dallow', 'gdallow1@sbwire.com', 'Female', 20, '688-611-4772');
 
insert into SG_people (NRICorFIN, first_name, last_name, email, gender, age, mobile) values ('A4695274X', 'Katinka', 'Biaggioni', 'kbiaggioni2r@istockphoto.com', 'Female', 59, '838-254-0154');
SELECT * FROM SG_people;
/*E2*/ DELETE FROM vaccine;", , ,"DELETE FROM appointed;
INSERT INTO appointed(NRICorFIN, vaccine_name, appoint_date) SELECT NRICorFIN, vaccine_name, appoint_date FROM SG_people, vaccine ORDER BY RANDOM();
SELECT * FROM appointed;
/*Sorry I failed to limit the row around 1000 ;( */", , ,,,
A0232015Y,/* The code is written for PostgreSQL */,"/* I created three tables, named ""Customer"", ""Commodity"" and ""OrderInfo"", 
to create a case that customers shop online to buy commodities (clothes in 
this case), each commodity has its own unique number.
There are 4 attributes in table ""Customer"", which stored customers' ID
(primary key), username, email and gender information. 4 attributes in 
table ""Commodity"" present their number(primary key), name, size and inventory 
level at the end of July respectively.
The table OrderInfo is designed to warehouse customers' order information, 
like a custiomer with a certain id and username bought a piece of S-size dress. 
The reason I designed ""inventory"" attribute is that we can group the 
""OrderInfo"" table by commodity number and count how many pieces have been 
sold, so that we can calculate the inventory level at the end of Auguest 
accordingly(suppose no more replenishment).
After the codes in Question 1.e, we can use:
  select C.commodity_number, C.inventory_Jul, sales, (C.inventory_Jul-sales) as inventory_Aug
  from Commodity as C 
  left join (select commodity_number,count(*) as sales 
  from OrderInfo as O 
  group by O.commodity_number
  order by O.commodity_number)as SalesAug
  on C.commodity_number=SalesAug.commodity_number
  order by C.commodity_number;
to get a list of sales of each commodity and inventory at the end of Auguest.
*/", , ,"create table Customer (
	customer_id VARCHAR(50) primary key,
	username VARCHAR(50),
	email VARCHAR(50),
	gender VARCHAR(50)
);
create table Commodity (
	commodity_number VARCHAR(50) primary key,
	commodity_name VARCHAR(50),
	size VARCHAR(50),
	inventory_Jul INT
);
create table OrderInfo (
	customer_id VARCHAR(50),
	username VARCHAR(50),
	commodity_number VARCHAR(50),
	commodity_name VARCHAR(50),
	size VARCHAR(50),
	Foreign key (customer_id)  References Customer(customer_id),
	Foreign key (commodity_number)  References Commodity(commodity_number)
);", , ,"insert into Customer (customer_id, username, email, gender) values ('43-2267860', 'cmuzzollo0', 'dchilde0@godaddy.com', 'M');
insert into Customer (customer_id, username, email, gender) values ('96-9142313', 'rcheales1', 'lpetheridge1@soup.io', 'F');
insert into Customer (customer_id, username, email, gender) values ('51-3167457', 'acressey2', 'qgirdwood2@chicagotribune.com', 'M');
 
insert into Commodity (commodity_number, commodity_name, size, inventory_Jul) values ('59-214-8994', 'Broadleaf Enchanter''s Nightshade', 'XS', 16);
insert into Commodity (commodity_number, commodity_name, size, inventory_Jul) values ('00-949-0247', 'Parasol Sedge', 'M', 62);
insert into Commodity (commodity_number, commodity_name, size, inventory_Jul) values ('73-370-9640', 'Trans-pecos False Clapdaisy', '2XL', 87);", , ,"insert into OrderInfo (customer_id, username,commodity_number,commodity_name, size ) 
select * from 
	(select customer_id,username,commodity_number,commodity_name, size 
	   from Customer cross join Commodity order by random() limit 1000) as random1000;
/* 
select C.commodity_number, C.inventory_Jul, sales, (C.inventory_Jul-sales) as inventory_Aug
  from Commodity as C 
  left join (select commodity_number,count(*) as sales 
  from OrderInfo as O 
  group by O.commodity_number
  order by O.commodity_number)as SalesAug
  on C.commodity_number=SalesAug.commodity_number
  order by C.commodity_number;
*/
", , ,,,
A0041688X,/* The code is written for PostgreSQL */,"/*'Doctor' is chosen as entity set 1 (E1) and 'patient' is chosen as entity 
set 2 (E2). The relationship set, R, will be 'seen'. This project uses 
mock data from mockaroo to populate E1 and E2. E1 will consist of doctor's
data such as Medical Council Registration (MCR) number, first name, last 
name and  email. E2 consists of patient data such as name, ID, gender, 
contact number, consultation date and diagnosis. The primary key of E1 
will be MCR number and the primary key for E2 will be the composite of 
patient name and consultation date. The relationship table will be 
populated with the primary keys of E1 and E2 (mcr number, patient name,
consultation date) and serves to capture the data on when and who has seen
the patient.
*/", , ,"DROP 
  TABLE IF EXISTS seen;
DROP 
  TABLE IF EXISTS doctor;
DROP 
  TABLE IF EXISTS patient;
CREATE TABLE doctor(
  mcr_no VARCHAR(7) PRIMARY KEY, 
  first_name VARCHAR(64) NOT NULL, 
  last_name VARCHAR(64) NOT NULL, 
  email VARCHAR(64) NOT NULL
);
CREATE TABLE patient(
  patient_name VARCHAR(64) NOT NULL, 
  patient_id VARCHAR(9), 
  gender VARCHAR(1) NOT NULL, 
  contact INTEGER NOT NULL, 
  consult_date DATE, 
  diagnosis VARCHAR(64), 
  PRIMARY KEY(patient_id, consult_date)
);
CREATE TABLE seen(
  mcr_no VARCHAR(7) REFERENCES doctor(mcr_no) 
	ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED, 
  patient_id VARCHAR(9), 
  consult_date DATE, 
  PRIMARY key (mcr_no, patient_id, consult_date), 
  FOREIGN key (patient_id, consult_date) 
	REFERENCES patient(patient_id, consult_date) 
	ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED
);", , ,"insert into doctor (mcr_no, first_name, last_name, email) values ('M05153O', 'Lynnea', 'Clew', 'lclew0@taobao.com');
insert into doctor (mcr_no, first_name, last_name, email) values ('M92729N', 'Allie', 'O''Corren', 'aocorren1@squarespace.com');
insert into doctor (mcr_no, first_name, last_name, email) values ('M26601V', 'Thorn', 'Lunge', 'tlunge2@examiner.com');
 
insert into patient (patient_name, patient_id, gender, contact, consult_date, diagnosis) values ('Dolli Videler', 'S7783941T', 'F', '95441033', '4/11/2020', 'Undeter pois-sol/liq NEC');
insert into patient (patient_name, patient_id, gender, contact, consult_date, diagnosis) values ('Ewell Lewing', 'S1034545V', 'M', '96179607', '30/12/2020', 'Cl skl fx NEC/br inj NEC');
insert into patient (patient_name, patient_id, gender, contact, consult_date, diagnosis) values ('Johann Szach', 'S2446110V', 'M', '97542957', '13/8/2021', 'Family hx-anemia');", , ,"INSERT INTO seen(mcr_no,patient_id,consult_date)
SELECT 
	d.mcr_no, 
	p.patient_id, 
	p.consult_date
FROM 
	doctor d, 
	patient p
ORDER BY 
	random() 
	LIMIT 1000;", , ,,,
A0047158B,/* The code is written for PostgreSQL */,"/*This example show the prescription of drugs for patients. The first entity 
table records the patient information, whereas the second entity table records
the drug information. The relationship table records the prescription of drugs 
to patients. Codes are done in PostgreSQL.
*/", , ,"-- First Entity Table: patient table with patient info
CREATE TABLE patients (
	row_id INT NOT NULL,
	patient_id VARCHAR(50) PRIMARY KEY,
	first_name VARCHAR(50) NOT NULL,
	last_name VARCHAR(50) NOT NULL,
	email VARCHAR(50) UNIQUE NOT NULL,
	gender VARCHAR(50) NOT NULL,
	dob DATE NOT NULL,
	CHECK (gender IN ('Male', 'Female'))
);
-- Second Entity Table: drugs table with drugs info
CREATE TABLE drugs (
	row_id INT NOT NULL,
	drug_id VARCHAR(50) NOT NULL,
	drug_name VARCHAR(100) NOT NULL,
	batch VARCHAR(50) NOT NULL,
	manufacturer_id VARCHAR(50) NOT NULL,
	manufacturer_name VARCHAR(100) NOT NULL,
	PRIMARY KEY (drug_id, batch)
);
-- Relationship Table: prescriptions table with prescription info
CREATE TABLE prescriptions (
	patient_id VARCHAR(50) REFERENCES patients(patient_id)
		ON UPDATE CASCADE
		ON DELETE CASCADE
		DEFERRABLE,
	drug_id VARCHAR(50) NOT NULL,
	batch VARCHAR(50) NOT NULL,
	FOREIGN KEY (drug_id, batch) REFERENCES drugs(drug_id, batch)
		ON UPDATE CASCADE
		ON DELETE CASCADE
		DEFERRABLE
);", , ,"-- Insert data to patients table (100 rows) insert into patients (row_id, patient_id, first_name, last_name, email, gender, dob) values (1, '2110654090', 'Melita', 'Corton', 'mcorton0@barnesandnoble.com', 'Male', '2014-08-29');
insert into patients (row_id, patient_id, first_name, last_name, email, gender, dob) values (2, '6816992342', 'De witt', 'Frogley', 'dfrogley1@hao123.com', 'Male', '1975-04-14');
insert into patients (row_id, patient_id, first_name, last_name, email, gender, dob) values (3, '3929358336', 'Jo', 'Cholmondeley', 'jcholmondeley2@360.cn', 'Male', '1989-09-27');
 
-- Insert data to drugs table (100 rows) insert into drugs (row_id, drug_id, drug_name, batch, manufacturer_id, manufacturer_name) values (1, '76214-044', 'GOOD AFTERNOON BERRY BERRY TEA BB', 2004, '2430477343', 'SKINFOOD CO., LTD.');
insert into drugs (row_id, drug_id, drug_name, batch, manufacturer_id, manufacturer_name) values (2, '36987-2722', 'Western Juniper', 1996, '7012317329', 'Nelco Laboratories, Inc.');
insert into drugs (row_id, drug_id, drug_name, batch, manufacturer_id, manufacturer_name) values (3, '63323-006', 'Sodium Bicarbonate', 2006, '3570594750', 'Fresenius Kabi USA, LLC');", , ,"INSERT INTO prescriptions (patient_id, drug_id, batch)
SELECT p.patient_id, d.drug_id, d.batch
FROM patients p, drugs d
TABLESAMPLE BERNOULLI(10);
--DROP TABLE prescriptions;
--DROP TABLE patients;
--DROP TABLE drugs;
--Student No.: A0047158B", , ,,,
A0057228A,/* The code is written for PostgreSQL */,"/* The example chosen is about patients who have seen a physician at a hospital within the year 2020. 
The first table (E1) 'patients' has 5 attributes - patient ID, first name, last name, age and gender, which provides details of each patient. The second table (E2) 'hospitals' has 3 attributes - physician ID, hospital name and admission date which provides details of the doctor visit. The relationship table (R) 'visits' associates patients to their physicians through the linking of patient ID to physician ID. The relationship is a many-to-many relationship as patients may visit multiple physicians at various hospitals in a year and a physician at any hospital reviews many patients in a year. */", , ,"CREATE TABLE patients(
patient_id VARCHAR(50) NOT NULL PRIMARY KEY, 
first_name VARCHAR(50) NOT NULL, 
last_name VARCHAR(50) NOT NULL, 
age INT NOT NULL,
gender VARCHAR(10) NOT NULL,
visit_date DATE NOT NULL
);
CREATE TABLE hospitals(
physician_id VARCHAR(10) NOT NULL PRIMARY KEY, 
hospital_name VARCHAR(30) NOT NULL
);
CREATE TABLE visits(
patient_id VARCHAR(50) NOT NULL, 
physician_id VARCHAR(10) NOT NULL, 
CONSTRAINT fk_patient 
FOREIGN KEY (patient_id) 
REFERENCES patients(patient_id),
CONSTRAINT fk_hospital 
FOREIGN KEY (physician_id)
REFERENCES hospitals(physician_id)
);", , ,"insert into patients (patient_id, first_name, last_name, age, gender, visit_date) values ('N0752704M', 'Clayborn', 'De Mattei', 30, 'Male', '12/30/2020');
insert into patients (patient_id, first_name, last_name, age, gender, visit_date) values ('Y4880166B', 'Nadean', 'Gurry', 81, 'Male', '6/20/2020');
insert into patients (patient_id, first_name, last_name, age, gender, visit_date) values ('Z9555645E', 'Kelli', 'Brando', 43, 'Male', '2/14/2020')
insert into hospitals (physician_id, hospital_name) values ('M63246W', 'Sengkang General Hospital');
insert into hospitals (physician_id, hospital_name) values ('M52740W', 'Sengkang General Hospital');
insert into hospitals (physician_id, hospital_name) values ('M46735V', 'Ng Teng Fong General Hospital');", , ,"INSERT INTO visits
SELECT patient_id, physician_id FROM patients CROSS JOIN hospitals
ORDER BY random()
LIMIT 1000;", , ,,,
A0060127U,/* The code is written for SQLite */,"/*The first entity set is person and the second entity set is car. The relationship set R is owns. 
In essence the case refers to the person and the car/cars they own in their household.
Each person can own multiple cars and each car can have multiple owners.
The code is written for SQLite.
*/", , ,"CREATE TABLE persons (
 first_name VARCHAR(64) NOT NULL,
 last_name VARCHAR(64) NOT NULL,
 email VARCHAR(64) UNIQUE NOT NULL,
 id VARCHAR(16) PRIMARY KEY );
CREATE TABLE cars (
 brand VARCHAR(32) NOT NULL,
 model VARCHAR(32) NOT NULL,
 car_registration_number VARCHAR(16) PRIMARY KEY );
CREATE TABLE owns(
 id VARCHAR(16) REFERENCES persons(id),
 car_registration_number VARCHAR(16) REFERENCES cars(car_registration_number) ,
 PRIMARY KEY (id, car_registration_number));", , ,"insert into persons (first_name, last_name, email, id) values ('Florrie', 'Coyett', 'fcoyett0@accuweather.com', 1);
insert into persons (first_name, last_name, email, id) values ('Daniele', 'Bradnum', 'dbradnum1@nba.com', 2);
insert into persons (first_name, last_name, email, id) values ('Calvin', 'Tetsall', 'ctetsall2@tiny.cc', 3);
 
insert into cars (brand, model, car_registration_number) values ('GMC', 'Sonoma Club Coupe', 'UGE0828V');
insert into cars (brand, model, car_registration_number) values ('Jaguar', 'XK', 'ZAR7767D');
insert into cars (brand, model, car_registration_number) values ('Suzuki', 'SJ', 'ZJU1366X');", , ,"INSERT INTO owns (id , car_registration_number) 
SELECT persons.id, cars.car_registration_number
FROM persons cross join cars
ORDER BY random()
LIMIT 1000;", , ,,,
A0080400B,/* The code is written for PostgreSQL */,"/* 
Setting: hospital outpatient
Table 1 (patients): 
Patients' data consisting of NRIC, first & last name,gender, birthdate, 
phone number, email and address.
Table 2 (doctors) : 
A list of doctors working in the hospital detailing MCR (doctor's registration number), 
first and last name, department, gender, email and phone number.
Table 3 follow_up: 
Listed patients who need to follow up on their conditions with their corresponding doctors.
A patient may have several medical conditions and need to follow up with several doctors.
A doctor may have many patients under his/her care.
The table helps doctors to keep track of their patients and the department will also be able
to easily keep track of their doctors' outpatient load.
*/", , ,"CREATE TABLE IF NOT EXISTS patients (
  NRIC CHAR(9) PRIMARY KEY, 
  first_name VARCHAR(64) NOT NULL, 
  last_name VARCHAR(64), 
  birthdate DATE, 
  gender CHAR(1) CONSTRAINT gender CHECK(
    gender = 'M' 
    OR gender = 'F'
  ), 
  phone_no VARCHAR(32) NOT NULL, 
  address text
);
CREATE TABLE IF NOT EXISTS doctors (
  MCR CHAR(7) PRIMARY KEY, 
  first_name VARCHAR(64) NOT NULL, 
  last_name VARCHAR(64), 
  department VARCHAR(64) CONSTRAINT department CHECK(
    department IN (
      'Others', 'Emergency', 'ICU', 'Cardiology', 
      'Renal', 'Pediatric', 'Oncology', 
      'Gynecology', 'Surgery'
    )
  ), 
  gender VARCHAR(16) CONSTRAINT gender CHECK(
    gender IN ('F', 'M')
  ), 
  email VARCHAR(256) NOT NULL, 
  phone_no VARCHAR(32) NOT NULL
);
CREATE TABLE IF NOT EXISTS follow_up (
  NRIC CHAR(9) REFERENCES patients(NRIC) ON UPDATE CASCADE DEFERRABLE, 
  MCR CHAR(7) REFERENCES doctors(MCR) ON UPDATE CASCADE DEFERRABLE, 
  PRIMARY KEY(NRIC, MCR)
);", , ,"insert into patients (   NRIC, first_name, last_name, birthdate,    gender, phone_no, address )  values    (     'T6281520D', 'Keriann', 'Riediger',      '2003-12-14', 'F', '1908037887',      '33484 Reindahl Alley'   );
insert into patients (   NRIC, first_name, last_name, birthdate,    gender, phone_no, address )  values    (     'F2134071U', 'Ban', 'Yurlov', '1972-07-11',      'M', '6965742591', '79 Mifflin Alley'   );
insert into patients (   NRIC, first_name, last_name, birthdate,    gender, phone_no, address )  values    (     'T3337460J', 'Kim', 'Mudie', '2019-04-10',      'F', '1022415899', '77 Debra Lane'   );
 
insert into doctors (   MCR, first_name, last_name, department,    gender, email, phone_no )  values    (     'M25200A', 'Arlen', 'Soreau', 'Emergency',      'M', 'asoreau0@walmart.com', '8746634281'   );
insert into doctors (   MCR, first_name, last_name, department,    gender, email, phone_no )  values    (     'M65759J', 'Robena', 'Moat', 'Emergency',      'F', 'rmoat1@nbcnews.com', '5505041997'   );
insert into doctors (   MCR, first_name, last_name, department,    gender, email, phone_no )  values    (     'M47657A', 'Bernice', 'Wixey', 'Gynecology',      'F', 'bwixey2@abc.net.au', '3335600949'   );", , ,"INSERT INTO follow_up(NRIC, MCR) 
SELECT 
  NRIC, 
  MCR 
FROM 
  patients, 
  doctors 
ORDER BY 
  random() 
LIMIT 
  1000;", , ,,,
A0086956J,/* The code is written for PostgreSQL */,"/*In this example, we create a database to store information on the pokemons
caught by the trainers. Specifically, we create three tables, namely:
- trainer, which contains information on pokemon trainers in the Kanto region
- pokemon, which contains information on the 166 identified pokemons
- caught_by, which associate the type of pokemon caught by the trainers
*/", , ,"CREATE TABLE IF NOT EXISTS trainers (
	trainer_id VARCHAR(16) PRIMARY KEY,
	first_name VARCHAR(64) NOT NULL,
	last_name VARCHAR(64) NOT NULL,
	date_of_birth DATE NOT NULL,
	gender VARCHAR(16) NOT NULL,
	badge_count NUMERIC NOT NULL
);
CREATE TABLE IF NOT EXISTS pokemons (
	pokemon_id VARCHAR(16) PRIMARY KEY,
	species VARCHAR(64) UNIQUE NOT NULL,
	type_1 VARCHAR(64) NOT NULL,
	type_2 VARCHAR(64),
	legendary VARCHAR(16) NOT NULL
);
CREATE TABLE IF NOT EXISTS caught_by (
	trainer_id VARCHAR(16) REFERENCES trainers(trainer_id)
		ON UPDATE CASCADE ON DELETE CASCADE
		DEFERRABLE INITIALLY DEFERRED,
	pokemon_id VARCHAR(16),
	date_caught DATE NOT NULL,
	level_when_caught NUMERIC NOT NULL,
	FOREIGN KEY(pokemon_id) REFERENCES pokemons(pokemon_id)
		ON UPDATE CASCADE ON DELETE CASCADE
		DEFERRABLE INITIALLY DEFERRED
);", , ,"SET datestyle TO PostgreSQL,US;
INSERT INTO pokemons (pokemon_id,species,type_1,type_2,legendary) VALUES (1,'Bulbasaur','Grass','Poison',FALSE);
INSERT INTO pokemons (pokemon_id,species,type_1,type_2,legendary) VALUES (2,'Ivysaur','Grass','Poison',FALSE);
 
INSERT INTO pokemons (pokemon_id,species,type_1,type_2,legendary) VALUES (100,'Gastly','Ghost','Poison',FALSE);
INSERT INTO pokemons (pokemon_id,species,type_1,type_2,legendary) VALUES (101,'Haunter','Ghost','Poison',FALSE);
INSERT INTO pokemons (pokemon_id,species,type_1,type_2,legendary) VALUES (102,'Gengar','Ghost','Poison',FALSE);", , ,"INSERT INTO caught_by(trainer_id, pokemon_id, date_caught, level_when_caught)
VALUES
   (87, 149, '12/10/2020', 26),
   (79, 33, '5/8/2021', 95),
   (52, 11, '7/17/2020', 79),
   (34, 25, '11/30/2020', 37),
   (47, 160, '10/5/2020', 63),
   (32, 95, '5/15/2020', 29),
   (70, 109, '6/20/2020', 98),
   (38, 123, '6/11/2020', 16),
   (82, 14, '5/5/2020', 66),
   (59, 61, '7/28/2021', 60),
   (85, 94, '11/6/2020', 19),
   (75, 117, '5/13/2020', 28),
   (98, 23, '4/6/2021', 69),
   (91, 153, '4/23/2020', 96),
   (90, 141, '3/15/2021', 51),
   (44, 150, '10/21/2020', 60),
   (12, 97, '6/11/2020', 6),
   (89, 73, '3/11/2020', 70),
   (81, 154, '5/11/2021', 26),
   (92, 138, '5/10/2021', 47),
   (6, 15, '3/15/2021', 50),
   (20, 40, '5/6/2020', 16),
   (75, 81, '7/9/2020', 43),
   (74, 138, '7/25/2020', 99),
   (45, 103, '10/21/2020', 51),
   (1, 46, '3/8/2021', 16),
   (1, 3, '5/15/2020', 22),
   (68, 113, '4/4/2020', 77),
   (99, 10, '2/13/2020', 82),
   (10, 101, '2/6/2021', 100),
   (54, 59, '1/18/2020', 53),
   (90, 3, '8/29/2020', 70),
   (23, 118, '2/14/2021', 14),
   (63, 53, '12/30/2020', 79),
   (97, 51, '7/26/2020', 26),
   (46, 102, '3/2/2021', 42),
   (49, 114, '7/26/2021', 56),
   (78, 54, '1/24/2020', 6),
   (75, 61, '2/6/2020', 58),
   (93, 23, '6/9/2020', 22),
   (56, 46, '5/30/2020', 54),
   (96, 29, '6/9/2020', 3),
   (100, 28, '5/3/2021', 45),
   (23, 109, '9/29/2020', 89),
   (83, 76, '8/4/2020', 58),
   (35, 64, '2/7/2021', 13),
   (71, 37, '10/20/2020', 5),
   (26, 136, '7/30/2021', 57),
   (32, 76, '7/12/2020', 65),
   (64, 36, '1/16/2021', 24),
   (75, 127, '5/25/2021', 66),
   (69, 65, '7/21/2021', 6),
   (94, 93, '8/9/2021', 96),
   (88, 140, '8/18/2021', 60),
   (24, 87, '9/14/2020', 8),
   (96, 81, '5/21/2021', 65),
   (77, 42, '3/15/2020', 92),
   (73, 15, '4/17/2020', 92),
   (22, 25, '7/12/2021', 72),
   (68, 87, '5/24/2021', 18),
   (51, 38, '7/29/2021', 49),
   (44, 20, '5/27/2021', 96),
   (13, 55, '8/11/2021', 98),
   (74, 83, '6/7/2020', 98),
   (75, 95, '2/10/2021', 53),
   (87, 78, '3/18/2020', 11),
   (22, 136, '9/6/2020', 19),
   (11, 63, '10/31/2020', 81),
   (45, 72, '5/2/2020', 42),
   (67, 68, '5/13/2020', 69),
   (57, 136, '11/5/2020', 76),
   (41, 68, '3/27/2020', 76),
   (49, 29, '5/26/2021', 66),
   (6, 6, '2/16/2020', 92),
   (32, 133, '8/16/2020', 3),
   (6, 90, '4/30/2020', 80),
   (61, 112, '7/18/2021', 81),
   (25, 41, '6/20/2020', 78),
   (17, 93, '2/21/2021', 5),
   (43, 59, '12/30/2020', 86),
   (94, 43, '2/13/2020', 1),
   (57, 84, '11/29/2020', 6),
   (1, 49, '5/31/2021', 32),
   (44, 126, '7/7/2021', 98),
   (58, 136, '6/1/2021', 11),
   (23, 19, '5/12/2021', 40),
   (54, 67, '9/12/2020', 5),
   (93, 39, '9/19/2020', 80),
   (66, 115, '5/8/2021', 70),
   (5, 152, '7/6/2020', 30),
   (65, 12, '5/12/2021', 56),
   (72, 9, '1/26/2020', 17),
   (62, 99, '7/9/2021', 43),
   (70, 89, '8/19/2020', 27),
   (51, 98, '10/31/2020', 84),
   (15, 133, '3/12/2020', 29),
   (25, 138, '6/17/2020', 90),
   (54, 13, '11/13/2020', 6),
   (93, 133, '1/3/2020', 98),
   (42, 80, '4/28/2021', 97),
   (37, 25, '11/2/2020', 92),
   (39, 137, '12/1/2020', 61),
   (70, 82, '7/7/2020', 47),
   (61, 136, '4/2/2021', 27),
   (73, 138, '8/31/2020', 87),
   (2, 93, '9/6/2020', 63),
   (90, 87, '1/30/2021', 84),
   (52, 91, '6/10/2020', 76),
   (77, 102, '1/13/2020', 96),
   (78, 70, '10/21/2020', 27),
   (3, 152, '3/31/2021', 91),
   (12, 159, '1/7/2020', 100),
   (90, 97, '6/13/2021', 83),
   (69, 136, '12/22/2020', 72),
   (59, 78, '9/16/2020', 99),
   (53, 56, '4/3/2021', 15),
   (19, 80, '3/4/2021', 12),
   (52, 98, '2/23/2021', 10),
   (27, 82, '8/31/2020', 22),
   (20, 36, '8/28/2020', 53),
   (94, 64, '4/9/2021', 55),
   (35, 26, '5/10/2020', 2),
   (25, 85, '4/2/2021', 92),
   (65, 141, '1/7/2020', 94),
   (36, 92, '8/4/2020', 42),
   (75, 18, '7/8/2021', 63),
   (19, 41, '2/24/2021', 61),
   (93, 126, '2/17/2021', 11),
   (1, 96, '3/27/2021', 44),
   (76, 148, '7/19/2020', 66),
   (21, 10, '3/25/2021', 33),
   (62, 142, '7/4/2020', 49),
   (54, 24, '2/14/2021', 16),
   (49, 39, '8/20/2020', 75),
   (28, 73, '5/6/2020', 65),
   (60, 99, '3/10/2020', 44),
   (20, 148, '8/6/2021', 16),
   (49, 75, '5/3/2021', 14),
   (72, 125, '3/23/2020', 35),
   (55, 158, '7/23/2021', 34),
   (66, 21, '3/30/2021', 52),
   (94, 58, '10/26/2020', 68),
   (1, 137, '6/20/2020', 71),
   (61, 57, '6/23/2020', 47),
   (94, 62, '2/2/2020', 89),
   (18, 101, '11/15/2020', 30),
   (81, 135, '10/13/2020', 20),
   (31, 103, '4/4/2021', 6),
   (2, 62, '8/2/2020', 95),
   (10, 37, '1/24/2020', 87),
   (29, 138, '5/30/2020', 24),
   (35, 119, '6/28/2020', 13),
   (41, 138, '6/30/2021', 42),
   (48, 14, '4/6/2021', 81),
   (87, 149, '5/3/2021', 27),
   (47, 99, '6/25/2021', 32),
   (71, 95, '6/26/2020', 8),
   (45, 70, '7/17/2021', 64),
   (17, 3, '5/31/2021', 49),
   (67, 160, '4/23/2021', 5),
   (34, 81, '1/1/2021', 17),
   (52, 154, '8/17/2021', 50),
   (60, 52, '7/1/2021', 13),
   (61, 157, '7/20/2021', 80),
   (33, 49, '2/10/2020', 23),
   (4, 148, '11/9/2020', 74),
   (78, 108, '9/10/2020', 64),
   (62, 91, '1/26/2021', 82),
   (15, 129, '8/30/2020', 90),
   (37, 84, '5/25/2021', 51),
   (52, 101, '2/23/2021', 24),
   (11, 29, '9/30/2020', 97),
   (67, 128, '8/9/2020', 39),
   (73, 57, '2/26/2020', 67),
   (81, 13, '3/18/2020', 92),
   (71, 119, '3/25/2021', 82),
   (33, 52, '10/18/2020', 99),
   (35, 90, '5/20/2021', 42),
   (21, 155, '11/23/2020', 16),
   (72, 111, '11/9/2020', 44),
   (63, 104, '7/9/2020', 73),
   (38, 16, '5/19/2020', 77),
   (89, 14, '2/22/2021', 77),
   (56, 48, '4/14/2021', 49),
   (33, 143, '7/12/2021', 40),
   (14, 96, '6/23/2021', 87),
   (82, 66, '10/21/2020', 78),
   (71, 101, '2/3/2020', 12),
   (96, 92, '2/29/2020', 7),
   (3, 100, '3/30/2021', 15),
   (6, 92, '1/11/2020', 45),
   (6, 24, '7/25/2020', 70),
   (50, 56, '11/13/2020', 49),
   (97, 113, '11/9/2020', 70),
   (25, 87, '3/29/2021', 56),
   (29, 158, '7/27/2020', 83),
   (22, 106, '2/7/2020', 35),
   (63, 4, '12/18/2020', 52),
   (37, 88, '7/15/2020', 67),
   (68, 7, '11/6/2020', 48),
   (30, 33, '11/4/2020', 7),
   (25, 93, '7/15/2021', 25),
   (78, 143, '6/22/2020', 4),
   (20, 30, '9/22/2020', 93),
   (47, 50, '6/25/2020', 28),
   (7, 98, '6/10/2020', 37),
   (39, 123, '6/28/2021', 36),
   (78, 36, '6/14/2020', 79),
   (61, 121, '2/26/2020', 2),
   (70, 159, '1/5/2020', 31),
   (62, 35, '12/30/2020', 70),
   (32, 82, '3/5/2021', 27),
   (63, 27, '3/17/2021', 3),
   (60, 89, '4/26/2021', 88),
   (23, 138, '1/19/2021', 65),
   (57, 13, '1/3/2021', 79),
   (56, 162, '7/30/2021', 84),
   (95, 91, '12/31/2020', 38),
   (39, 123, '2/25/2021', 28),
   (65, 74, '6/5/2020', 51),
   (53, 6, '8/3/2020', 26),
   (63, 96, '1/16/2021', 99),
   (94, 42, '11/17/2020', 15),
   (98, 107, '10/1/2020', 77),
   (83, 96, '9/19/2020', 79),
   (50, 116, '7/11/2020', 11),
   (91, 17, '1/26/2021', 99),
   (82, 23, '2/7/2021', 44),
   (85, 62, '6/26/2020', 27),
   (10, 19, '2/17/2021', 92),
   (60, 38, '7/1/2021', 49),
   (61, 113, '7/7/2020', 99),
   (45, 100, '6/2/2021', 18),
   (23, 112, '7/30/2021', 72),
   (61, 146, '2/11/2021', 85),
   (65, 142, '5/18/2020', 20),
   (56, 4, '5/13/2021', 21),
   (89, 129, '8/6/2021', 40),
   (64, 93, '2/7/2021', 63),
   (43, 53, '7/16/2021', 44),
   (36, 132, '7/19/2020', 95),
   (55, 118, '9/23/2020', 49),
   (50, 76, '3/23/2021', 84),
   (64, 62, '2/10/2020', 68),
   (20, 91, '11/2/2020', 3),
   (37, 140, '7/5/2021', 61),
   (41, 6, '6/4/2021', 47),
   (36, 130, '4/17/2021', 57),
   (79, 18, '3/15/2021', 93),
   (85, 67, '2/4/2021', 35),
   (49, 113, '9/10/2020', 78),
   (80, 89, '7/12/2021', 99),
   (99, 1, '11/18/2020', 27),
   (45, 35, '10/22/2020', 53),
   (12, 7, '7/2/2021', 57),
   (44, 156, '4/22/2020', 12),
   (40, 45, '3/16/2020', 47),
   (38, 67, '2/3/2020', 90),
   (32, 3, '11/22/2020', 86),
   (97, 58, '8/30/2020', 57),
   (77, 71, '10/23/2020', 3),
   (94, 138, '4/11/2020', 32),
   (100, 137, '11/3/2020', 13),
   (3, 43, '4/16/2020', 68),
   (89, 160, '4/25/2020', 45),
   (71, 136, '2/9/2021', 41),
   (87, 126, '8/3/2020', 64),
   (26, 69, '12/17/2020', 10),
   (79, 34, '5/1/2021', 10),
   (71, 111, '4/23/2021', 17),
   (23, 61, '4/24/2021', 49),
   (42, 126, '6/4/2021', 5),
   (15, 116, '11/12/2020', 28),
   (24, 22, '4/1/2021', 5),
   (69, 24, '5/4/2020', 21),
   (52, 108, '11/23/2020', 50),
   (37, 60, '5/24/2020', 54),
   (11, 41, '12/11/2020', 13),
   (26, 26, '3/18/2020', 69),
   (42, 9, '1/4/2020', 10),
   (50, 17, '4/16/2021', 86),
   (95, 88, '5/24/2021', 96),
   (10, 91, '1/7/2020', 98),
   (37, 99, '2/16/2021', 67),
   (11, 112, '7/11/2020', 13),
   (89, 151, '2/18/2021', 17),
   (16, 24, '11/14/2020', 14),
   (71, 16, '8/20/2020', 97),
   (51, 147, '2/27/2020', 34),
   (1, 34, '1/21/2020', 96),
   (53, 52, '8/30/2020', 99),
   (38, 34, '9/9/2020', 95),
   (51, 147, '6/20/2020', 6),
   (13, 55, '7/4/2020', 50),
   (90, 130, '11/1/2020', 57),
   (65, 4, '4/2/2020', 5),
   (75, 149, '7/4/2021', 39),
   (32, 77, '1/19/2020', 52),
   (4, 156, '8/9/2020', 96),
   (10, 103, '9/8/2020', 83),
   (71, 42, '12/30/2020', 52),
   (73, 117, '10/19/2020', 84),
   (20, 111, '10/20/2020', 29),
   (17, 89, '3/18/2020', 66),
   (11, 106, '10/25/2020', 5),
   (67, 106, '8/12/2021', 40),
   (3, 120, '12/29/2020', 37),
   (48, 126, '10/18/2020', 32),
   (26, 156, '3/26/2021', 72),
   (11, 110, '4/2/2020', 42),
   (37, 65, '7/6/2020', 75),
   (63, 123, '1/14/2021', 29),
   (88, 5, '7/12/2021', 20),
   (39, 124, '6/20/2020', 16),
   (93, 67, '10/7/2020', 56),
   (13, 117, '8/2/2021', 19),
   (38, 89, '8/12/2020', 8),
   (96, 91, '4/23/2020', 48),
   (61, 80, '5/29/2021', 45),
   (6, 144, '5/24/2020', 73),
   (70, 20, '6/23/2020', 44),
   (36, 36, '3/26/2020', 79),
   (53, 32, '8/25/2020', 54),
   (33, 1, '7/29/2021', 86),
   (86, 45, '2/1/2021', 39),
   (96, 112, '4/8/2021', 72),
   (11, 155, '5/12/2020', 41),
   (22, 96, '3/6/2020', 60),
   (90, 87, '4/20/2020', 61),
   (27, 74, '12/12/2020', 75),
   (35, 160, '8/12/2020', 43),
   (78, 152, '7/31/2021', 25),
   (60, 106, '1/2/2021', 91),
   (88, 27, '4/5/2021', 29),
   (7, 150, '5/9/2021', 38),
   (21, 153, '6/2/2020', 88),
   (17, 130, '2/4/2021', 66),
   (63, 30, '4/18/2021', 56),
   (64, 60, '7/15/2021', 38),
   (80, 156, '1/28/2021', 62),
   (3, 82, '6/15/2021', 60),
   (66, 158, '6/19/2021', 17),
   (51, 124, '4/1/2021', 11),
   (2, 95, '8/7/2021', 34),
   (24, 26, '6/3/2020', 2),
   (4, 20, '10/28/2020', 12),
   (43, 116, '3/31/2020', 12),
   (19, 137, '8/23/2020', 27),
   (66, 10, '3/5/2021', 94),
   (36, 132, '6/18/2021', 26),
   (85, 114, '3/13/2021', 12),
   (94, 43, '8/17/2020', 76),
   (45, 47, '4/13/2020', 69),
   (30, 66, '7/4/2020', 29),
   (37, 143, '3/4/2020', 81),
   (47, 152, '2/20/2021', 18),
   (10, 101, '2/25/2020', 50),
   (50, 101, '10/13/2020', 35),
   (47, 31, '8/13/2020', 81),
   (9, 57, '1/15/2021', 26),
   (72, 4, '5/2/2021', 68),
   (86, 110, '1/9/2021', 44),
   (28, 142, '9/8/2020', 70),
   (17, 137, '6/4/2021', 72),
   (54, 114, '6/22/2020', 95),
   (1, 23, '3/5/2021', 41),
   (65, 12, '10/16/2020', 94),
   (66, 110, '2/24/2021', 74),
   (25, 158, '9/27/2020', 7),
   (71, 27, '2/17/2021', 37),
   (37, 60, '2/2/2020', 10),
   (89, 79, '9/17/2020', 16),
   (13, 32, '12/21/2020', 81),
   (97, 64, '8/3/2021', 15),
   (56, 79, '7/5/2020', 19),
   (26, 126, '6/11/2020', 22),
   (52, 27, '7/1/2021', 29),
   (93, 106, '6/11/2020', 86),
   (84, 68, '5/13/2020', 42),
   (57, 123, '4/15/2021', 23),
   (18, 51, '7/9/2020', 5),
   (82, 8, '10/4/2020', 19),
   (100, 23, '6/7/2020', 79),
   (45, 35, '10/29/2020', 16),
   (11, 29, '11/1/2020', 44),
   (70, 11, '2/4/2020', 97),
   (9, 127, '7/23/2020', 73),
   (65, 76, '8/17/2020', 94),
   (47, 127, '7/18/2021', 30),
   (70, 80, '3/13/2021', 26),
   (39, 18, '4/6/2021', 18),
   (78, 160, '9/2/2020', 54),
   (30, 61, '8/7/2021', 98),
   (64, 140, '2/9/2021', 48),
   (67, 50, '4/30/2020', 92),
   (43, 122, '6/19/2021', 63),
   (39, 35, '4/3/2020', 75),
   (9, 13, '4/18/2021', 3),
   (50, 13, '7/11/2021', 48),
   (82, 60, '6/16/2020', 54),
   (32, 120, '3/16/2020', 6),
   (22, 63, '11/11/2020', 58),
   (15, 38, '2/1/2021', 14),
   (45, 15, '3/20/2020', 9),
   (78, 70, '8/13/2021', 5),
   (11, 120, '1/16/2021', 23),
   (62, 49, '1/21/2020', 34),
   (27, 43, '1/16/2020', 37),
   (22, 18, '3/24/2021', 93),
   (40, 51, '5/21/2021', 18),
   (82, 27, '4/8/2020', 83),
   (15, 25, '7/5/2021', 10),
   (67, 104, '5/24/2021', 28),
   (61, 28, '3/25/2020', 78),
   (27, 77, '3/20/2021', 53),
   (82, 93, '9/27/2020', 78),
   (33, 64, '9/29/2020', 73),
   (65, 27, '1/10/2020', 61),
   (65, 90, '2/26/2020', 87),
   (65, 17, '3/21/2021', 79),
   (83, 4, '12/22/2020', 34),
   (45, 134, '3/5/2020', 41),
   (26, 39, '1/28/2020', 72),
   (43, 128, '4/20/2021', 59),
   (70, 133, '4/8/2021', 16),
   (1, 162, '6/27/2020', 14),
   (11, 136, '3/16/2020', 6),
   (56, 48, '11/7/2020', 67),
   (13, 31, '9/22/2020', 11),
   (61, 150, '3/14/2020', 19),
   (24, 129, '11/10/2020', 55),
   (18, 43, '2/9/2021', 26),
   (60, 51, '1/7/2020', 16),
   (83, 50, '5/14/2021', 43),
   (88, 99, '12/19/2020', 90),
   (2, 116, '8/27/2020', 61),
   (78, 56, '1/10/2020', 66),
   (60, 161, '4/30/2020', 43),
   (14, 138, '5/12/2021', 36),
   (80, 28, '5/12/2021', 37),
   (55, 70, '3/5/2020', 26),
   (14, 26, '6/9/2021', 60),
   (13, 32, '6/12/2020', 37),
   (99, 133, '5/24/2021', 23),
   (72, 44, '6/1/2020', 30),
   (38, 60, '5/15/2021', 15),
   (7, 93, '1/22/2021', 75),
   (94, 42, '8/10/2021', 15),
   (83, 48, '8/11/2021', 74),
   (84, 127, '4/16/2020', 100),
   (78, 66, '6/5/2020', 79),
   (43, 158, '1/2/2020', 99),
   (75, 64, '6/9/2021', 49),
   (96, 2, '6/20/2020', 14),
   (43, 143, '8/15/2021', 24),
   (16, 113, '9/8/2020', 4),
   (54, 74, '2/2/2021', 38),
   (46, 149, '1/10/2020', 76),
   (87, 22, '1/10/2020', 22),
   (51, 74, '6/17/2020', 71),
   (99, 44, '1/8/2021', 100),
   (86, 133, '4/9/2020', 6),
   (100, 132, '4/13/2021', 40),
   (3, 85, '4/2/2020', 35),
   (53, 141, '12/3/2020', 54),
   (34, 104, '8/2/2020', 99),
   (96, 39, '2/25/2020', 64),
   (98, 33, '10/2/2020', 59),
   (69, 76, '5/8/2020', 83),
   (82, 24, '11/29/2020', 91),
   (98, 42, '9/19/2020', 46),
   (99, 54, '6/16/2020', 87),
   (9, 154, '11/6/2020', 39),
   (2, 5, '7/11/2020', 44),
   (76, 32, '4/26/2021', 54),
   (25, 69, '11/8/2020', 33),
   (74, 98, '12/18/2020', 2),
   (66, 98, '12/29/2020', 51),
   (94, 26, '5/22/2021', 28),
   (14, 95, '5/9/2020', 86),
   (92, 54, '4/15/2020', 70),
   (19, 148, '5/22/2021', 15),
   (83, 117, '5/10/2020', 14),
   (49, 20, '2/1/2020', 45),
   (90, 104, '11/19/2020', 34),
   (73, 128, '1/5/2021', 32),
   (29, 33, '1/24/2021', 5),
   (69, 126, '3/11/2020', 76),
   (86, 63, '11/2/2020', 8),
   (5, 150, '3/24/2021', 45),
   (21, 17, '11/1/2020', 87),
   (36, 20, '12/31/2020', 71),
   (64, 149, '4/13/2020', 17),
   (27, 63, '4/29/2020', 33),
   (97, 54, '6/22/2021', 96),
   (16, 25, '2/12/2021', 52),
   (15, 111, '6/13/2020', 48),
   (30, 121, '1/26/2021', 69),
   (32, 137, '11/26/2020', 38),
   (34, 28, '8/3/2020', 36),
   (90, 107, '4/10/2020', 100),
   (97, 95, '4/7/2021', 29),
   (30, 43, '10/3/2020', 30),
   (63, 66, '8/22/2020', 56),
   (90, 24, '2/15/2020', 73),
   (32, 75, '9/25/2020', 15),
   (15, 56, '5/4/2021', 20),
   (83, 153, '6/2/2021', 58),
   (90, 12, '6/24/2020', 75),
   (94, 143, '1/31/2021', 7),
   (40, 23, '2/5/2021', 71),
   (8, 129, '2/20/2020', 80),
   (22, 84, '5/16/2021', 44),
   (34, 44, '3/17/2021', 41),
   (13, 150, '4/12/2020', 73),
   (66, 79, '1/16/2020', 17),
   (86, 63, '12/16/2020', 97),
   (29, 115, '5/12/2020', 29),
   (3, 79, '3/17/2020', 19),
   (51, 34, '5/16/2020', 71),
   (11, 70, '2/8/2021', 45),
   (95, 119, '5/22/2020', 4),
   (30, 43, '10/20/2020', 74),
   (1, 110, '8/4/2020', 55),
   (67, 132, '6/27/2020', 59),
   (24, 26, '10/15/2020', 38),
   (64, 21, '3/4/2020', 55),
   (58, 139, '3/17/2021', 69),
   (90, 43, '7/13/2020', 14),
   (66, 72, '8/31/2020', 44),
   (6, 24, '6/7/2021', 61),
   (22, 25, '4/24/2021', 10),
   (50, 154, '6/25/2020', 65),
   (59, 128, '8/2/2020', 47),
   (35, 21, '5/26/2020', 54),
   (10, 44, '2/26/2020', 96),
   (67, 18, '8/3/2021', 69),
   (78, 140, '3/9/2021', 9),
   (100, 124, '7/26/2021', 61),
   (91, 114, '11/20/2020', 5),
   (97, 133, '10/30/2020', 50),
   (1, 99, '10/31/2020', 33),
   (53, 56, '2/5/2020', 60),
   (52, 13, '10/28/2020', 35),
   (72, 3, '12/18/2020', 59),
   (35, 11, '6/29/2020', 81),
   (24, 101, '12/11/2020', 83),
   (29, 113, '2/15/2021', 41),
   (49, 34, '6/30/2021', 24),
   (3, 20, '8/29/2020', 80),
   (25, 110, '6/18/2021', 97),
   (98, 36, '11/18/2020', 30),
   (2, 63, '3/4/2020', 64),
   (65, 27, '8/21/2020', 67),
   (51, 79, '8/4/2020', 86),
   (69, 50, '8/12/2020', 44),
   (1, 127, '3/21/2020', 44),
   (81, 96, '3/2/2021', 87),
   (20, 105, '2/9/2020', 42),
   (49, 113, '3/11/2021', 16),
   (75, 116, '10/18/2020', 51),
   (28, 70, '12/27/2020', 90),
   (86, 116, '7/10/2020', 28),
   (73, 160, '7/29/2020', 58),
   (26, 45, '5/6/2021', 44),
   (72, 47, '10/14/2020', 98),
   (90, 110, '2/1/2020', 4),
   (65, 141, '5/21/2020', 28),
   (74, 108, '12/24/2020', 51),
   (16, 68, '5/7/2020', 19),
   (16, 31, '1/29/2021', 88),
   (36, 45, '5/16/2020', 89),
   (37, 113, '7/28/2021', 94),
   (94, 112, '4/29/2020', 47),
   (67, 145, '7/27/2021', 30),
   (32, 156, '7/15/2020', 56),
   (60, 75, '1/26/2020', 27),
   (78, 30, '4/16/2020', 16),
   (41, 59, '1/22/2020', 55),
   (4, 158, '12/5/2020', 28),
   (91, 46, '2/19/2021', 28),
   (81, 9, '12/8/2020', 34),
   (41, 28, '12/17/2020', 30),
   (93, 138, '8/24/2020', 17),
   (91, 79, '10/12/2020', 6),
   (8, 23, '2/10/2021', 57),
   (33, 134, '9/28/2020', 83),
   (30, 133, '7/5/2020', 55),
   (57, 105, '3/13/2021', 86),
   (100, 109, '5/26/2020', 64),
   (82, 44, '9/30/2020', 51),
   (71, 121, '5/7/2020', 48),
   (63, 140, '1/15/2020', 25),
   (64, 61, '6/28/2021', 96),
   (23, 139, '4/26/2020', 87),
   (85, 14, '11/5/2020', 98),
   (30, 33, '4/18/2021', 100),
   (83, 92, '8/25/2020', 15),
   (89, 94, '8/17/2021', 69),
   (91, 144, '2/25/2020', 42),
   (64, 112, '8/16/2020', 26),
   (35, 64, '6/8/2021', 58),
   (68, 9, '6/29/2020', 67),
   (93, 111, '10/7/2020', 86),
   (79, 159, '11/9/2020', 59),
   (6, 103, '10/15/2020', 10),
   (46, 48, '10/24/2020', 8),
   (62, 77, '7/29/2021', 25),
   (17, 46, '7/15/2020', 55),
   (66, 124, '1/13/2021', 100),
   (1, 158, '4/25/2020', 69),
   (100, 143, '8/1/2021', 70),
   (79, 17, '7/30/2020', 5),
   (86, 105, '1/15/2021', 75),
   (31, 46, '1/8/2020', 63),
   (60, 152, '1/15/2020', 25),
   (55, 73, '12/13/2020', 32),
   (51, 101, '7/18/2020', 80),
   (88, 127, '7/9/2020', 45),
   (86, 72, '2/10/2021', 96),
   (77, 57, '5/12/2021', 95),
   (16, 85, '6/9/2020', 88),
   (61, 81, '5/29/2021', 54),
   (81, 26, '4/29/2020', 14),
   (19, 64, '9/23/2020', 87),
   (23, 40, '8/23/2020', 96),
   (56, 2, '10/28/2020', 54),
   (23, 9, '4/8/2020', 17),
   (50, 128, '2/23/2021', 18),
   (58, 123, '6/9/2020', 68),
   (100, 160, '8/18/2020', 6),
   (44, 31, '11/9/2020', 93),
   (4, 46, '5/4/2021', 22),
   (19, 62, '5/19/2020', 72),
   (77, 87, '3/7/2021', 11),
   (1, 19, '10/19/2020', 53),
   (38, 152, '3/9/2021', 14),
   (71, 68, '4/21/2021', 85),
   (57, 22, '11/1/2020', 13),
   (48, 22, '6/14/2021', 80),
   (73, 27, '4/8/2020', 2),
   (4, 90, '12/17/2020', 59),
   (69, 9, '8/26/2020', 66),
   (92, 80, '11/16/2020', 3),
   (30, 135, '3/17/2021', 78),
   (79, 75, '1/28/2020', 98),
   (81, 7, '3/2/2020', 8),
   (88, 81, '1/11/2021', 97),
   (76, 9, '1/7/2021', 65),
   (16, 25, '2/7/2021', 40),
   (54, 15, '11/23/2020', 55),
   (6, 161, '1/30/2020', 70),
   (68, 16, '1/28/2021', 48),
   (46, 42, '9/2/2020', 35),
   (70, 2, '6/17/2021', 35),
   (32, 31, '12/6/2020', 99),
   (76, 86, '5/6/2020', 43),
   (73, 28, '3/26/2021', 5),
   (56, 45, '6/4/2021', 89),
   (62, 97, '11/29/2020', 19),
   (90, 99, '9/15/2020', 41),
   (68, 86, '3/17/2020', 95),
   (52, 89, '11/22/2020', 56),
   (27, 86, '4/12/2020', 38),
   (18, 136, '1/17/2021', 53),
   (50, 150, '8/7/2021', 5),
   (41, 64, '1/20/2021', 93),
   (89, 150, '5/31/2021', 29),
   (11, 76, '11/19/2020', 23),
   (18, 81, '1/12/2021', 29),
   (71, 53, '6/6/2020', 67),
   (38, 75, '3/21/2021', 100),
   (87, 109, '5/9/2021', 59),
   (83, 16, '4/20/2021', 88),
   (8, 33, '8/3/2021', 54),
   (64, 13, '2/21/2021', 18),
   (4, 141, '3/1/2020', 21),
   (45, 30, '6/3/2020', 94),
   (50, 1, '5/15/2021', 2),
   (56, 130, '4/3/2020', 5),
   (61, 50, '3/23/2021', 83),
   (24, 154, '10/18/2020', 97),
   (7, 79, '10/21/2020', 98),
   (99, 81, '11/14/2020', 75),
   (9, 24, '11/20/2020', 5),
   (34, 30, '9/18/2020', 86),
   (20, 133, '5/4/2020', 11),
   (80, 120, '11/30/2020', 11),
   (1, 98, '8/12/2020', 22),
   (70, 34, '6/29/2021', 69),
   (57, 67, '4/7/2021', 82),
   (61, 68, '1/23/2021', 46),
   (7, 12, '1/28/2020', 93),
   (99, 25, '2/28/2021', 74),
   (14, 108, '4/18/2021', 40),
   (43, 151, '7/31/2021', 92),
   (36, 140, '8/6/2020', 24),
   (46, 81, '7/27/2020', 49),
   (29, 119, '5/5/2021', 39),
   (36, 57, '4/24/2020', 69),
   (77, 143, '11/28/2020', 49),
   (49, 66, '1/5/2020', 36),
   (5, 11, '10/13/2020', 4),
   (77, 58, '6/3/2020', 45),
   (9, 45, '4/1/2020', 62),
   (74, 55, '3/31/2021', 27),
   (93, 120, '4/2/2020', 56),
   (78, 137, '1/26/2021', 70),
   (89, 143, '4/4/2021', 36),
   (26, 68, '4/19/2021', 12),
   (2, 77, '3/25/2020', 67),
   (52, 161, '11/11/2020', 43),
   (12, 6, '11/28/2020', 23),
   (75, 31, '5/1/2021', 87),
   (92, 146, '11/27/2020', 59),
   (12, 99, '3/28/2020', 98),
   (68, 104, '1/11/2020', 48),
   (5, 132, '5/16/2020', 37),
   (63, 133, '5/11/2020', 76),
   (53, 95, '6/16/2020', 32),
   (26, 43, '7/10/2021', 48),
   (84, 101, '6/25/2020', 62),
   (27, 51, '12/31/2020', 87),
   (69, 33, '2/10/2021', 92),
   (96, 93, '3/11/2020', 24),
   (61, 84, '10/28/2020', 6),
   (5, 146, '6/14/2020', 55),
   (42, 10, '11/6/2020', 100),
   (53, 159, '6/11/2021', 95),
   (50, 38, '5/18/2021', 69),
   (48, 70, '8/15/2020', 81),
   (55, 143, '1/3/2020', 76),
   (68, 39, '6/19/2020', 39),
   (91, 74, '7/29/2020', 3),
   (36, 89, '5/13/2021', 21),
   (36, 136, '4/1/2021', 9),
   (42, 15, '5/18/2021', 55),
   (30, 75, '7/22/2021', 44),
   (28, 143, '5/31/2021', 81),
   (55, 119, '1/10/2021', 64),
   (79, 127, '12/18/2020', 78),
   (96, 30, '3/24/2020', 50),
   (82, 24, '9/6/2020', 12),
   (88, 73, '2/24/2020', 23),
   (25, 50, '2/20/2020', 14),
   (1, 159, '9/18/2020', 56),
   (82, 16, '1/28/2021', 76),
   (34, 103, '6/16/2020', 37),
   (97, 35, '7/6/2020', 94),
   (53, 69, '3/7/2020', 36),
   (82, 13, '3/13/2021', 45),
   (8, 6, '7/8/2020', 74),
   (56, 158, '8/20/2020', 19),
   (72, 46, '8/27/2020', 53),
   (44, 122, '10/30/2020', 40),
   (49, 36, '7/8/2021', 39),
   (85, 12, '4/2/2020', 60),
   (66, 54, '1/15/2020', 34),
   (75, 47, '4/20/2020', 48),
   (88, 118, '4/4/2021', 61),
   (7, 89, '12/29/2020', 7),
   (15, 47, '5/8/2020', 59),
   (63, 55, '9/30/2020', 14),
   (69, 62, '7/15/2021', 84),
   (87, 129, '6/30/2020', 4),
   (43, 21, '8/6/2021', 1),
   (81, 78, '6/28/2020', 76),
   (83, 133, '9/8/2020', 86),
   (6, 102, '5/2/2021', 37),
   (55, 67, '6/2/2021', 36),
   (60, 72, '2/17/2021', 65),
   (37, 142, '8/13/2021', 44),
   (10, 92, '12/4/2020', 6),
   (79, 43, '9/5/2020', 7),
   (15, 146, '2/25/2020', 92),
   (68, 34, '4/1/2021', 86),
   (75, 113, '1/27/2020', 45),
   (37, 31, '6/26/2021', 22),
   (49, 108, '6/3/2020', 74),
   (1, 66, '12/16/2020', 25),
   (13, 124, '12/31/2020', 78),
   (27, 30, '7/5/2021', 86),
   (61, 130, '3/11/2021', 50),
   (53, 131, '5/7/2021', 24),
   (19, 64, '2/19/2020', 61),
   (87, 32, '1/25/2020', 48),
   (59, 28, '3/22/2020', 42),
   (63, 85, '11/1/2020', 75),
   (44, 118, '1/27/2020', 31),
   (71, 37, '4/22/2020', 8),
   (27, 61, '1/28/2021', 67),
   (83, 96, '1/27/2021', 76),
   (98, 23, '10/9/2020', 34),
   (80, 9, '1/24/2020', 18),
   (77, 95, '5/11/2020', 1),
   (36, 122, '7/20/2021', 58),
   (24, 157, '4/14/2020', 30),
   (81, 126, '10/16/2020', 98),
   (35, 49, '3/8/2021', 82),
   (91, 18, '4/13/2020', 1),
   (100, 43, '5/6/2020', 76),
   (50, 135, '1/23/2020', 57),
   (51, 87, '12/10/2020', 85),
   (7, 116, '3/18/2020', 21),
   (83, 152, '7/27/2021', 23),
   (46, 66, '12/12/2020', 76),
   (51, 152, '9/1/2020', 78),
   (3, 57, '1/2/2021', 75),
   (3, 135, '5/15/2020', 33),
   (78, 154, '8/30/2020', 96),
   (95, 12, '3/20/2021', 83),
   (3, 53, '9/2/2020', 24),
   (10, 48, '2/8/2020', 15),
   (67, 61, '7/2/2020', 32),
   (1, 1, '5/16/2021', 78),
   (98, 78, '2/26/2021', 9),
   (3, 112, '6/17/2021', 79),
   (46, 54, '7/1/2021', 78),
   (30, 13, '6/11/2020', 46),
   (90, 98, '6/11/2020', 30),
   (63, 151, '11/29/2020', 23),
   (42, 138, '8/10/2020', 21),
   (86, 93, '5/8/2021', 44),
   (33, 64, '6/18/2021', 67),
   (83, 128, '5/30/2021', 14),
   (56, 14, '5/23/2021', 37),
   (54, 17, '5/24/2021', 38),
   (87, 51, '3/12/2020', 1),
   (44, 10, '6/26/2020', 27),
   (44, 64, '11/19/2020', 34),
   (64, 68, '5/30/2021', 20),
   (32, 26, '5/26/2021', 80),
   (6, 37, '5/18/2020', 66),
   (46, 88, '6/22/2021', 91),
   (60, 74, '12/30/2020', 10),
   (72, 61, '2/2/2020', 2),
   (88, 21, '7/11/2020', 1),
   (76, 37, '9/21/2020', 62),
   (12, 69, '10/29/2020', 29),
   (60, 37, '7/21/2021', 12),
   (71, 38, '2/1/2020', 84),
   (59, 95, '5/9/2021', 92),
   (51, 55, '6/5/2021', 33),
   (41, 45, '3/3/2021', 82),
   (70, 5, '3/19/2020', 54),
   (86, 7, '11/6/2020', 76),
   (96, 79, '6/28/2021', 100),
   (79, 134, '10/28/2020', 42),
   (33, 80, '12/21/2020', 19),
   (15, 131, '2/11/2020', 70),
   (60, 119, '7/6/2021', 67),
   (90, 48, '10/31/2020', 71),
   (19, 66, '6/17/2020', 19),
   (40, 136, '9/15/2020', 63),
   (74, 81, '8/31/2020', 85),
   (88, 66, '4/27/2021', 60),
   (63, 52, '12/12/2020', 76),
   (51, 98, '4/4/2020', 62),
   (71, 4, '3/18/2020', 23),
   (40, 95, '1/24/2021', 77),
   (78, 159, '8/1/2021', 64),
   (70, 137, '2/27/2021', 38),
   (50, 162, '10/9/2020', 86),
   (8, 151, '8/18/2020', 46),
   (78, 75, '7/27/2020', 97),
   (23, 131, '2/24/2021', 52),
   (68, 60, '11/11/2020', 36),
   (80, 77, '4/26/2021', 80),
   (10, 99, '4/11/2021', 89),
   (61, 77, '6/14/2021', 76),
   (58, 137, '4/10/2021', 77),
   (80, 82, '7/19/2021', 67),
   (19, 46, '7/21/2021', 11),
   (82, 121, '3/23/2020', 50),
   (88, 149, '5/18/2020', 87),
   (47, 112, '4/16/2021', 17),
   (31, 120, '8/24/2020', 77),
   (7, 56, '1/8/2020', 74),
   (60, 85, '11/23/2020', 10),
   (65, 75, '3/31/2020', 59),
   (35, 47, '9/10/2020', 100),
   (45, 121, '5/21/2021', 94),
   (98, 94, '5/19/2020', 76),
   (49, 37, '6/30/2021', 63),
   (1, 39, '3/6/2021', 93),
   (55, 12, '8/13/2020', 20),
   (100, 26, '4/11/2021', 21),
   (21, 87, '2/2/2020', 74),
   (77, 127, '11/25/2020', 21),
   (54, 93, '3/20/2021', 34),
   (37, 69, '6/13/2020', 91),
   (31, 93, '2/13/2021', 91),
   (37, 45, '12/27/2020', 52),
   (58, 24, '3/25/2021', 24),
   (69, 13, '6/22/2021', 7),
   (33, 132, '12/19/2020', 47),
   (67, 80, '4/19/2020', 65),
   (26, 131, '1/21/2021', 41),
   (71, 44, '8/21/2020', 3),
   (72, 6, '9/13/2020', 46),
   (76, 161, '8/1/2020', 8),
   (81, 55, '6/6/2020', 93),
   (60, 5, '4/23/2021', 62),
   (96, 51, '5/12/2020', 90),
   (56, 83, '9/16/2020', 17),
   (1, 58, '11/2/2020', 7),
   (11, 109, '2/15/2021', 48),
   (39, 121, '1/25/2020', 65),
   (35, 123, '5/22/2020', 7),
   (66, 145, '7/10/2020', 21),
   (68, 43, '12/26/2020', 40),
   (94, 11, '8/24/2020', 38),
   (9, 63, '5/29/2020', 78),
   (33, 5, '12/29/2020', 11),
   (26, 73, '5/8/2021', 85),
   (5, 42, '3/10/2020', 100),
   (33, 158, '1/4/2021', 76),
   (11, 108, '9/27/2020', 87),
   (58, 57, '4/28/2020', 33),
   (46, 21, '7/10/2020', 36),
   (2, 45, '11/17/2020', 16),
   (20, 89, '6/28/2020', 55),
   (90, 41, '4/10/2020', 19),
   (17, 151, '4/24/2020', 35),
   (90, 153, '4/17/2021', 78),
   (58, 74, '7/2/2021', 60),
   (32, 54, '1/23/2020', 1),
   (34, 55, '6/23/2020', 69),
   (38, 33, '6/8/2020', 82),
   (44, 77, '8/1/2021', 81),
   (24, 89, '12/11/2020', 70),
   (43, 112, '7/30/2021', 2),
   (23, 114, '12/23/2020', 50),
   (49, 32, '7/11/2021', 92),
   (92, 117, '6/25/2020', 63),
   (57, 65, '2/20/2021', 10),
   (72, 38, '5/28/2021', 41),
   (59, 115, '6/13/2020', 12),
   (84, 70, '4/13/2021', 18),
   (40, 25, '5/27/2020', 45),
   (97, 131, '3/14/2021', 48),
   (89, 154, '7/17/2021', 33),
   (85, 161, '3/13/2021', 47),
   (12, 149, '9/22/2020', 37),
   (94, 2, '9/20/2020', 69),
   (68, 135, '3/4/2021', 4),
   (63, 160, '12/7/2020', 73),
   (34, 157, '5/9/2020', 92),
   (27, 96, '3/12/2021', 54),
   (57, 107, '9/9/2020', 50),
   (68, 15, '1/3/2021', 77),
   (21, 34, '3/15/2020', 30),
   (3, 20, '1/25/2020', 40),
   (12, 159, '5/22/2021', 76),
   (71, 36, '3/27/2021', 18),
   (10, 96, '4/12/2021', 22),
   (51, 3, '8/10/2020', 15),
   (49, 37, '2/15/2021', 40),
   (23, 114, '7/31/2021', 69),
   (66, 86, '3/3/2020', 43),
   (96, 73, '6/27/2021', 3),
   (91, 123, '4/10/2021', 85),
   (24, 86, '5/13/2020', 50),
   (9, 134, '7/21/2020', 27),
   (35, 123, '4/29/2021', 95),
   (17, 90, '1/21/2021', 83),
   (33, 102, '9/14/2020', 31),
   (51, 158, '3/28/2021', 7),
   (83, 87, '6/26/2021', 65),
   (18, 33, '10/20/2020', 16),
   (98, 52, '8/16/2020', 89),
   (23, 54, '6/6/2020', 49),
   (55, 63, '1/16/2020', 3),
   (7, 85, '1/12/2020', 76),
   (55, 134, '3/31/2021', 97),
   (94, 120, '7/27/2021', 57),
   (67, 129, '9/13/2020', 70),
   (98, 154, '6/29/2021', 33),
   (100, 102, '4/21/2020', 92),
   (64, 56, '12/12/2020', 56),
   (45, 2, '3/10/2021', 57),
   (62, 78, '6/22/2021', 53),
   (15, 52, '1/29/2020', 3),
   (29, 13, '7/2/2020', 72),
   (96, 140, '1/13/2021', 27),
   (2, 57, '12/27/2020', 79),
   (48, 5, '2/7/2020', 54),
   (58, 85, '10/16/2020', 10),
   (86, 73, '7/10/2021', 60),
   (38, 159, '2/14/2021', 67),
   (85, 159, '11/8/2020', 55),
   (92, 2, '3/3/2020', 59),
   (49, 51, '10/13/2020', 83),
   (65, 83, '4/11/2020', 99),
   (70, 59, '3/6/2021', 85),
   (7, 55, '1/6/2021', 22),
   (45, 148, '12/4/2020', 30),
   (65, 50, '5/14/2020', 42),
   (27, 57, '6/29/2021', 11),
   (53, 10, '1/21/2021', 59);", , ,,,
A0090966R,/* The code is written for SQLite */,"/*The purpose of designing the tables is to know how many students enrolled
in each module within a academic year in order to plan the resources 
accordlingly, such as the sizes of the classrooms, number of teaching assistants 
and so on. In addition, the tables also allow us to know the total umber of 
module credits that each student is taking in order to prevent exceeding 
maximum module credits allowed to take for each year. 
There are three tables been created with names 'students', 'modules' and 
'enrolments' respectively.
Table 'students' (or entity set E1) contains the basic information of the
students from a school with admission year of 2010, for example NUS School 
of Computing. Basic information includs 'student_id', 'first_name', 'last_name', 
'email', 'nationality', 'admission_year' and 'date_of_birth'.
Table 'modules' (or entity set E2) contains the basic information of the 
models offer by the school. Information includes 'module_number', 'academic_year',
and 'module_credits'.
Table 'enrolments' (or many-to-many relationship set R) contains the modeule
enrolments of the students between year 2010 and 2012. The attributes include 
'student_id', 'module_number' and 'academic_year'. 
The code is written for SQLite
*/", , ,"CREATE TABLE IF NOT EXISTS students (
	student_id VARCHAR(10) PRIMARY KEY,
	first_name VARCHAR(64) NOT NULL,
	last_name VARCHAR(64) NOT NULL,
	email VARCHAR(256) UNIQUE NOT NULL,
	nationality VARCHAR(32) NOT NULL,
	admission_year DATE NOT NULL,
	date_of_birth DATE NOT NULL
	CHECK(admission_year >= date_of_birth)
	);
CREATE TABLE IF NOT EXISTS modules (
	module_number CHAR(5) NOT NULL,
	academic_year DATE NOT NULL,
	module_credits INT CHECK(module_credits>=0),
	PRIMARY KEY (module_number, academic_year)); 
CREATE TABLE IF NOT EXISTS enrolments (
	student_id VARCHAR(10) REFERENCES students(student_id)
		ON UPDATE CASCADE ON DELETE CASCADE
		DEFERRABLE INITIALLY DEFERRED,
	module_number CHAR(5) NOT NULL,
	academic_year VARCHAR(4) NOT NULL,
	CHECK (academic_year > 2000),
	PRIMARY KEY (student_id, module_number, academic_year)
	FOREIGN KEY (module_number, academic_year) REFERENCES modules(module_number, academic_year)
		ON UPDATE CASCADE ON DELETE CASCADE
		DEFERRABLE INITIALLY DEFERRED);", , ,"--populate data into table 'students' insert into students (student_id, first_name, last_name, email, nationality, admission_year, date_of_birth) values ('S1', 'Keen', 'Benech', 'kbenech0@creativecommons.org', 'Jamaica', '2010-08-01', '1992-08-14');
insert into students (student_id, first_name, last_name, email, nationality, admission_year, date_of_birth) values ('S2', 'Timofei', 'Kain', 'tkain1@yahoo.com', 'Philippines', '2010-08-01', '1992-04-10');
insert into students (student_id, first_name, last_name, email, nationality, admission_year, date_of_birth) values ('S3', 'Sheela', 'Scrowby', 'sscrowby2@comsenz.com', 'Russia', '2010-08-01', '1990-10-05');
 
--populate data into table 'modules' insert into modules (module_number, academic_year, module_credits) values ('M1541', '2010-08-01', 4);
insert into modules (module_number, academic_year, module_credits) values ('M1482', '2010-08-01', 3);
insert into modules (module_number, academic_year, module_credits) values ('M1323', '2010-08-01', 3);", , ,"CREATE TABLE IF NOT EXISTS enrolments (
	student_id VARCHAR(10) REFERENCES enrolments(student_id),
	module_number CHAR(5) NOT NULL,
	academic_year DATE NOT NULL,
	PRIMARY KEY (student_id, module_number, academic_year)); 
INSERT INTO enrolments
SELECT s.student_id, m.module_number, m.academic_year
FROM students s CROSS JOIN modules m
ORDER BY RANDOM() LIMIT 1000;
--OR
--CREATE VIEW enrolments2 AS 
--SELECT s.student_id, m.module_number, m.academic_year
--FROM students s CROSS JOIN modules m
--ORDER BY RANDOM() LIMIT 1000;", , ,,,
A0093740E,/* The code is written for PostgreSQL */,"/*I'm creating a many-to-many relationship between actors and movies. 
One actor can appear in many movies, and one movie can have many actors.
Entity Set E1 is the actors table.
Entity Set E2 is the movies table.
Relationship Set R is movies_actors table.
actors table contains information of ""actor_id (primary key), first_name, last_name, gender, and date_of_birth of the actor"".
movies table contains information of ""movie_id (primary key), movie_name, movie_language, and release_date of the movie"".
movies_actors table contains information of ""movie_id (referenced column), actor_id (referenced column), and the primary key is (movie_id plus actor_id)"". 
My answers are written for PostgreSQL.
*/", , ,"/*Drop the following tables if they exist
DROP TABLE movies_actors;
DROP TABLE actors;
DROP TABLE movies;*/
/*Create Entity Set E1 to be the actors table*/
CREATE TABLE IF NOT EXISTS actors (
	actor_id INT PRIMARY KEY,
	first_name VARCHAR(30) NOT NULL,
	last_name VARCHAR(30) NOT NULL,
	gender CHAR(1) NOT NULL,
	date_of_birth DATE NOT NULL
);
/*Create Entity Set E2 to be the movies table*/ 
CREATE TABLE IF NOT EXISTS movies (
	movie_id INT PRIMARY KEY,
	movie_name VARCHAR(100) NOT NULL, 
	movie_language VARCHAR(50) NOT NULL,
	release_date DATE NOT NULL
);
/*Create the Relationship Set R to be movies_actors */ 
CREATE TABLE IF NOT EXISTS movies_actors (
	movie_id INT REFERENCES movies (movie_id)
	ON UPDATE CASCADE ON DELETE CASCADE
	DEFERRABLE INITIALLY DEFERRED,
	actor_id INT REFERENCES actors (actor_id)
	ON UPDATE CASCADE ON DELETE CASCADE
	DEFERRABLE INITIALLY DEFERRED,
	PRIMARY KEY (movie_id, actor_id)
);", , ,"/*Insert 100 data to actors table*/ insert into actors (actor_id, first_name, last_name, gender, date_of_birth) values (1, 'Esdras', 'MacKniely', 'M', '1999-01-26');
insert into actors (actor_id, first_name, last_name, gender, date_of_birth) values (2, 'Hans', 'Kerfoot', 'M', '2001-11-08');
insert into actors (actor_id, first_name, last_name, gender, date_of_birth) values (3, 'Marybeth', 'Youde', 'F', '2002-08-13');
 
/*Insert 100 data to movies table*/ insert into movies (movie_id, movie_name, movie_language, release_date) values (1, 'Hewitt', 'Pesek', '2012-08-03');
insert into movies (movie_id, movie_name, movie_language, release_date) values (2, 'Claudius', 'Sulley', '1995-12-02');
insert into movies (movie_id, movie_name, movie_language, release_date) values (3, 'Beale', 'O''Shirine', '2003-04-14');", , ,"INSERT INTO movies_actors (SELECT actor_id, movie_id FROM actors,movies) ORDER BY RANDOM() LIMIT 1000;
SELECT * FROM movies_actors;", , ,,,
A0105567A,/* The code is written for PostgreSQL */,"/*Entity E1 is different drugs produced by drug companies
Entity E2 is customers
Optional many-to-many relationship set R is the drug perscription
Written in PostgreSQL
*/", , ,"CREATE TABLE IF NOT EXISTS Drug (
	company_name VARCHAR(1024) NOT NULL,
	brand_name VARCHAR(1024),
	generic_name VARCHAR(1024),
	price NUMERIC NOT NULL,
	PRIMARY KEY (company_name, brand_name));
CREATE TABLE IF NOT EXISTS Customer(
	customerid VARCHAR(64) PRIMARY KEY,
	first_name VARCHAR(1024) NOT NULL,
	last_name VARCHAR(11024) NOT NULL,
	email VARCHAR(1024) UNIQUE NOT NULL,
	dob DATE NOT NULL,
	country VARCHAR(64) NOT NULL);
CREATE TABLE IF NOT EXISTS Prescription(
	customerid VARCHAR(64) REFERENCES Customer (customerid),
	company_name VARCHAR (1024),
	brand_name VARCHAR(1024),
	PRIMARY KEY (customerid, company_name, brand_name),
	FOREIGN KEY (company_name, brand_name) REFERENCES Drug(company_name, brand_name));", , ,"insert into Drug (company_name, brand_name, generic_name, price) values ('Nelco Laboratories, Inc.', 'Tangerine', 'Tangerine', 85);
insert into Drug (company_name, brand_name, generic_name, price) values ('AvPAK', 'Benazepril Hydrochloride', 'Benazepril Hydrochloride', 29);
insert into Drug (company_name, brand_name, generic_name, price) values ('Antigen Laboratories, Inc.', 'Treatment Set TS349945', 'Treatment Set TS349945', 45);
 
insert into Customer (customerid, first_name, last_name, email, dob, country) values ('70-076-8563', 'Claretta', 'Abbati', 'cabbati0@sina.com.cn', '1948-06-29', 'Indonesia');
insert into Customer (customerid, first_name, last_name, email, dob, country) values ('77-498-9642', 'Ddene', 'Lempertz', 'dlempertz1@sfgate.com', '1998-11-13', 'Philippines');
insert into Customer (customerid, first_name, last_name, email, dob, country) values ('82-665-6149', 'Kris', 'Claasen', 'kclaasen2@auda.org.au', '2014-04-01', 'China');", , ,"INSERT INTO Prescription
SELECT c.customerid, d.company_name, d.brand_name
FROM Customer c CROSS JOIN Drug d
ORDER BY RANDOM()
LIMIT 1000
", , ,,,
A0111496H,/* The code is written for PostgreSQL */,"/*The code is written for PostgreSQL
BT5110 Capital Management Ltd ('BCML') is an investment advisory firm. It has specially chosen 100 publicly listed companies listed on various stock exchanges for its 100 VIP clients to buy. 
The stocks table contains the 100 stocks that it has specially chosen, including the company name, its stock exchange ticker and exhcnage on which it is traded.
The clients table contains the names of the 100 VIP clients, their client ID, contact number and email address. 
The holdings table shows the relationship between the stocks and clients table. In particular, it shows which VIP client has bought which stock.  
*/", , ,"DROP TABLE IF EXISTS holdings;
DROP TABLE IF EXISTS stocks;
DROP TABLE IF EXISTS clients;
CREATE TABLE stocks(
	company_name VARCHAR(128) NOT NULL,
	ticker VARCHAR(8) PRIMARY KEY,
	exchange VARCHAR(32) NOT NULL,
	industry VARCHAR(128) NOT NULL);
CREATE TABLE clients(
	client_name VARCHAR(64) NOT NULL,
	client_id CHARACTER(6) PRIMARY KEY,
	contact NUMERIC UNIQUE NOT NULL,
	email VARCHAR(64) UNIQUE NOT NULL);
CREATE TABLE holdings(
	client_id VARCHAR(8) REFERENCES clients(client_id),
	ticker CHAR(9) REFERENCES stocks(ticker));", , ,"insert into stocks (company_name, ticker, exchange, industry) values ('Versartis, Inc.', 'VSAR', 'NASDAQ', 'Major Pharmaceuticals');
insert into stocks (company_name, ticker, exchange, industry) values ('LifePoint Health, Inc.', 'LPNT', 'NASDAQ', 'Hospital/Nursing Management');
insert into stocks (company_name, ticker, exchange, industry) values ('Sun Hydraulics Corporation', 'SNHY', 'NASDAQ', 'Metal Fabrications');
 
insert into clients (client_name, client_id, contact, email) values ('Belicia Comberbeach', 551783, 88815904, 'bcomberbeach0@alibaba.com');
insert into clients (client_name, client_id, contact, email) values ('Yoshiko Leeder', 717778, 80113486, 'yleeder1@goo.ne.jp');
insert into clients (client_name, client_id, contact, email) values ('Clarette Bysshe', 108174, 88540013, 'cbysshe2@shutterfly.com');", , ,"INSERT INTO holdings (client_id, ticker)
SELECT c.client_id, s.ticker
FROM clients c, stocks s
ORDER BY RANDOM()
LIMIT 1000;", , ,,,
A0113028W,/* The code is written for PostgreSQL */,"/*The Zoo Goes Digital
Zoe the zookeeper wants to ensure that all animals in Kent Ridge Zoo get their food and nutrients.
So, she intend to list down what would be the food needed for each animal she takes care in the zoo.
In order to do so, she created three tables in PostgreSQL as follows:
E1 is animal, it consists of common name, scientific name, and headcount of the animals present in the zoo.
E2 is food, it consists of product name and price per kg of food available in the nearby market.
R is eat, it associates animal scientific name from E1 and the food product name from E2 for which they like to eat.
*/", , ,"CREATE TABLE IF NOT EXISTS animal (
common_name VARCHAR(64) UNIQUE NOT NULL,
scientific_name VARCHAR(64) PRIMARY KEY,
headcount INTEGER CHECK(headcount>0));
CREATE TABLE IF NOT EXISTS food (
product_name VARCHAR(64) PRIMARY KEY,
price_per_kg NUMERIC(10,2) CHECK(price_per_kg>0));
CREATE TABLE IF NOT EXISTS eat (
scientific_name VARCHAR(64),
product_name VARCHAR(64));", , ,"/* populate table animal */ insert into animal (common_name, scientific_name, headcount) values ('Rhea, greater', 'Rhea americana', 1);
insert into animal (common_name, scientific_name, headcount) values ('Kite, black', 'Milvus migrans', 18);
insert into animal (common_name, scientific_name, headcount) values ('Bushpig', 'Potamochoerus porcus', 11);
 
/* populate table food */ insert into food (product_name, price_per_kg) values ('Capon - Breast, Wing On', 31.41);
insert into food (product_name, price_per_kg) values ('Beef - Ground Lean Fresh', 41.51);
insert into food (product_name, price_per_kg) values ('Syrup - Pancake', 23.74);", , ,"INSERT INTO eat (scientific_name, product_name)
SELECT scientific_name,product_name from animal,food
ORDER BY random()
LIMIT 1000;", , ,,,
A0113951L,/* The code is written for PostgreSQL */,"/*The business case would be a OLTP application to facilitate the purchase of
materials used by a MNC with manufacturing sites all over the world, and 
buying supplies from all over the world. However, in most cases, due to 
quality control, plants are only able to buy from qualified suppliers, and
at the price agreed by the regional purchasing teams. Nevertheless, multiple 
suppliers may be qualified to deliver the same material, even to the same plant
in order to ensure supply security.
For a transaction to occur, the plant (entity 2) can only buy from a 
designated supplier for the specific material (entity 1) desired, and the price would 
be the agreed price. The date of order placement and expected date of delivery 
would be recorded in order to track delivery and ensure ontime delivery by suppliers. 
For simplicity sake, we take the following assumptions:
- plants can buy any materials from any suppliers
- all materials purchased can be used to make the desired products
- The unit quantity of all items is 1
- All transactions occur in hard currency (USD)
*/", , ,"DROP TABLE transactions;
DROP TABLE qualified_supplier;
DROP TABLE production;
create table qualified_supplier (
	supplier_name VARCHAR(64) NOT NULL,
	supplier_code VARCHAR(7) NOT NULL,
	item_name VARCHAR(64) NOT NULL,
	item_code VARCHAR(5) NOT NULL,
	destination_country VARCHAR(64) NOT NULL,
	price DECIMAL(5,2) NOT NULL, 
	PRIMARY KEY (supplier_code, item_code, destination_country, price)
);
CREATE TABLE production (
	plant_name VARCHAR(64) NOT NULL,
	plant_code VARCHAR(4) UNIQUE NOT NULL,
	plant_country VARCHAR(64) NOT NULL,
	PRIMARY KEY (plant_code, plant_country)
);
CREATE TABLE transactions(
	supplier_name VARCHAR(64) NOT NULL,
	supplier_code VARCHAR(7) NOT NULL,
	item_name VARCHAR(64) NOT NULL,
	item_code VARCHAR(5) NOT NULL,
	plant_name VARCHAR(64) NOT NULL,
	plant_code VARCHAR(4) NOT NULL,
	plant_country VARCHAR(64) NOT NULL,
	price DECIMAL(5,2) NOT NULL,
	po_date DATE NOT NULL, 
	FOREIGN KEY (supplier_code, item_code, plant_country, price ) REFERENCES qualified_supplier (supplier_code, item_code, destination_country, price), 
	FOREIGN KEY (plant_code, plant_country) REFERENCES production (plant_code, plant_country)
);", , ,"insert into qualified_supplier (supplier_name, supplier_code, item_name, item_code, destination_country, price) values ('Bailey, Schumm and Schmitt', 5489675, 'Rabbit - Frozen', 1592, 'South Africa', 64.89);
insert into qualified_supplier (supplier_name, supplier_code, item_name, item_code, destination_country, price) values ('Beer LLC', 7107868, 'Broom And Broom Rack White', 6947, 'Canada', 38.02);
insert into qualified_supplier (supplier_name, supplier_code, item_name, item_code, destination_country, price) values ('Berge, Herman and Gutkowski', 9698275, 'Sobe - Orange Carrot', 522, 'Greece', 96.49);
 
insert into production (plant_name, plant_code, plant_country) values ('Miller', 'U942', 'China');
insert into production (plant_name, plant_code, plant_country) values ('Scofield', 'K418', 'Poland');
insert into production (plant_name, plant_code, plant_country) values ('Caliangt', 'J462', 'Canada');", , ,"INSERT INTO transactions
SELECT
	supplier_name,supplier_code,item_name,item_code,
	plant_name,plant_code,plant_country,price, po_date
FROM
	qualified_supplier
LEFT JOIN production ON destination_country = plant_country
CROSS JOIN generate_series('1/1/2020'::date, '1/1/2021'::date, '1 day') AS po_date
WHERE plant_country IS NOT NULL
ORDER BY random() limit 1000;", , ,,,
A0119430N,/* The code is written for PostgreSQL */,"/*The answer keeps the maintenance record of the equipment owned by a company.
The table 'workers' contains the information of the workers who carry out maintenance.
Its attributes contain the first name, last name, employee number and nationality of the employee.
The employee number is unique for each employee and set to the primary key.
The table 'equipment' contains the information of the equipment.
Its atrributes contain the serial number, supplier company name and purchase date of the equipment.
The serial number of a particular piece of equipment is unique and set to the primary key.
The relationship 'maintains' keeps the record of the service done by a worker on a piece of equipment.
It has foreign keys with reference to the worker employee number and the equipment serial number.
The combination of the employee number and serial number is assumed to be unique and set to the primary key.
The code is written for PostgreSQL.
*/", , ,"CREATE TABLE workers(
	first_name VARCHAR(64) NOT NULL,
	last_name VARCHAR(64) NOT NULL,
	employee_number VARCHAR(16) PRIMARY KEY,
	nationality VARCHAR(16) NOT NULL);
CREATE TABLE equipment(
	serial_number VARCHAR(16) PRIMARY KEY,
	supplier VARCHAR(64) NOT NULL,
	purchase_date DATE NOT NULL );
CREATE TABLE maintains(
	employee_number VARCHAR(16) REFERENCES workers(employee_number),
	serial_number VARCHAR(16) REFERENCES equipment(serial_number),
	PRIMARY KEY (employee_number, serial_number));", , ,"/* Populating table 'workers' */ insert into workers (first_name, last_name, employee_number, nationality) values ('Cos', 'Leinster', '877396', 'Thailand');
insert into workers (first_name, last_name, employee_number, nationality) values ('Geneva', 'Spreadbury', '739210', 'Thailand');
insert into workers (first_name, last_name, employee_number, nationality) values ('Talya', 'Dyble', '447204', 'Thailand');
 
/* Populating table 'equipment' */ insert into equipment (serial_number, supplier, purchase_date) values ('dcc-0037', 'Klocko-Funk', '2019-07-24');
insert into equipment (serial_number, supplier, purchase_date) values ('ljg-5991', 'Hartmann Group', '2016-12-26');
insert into equipment (serial_number, supplier, purchase_date) values ('pfe-7158', 'Maggio and Sons', '2019-09-03');", , ,"INSERT INTO maintains
SELECT w.employee_number, e.serial_number
FROM workers w, equipment e
ORDER BY RANDOM()
LIMIT 1000;", , ,,,
A0119542H,/* The code is written for PostgreSQL,"/*Table city_country contains a list of cities and which country each city belongs to
Table movie contains a list of movie titles, the genre of the movies, and the language the movies are in.
Table movie_city contains a list of movie titles and relates to the cities they were made in
*/", , ,"*/
drop table if exists movie_city;
drop table if exists movie;
drop table if exists city_country;
create table city_country (
	city VARCHAR(50) PRIMARY KEY,
	country VARCHAR(50)
);
create table movie (
	movie_title VARCHAR(100) PRIMARY KEY,
	genre VARCHAR(50),
	lang VARCHAR(50)
);
create table movie_city (
	movie_title VARCHAR(100) references movie (movie_title)
		on update cascade on delete cascade
		deferrable initially deferred,
	city VARCHAR(50) references city_country (city)
		on update cascade on delete cascade
		deferrable initially deferred,
	primary key (movie_title, city)
);", , ,"insert into city_country (city, country) values ('Xiamazhuang', 'China');
insert into city_country (city, country) values ('Ni’ao', 'China');
insert into city_country (city, country) values ('Sarvaš', 'Croatia');
 
insert into movie (movie_title, genre, lang) values ('Battle of China, The (Why We Fight, 6)', 'Documentary|War', 'Zulu');
insert into movie (movie_title, genre, lang) values ('Ghost Rider: Spirit of Vengeance', 'Action|Fantasy|Thriller', 'Maltese');
insert into movie (movie_title, genre, lang) values ('...tick... tick... tick...', 'Action|Drama', 'Croatian');", , ,"insert into movie_city(movie_title, city)
select movie.movie_title, city_country.city
from movie, city_country
ORDER BY RANDOM()
limit 1000;
SELECT *
FROM movie_city
Order by movie_title, city;", , ,,,
A0124216U,/* The code is written for PostgreSQL */,"/*The code is written for PostgreSQL version 13.
The example in this is about offenders who are in or had been in prison, 
and the offences they committed that resulted in prison time.
The first table, PrisonersTable, contains the information of prison inmates such as their identication 
number (IC), first name (IC), last name (IC), their start (Start_Date) and expected release 
date (Expected_Release_Date) in prison, the prison the prisoner is in (Prison), the street the prison is 
on (Prison_Address), and the case id (case_id). The case id is the foreign key identifer that will link to a 
separate table contain the list of offence related to the case ID. The primary key for this table is case_id, 
as each unique case id pertains to a prisoner and why that prisoner is in prison. There may be multiple entries 
of the same IC, since they might be repeated offenders. In addition, the expected release date and start date 
is checked to ensure that start date is always before expected end date.
The second table, OffenceTable, contains the different types of offences (Offence_Type), 
the unique id of offence (Offence_Id), the specific offence act (Offence_Act), the jail term (Jail_Term) 
and fine amount (Fine_Amount) from commiting the offence. The primary key is the Offence_Type and Offence_Act,
and the Offence_Id is unique, since it is generated from the Offence_Type and Offence_Act.
The third table, CaseTable, contains the case id (Case_ID) and the offences (Offence_Type, Offence_Act)
committed in the case.  There are no primary and unique key as each case may have multiple offences committed. 
If the case is deleted or updated in PrisonersTable, then there is no reason for the cases inside the table
to stay, since these could mean that the records of the prisoner being in prison is expunge, hence so will
the case and offences recorded in CaseTable
*/", , ,"/*PrisonersTable*/
create table PrisonersTable (
	IC VARCHAR(99) NOT NULL,
	First_Name VARCHAR(99) NOT NULL,
	Last_Name VARCHAR(99) NOT NULL,
	Start_Date DATE NOT NULL,
	Expected_Release_Date DATE NOT NULL,
	Prison VARCHAR(99) NOT NULL,
	Prison_Address VARCHAR(99) NOT NULL,
	Case_Id VARCHAR(99) PRIMARY KEY NOT NULL,
	CHECK(Expected_Release_Date >= Start_Date)
);
/*OffenceTable*/
CREATE TABLE IF NOT EXISTS OffenceTable(
	Offence_Id   VARCHAR(99) UNIQUE NOT NULL,
  	Offence_Type VARCHAR(130) NOT NULL,
  	Offence_Act  VARCHAR(99) NOT NULL,
  	Jail_Term    INTEGER  NOT NULL,
  	Fine_Amount  DECIMAL NOT NULL,
  	PRIMARY KEY (Offence_Type,Offence_Act)
);
/*CaseTable*/
CREATE TABLE IF NOT EXISTS CaseTable(
	Case_Id VARCHAR(99) NOT NULL references PrisonersTable(Case_Id)
		on update cascade
		on delete cascade,
  	Offence_Type VARCHAR(130) NOT NULL,
  	Offence_Act  VARCHAR(99) NOT NULL
);", , ,"/*PrisonersTable*/ insert into PrisonersTable (IC, First_Name, Last_Name, Start_Date, Expected_Release_Date, Prison, Prison_Address, Case_Id) values ('227601800-3', 'Edita', 'Acklands', '2021-04-02', '2023-03-03', 'Maryland Prison', '599 Golf View Drive', '729-26-2847');
insert into PrisonersTable (IC, First_Name, Last_Name, Start_Date, Expected_Release_Date, Prison, Prison_Address, Case_Id) values ('383903305-5', 'Isidoro', 'Ballham', '2021-07-15', '2022-10-10', 'Tennessee Prison', '49182 Eastlawn Pass', '785-80-5084');
insert into PrisonersTable (IC, First_Name, Last_Name, Start_Date, Expected_Release_Date, Prison, Prison_Address, Case_Id) values ('310738504-2', 'Gris', 'Huncoot', '2021-06-14', '2022-02-07', 'Michigan Prison', '53298 Thompson Parkway', '370-04-8744');
 
/*OffenceTable*/ INSERT INTO OffenceTable(Offence_Id,Offence_Type,Offence_Act,Jail_Term,Fine_Amount) VALUES ('d49ccf0e-b32c-4b18-87cb-c34070123d35','Murder','Common Law',42,54940.11);
INSERT INTO OffenceTable(Offence_Id,Offence_Type,Offence_Act,Jail_Term,Fine_Amount) VALUES ('1abc3e76-e511-4009-a76a-d19c37c3c087','Manslaughter','Common Law',15,47712.68);
INSERT INTO OffenceTable(Offence_Id,Offence_Type,Offence_Act,Jail_Term,Fine_Amount) VALUES ('e0002018-d16e-41e3-9615-826466a3013f','Infanticide','Common Law',4,71774.63);", , ,"insert into casetable
select case_id,offence_type,offence_act
from offencetable, prisonerstable
order by random()
limit 1000;", , ,,,
A0124294H,/* The code is written for PostgreSQL */,"/*The code is written for PostgreSQL.
I have chosen an example of a car rental company, based in Perth, which has a fleet of 100 car.
Customers who come to shop are required to sign up for the free membership before they are allowed to rent a car.
(Entity 1) Cars: 
This table will contain information of all the cars under the company.
The columns include (1) Car_Make (2) Car_Model (3) Car_VIN (4) Date_Purchase (5)Car_Photo
I have made Car_VIN as the primary Key
(Entity 2) Membership:
This table will store all the membership details of the company
The columns include (1) Name (2) Email (3) Telephone (4) Join_Date (5) Driving_License 
The Primary Key in this case would be the Driving_License, I will also make the Telephone number unique to prevent fraud
(R) Rental:
This table shall record the cars that members have rented out and the date of rental
The columns include (1) Driving_License (2) Car_VIN (3) Rental_Date
Referenced columns are primary key of the respective referenced tables. 
*/", , ,"CREATE TABLE IF NOT EXISTS Membership (
Name VARCHAR(64) NOT NULL,
Email VARCHAR(256) NOT NULL UNIQUE,
Telephone VARCHAR(64) UNIQUE NOT NULL,
Join_Date DATE NOT NULL,
Driving_License VARCHAR(16) PRIMARY KEY
);

CREATE TABLE IF NOT EXISTS Cars (
Car_Make VARCHAR(32) NOT NULL,
Car_Model VARCHAR(64) NOT NULL,
Car_VIN VARCHAR(64) NOT NULL PRIMARY KEY,
Date_Purchase DATE NOT NULL,
Car_Photo VARCHAR NOT NULL
);

CREATE TABLE IF NOT EXISTS Rental (
Driving_License VARCHAR(16) REFERENCES Membership(Driving_License)
ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,	
Car_VIN VARCHAR(64) REFERENCES Cars(Car_VIN)
ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
Rental_Date DATE NOT NULL,
PRIMARY KEY (Driving_License,Car_VIN));", , ,"insert into Cars (Car_Make, Car_Model, Car_VIN, Date_Purchase, Car_Photo) values ('Honda', 'Odyssey', 'WUARL48H49K921657', '20/11/2020', 'data:image/png;
base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAAK/INwWK6QAAABl0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJZSURBVDjLhZJLSFRxFMZ/995xXpYzaRn0AsloEUlQLSwqS5ShhGjTwtpZ0Toogly0iB4uWrWIVkLgvsVEi4wKsUULIwQxLGyU8TE6vmbm3v+9/0cLnXA06ducA+c7P74DxzLGUKHB3sPALZQ6h5HHkBKM/Ib2PyH8V3Q8GF1vtyoAg713UOoRsWSMSBQsB4wCtwD+EsxlXEzQzZVnzysBg71hjHlDtDpFVQSWcuAug6XAF6B9cCIQr4FCHhYm3iHEZW689m0AlOohVp0CIDeu8BZa8d04bXctLnVbiGKchalWJocVSkF4ewpRfLKa4OPLo6CHiO90WJ5QlLyDWHIe6d/HBBfWEnxAeE9Rfh2B+El9o0NmSKGDphDK7yKadCjOgldqRwuJkd+JJRso5MGxIVTTTDHfiRBnUH47s2P91O13mB7pslHe6t2FOQjcLwSl24RriuR+9bE000I+28L0jz7iu4rI0nWUO8jitCS6DdxSKoRwG8BAUAJfiJE9bTlL6/HF2vMdWutOpRRaa8JefkbUttW3DD0WBH4BnCTa3xtCuiAFuEVQXqhQtePqseMnT7NZu/v73zfheTaOsbA0WMYJUVzJMDXaiFdwkZ4h8E4A9LydrNi+d3EftrdyCktaGLPM768JIBPi2otD641iYCBS7s8eqQdgfN4HwLUicR4OS+BA2RPamFMp9bcfm/UqZlLKTXdtApRNN5urgVVY+d3Xw8uyt0pg2zbZbJZsNott21sC/pVgEUgmEgkSicRG+OJ/AUqpdDqdblNK1Zd/YK0WtNafN/r/AJRSSvzM+v9SAAAAAElFTkSuQmCC');
insert into Cars (Car_Make, Car_Model, Car_VIN, Date_Purchase, Car_Photo) values ('Chevrolet', '1500', '5N1AR2MM7DC892377', '08/09/2020', 'data:image/png;
 
insert into Cars (Car_Make, Car_Model, Car_VIN, Date_Purchase, Car_Photo) values ('GMC', 'Yukon XL 1500', 'WAUEF98E28A447859', '05/08/2021', 'data:image/png;
base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAAK/INwWK6QAAABl0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAHwSURBVDjLpZM9a1RBFIafM/fevfcmC7uQjWEjUZKAYBHEVEb/gIWFjVVSWEj6gI0/wt8gprPQykIsTP5BQLAIhBVBzRf52Gw22bk7c8YiZslugggZppuZ55z3nfdICIHrrBhg+ePaa1WZPyk0s+6KWwM1khiyhDcvns4uxQAaZOHJo4nRLMtEJPpnxY6Cd10+fNl4DpwBTqymaZrJ8uoBHfZoyTqTYzvkSRMXlP2jnG8bFYbCXWJGePlsEq8iPQmFA2MijEBhtpis7ZCWftC0LZx3xGnK1ESd741hqqUaqgMeAChgjGDDLqXkgMPTJtZ3KJzDhTZpmtK2OSO5IRB6xvQDRAhOsb5Lx1lOu5ZCHV4B6RLUExvh4s+ZntHhDJAxSqs9TCDBqsc6j0iJdqtMuTROFBkIcllCCGcSytFNfm1tU8k2GRo2pOI43h9ie6tOvTJFbORyDsJFQHKD8fw+P9dWqJZ/I96TdEa5Nb1AOavjVfti0dfB+t4iXhWvyh27y9zEbRRobG7z6fgVeqSoKvB5oIMQEODx7FLvIJo55KS9R7b5ldrDReajpC+Z5z7GAHJFXn1exedVbG36ijwOmJgl0kS7lXtjD0DkLyqc70uPnSuIIwk9QCmWd+9XGnOFDzP/M5xxBInhLYBcd5z/AAZv2pOvFcS/AAAAAElFTkSuQmCC');
insert into Cars (Car_Make, Car_Model, Car_VIN, Date_Purchase, Car_Photo) values ('Mazda', 'Tribute', '2G4GT5GC8B9418796', '25/11/2020', 'data:image/png;", , ,"insert into Rental (Driving_License,Car_VIN,Rental_Date)	
select * from (Select mem.Driving_License, car.Car_VIN, date (timestamp '2009-01-01' + 
        random() * (timestamp '2020-08-25' - timestamp '2009-01-01')) from cars car, Membership mem) as tab order by random() limit 1000;", , ,,,
A0125002E,/* The code is written for PostgreSQL */,"/*In a fictional country Sinyanpur, education is compulsory starting at primary school level. 
There is often competition for the limited placesso balloting may be needed depending on the number of applications to the school. 
For the future intake in year 2023, to have an idea of the popularity of the schools, an initial round of 
application is made containing information about the incoming students, the schools, & the applications to them.
The database records the information about the incoming student. It contains the students' first name, last name, one parent's name,parent's email,
gender, date of birth to ensure that the student is not too young or too old (for 2023 to be aged between 6 - 7 years), postal code & the student's ID, whereby student ID is used to identify the student.
The database records information on the school too containing the school name which is used as the identification method, & the postal code of the school.
The database has the applications information which shows the student ID and the school names, in essence the schools applied to 
by each student. 
*/", , ,"CREATE TABLE potential_student(
  first_name VARCHAR(64) NOT NULL, 
  last_name VARCHAR(64) NOT NULL, 
  parent_name VARCHAR(64) NOT NULL, 
  parent_email VARCHAR(64) UNIQUE NOT NULL, 
  gender VARCHAR(9) NOT NULL, 
  date_of_birth DATE NOT NULL CHECK (
    (date_of_birth >= '2016-01-02') 
    AND(date_of_birth <= ' 2017-01-01')
  ), 
  postal_code INT NOT NULL, 
  student_ID VARCHAR(9) PRIMARY KEY
);
CREATE TABLE primary_school(
  school_name VARCHAR(64) PRIMARY KEY, 
  School_postal_code INT NOT NULL
);
CREATE TABLE application(
  student_ID VARCHAR(9) REFERENCES potential_student(student_ID) 
	ON UPDATE CASCADE ON DELETE CASCADE 
	DEFERRABLE INITIALLY DEFERRED, 
    school_name VARCHAR(64) REFERENCES primary_school(school_name) 
	ON UPDATE CASCADE ON DELETE CASCADE 
	DEFERRABLE INITIALLY DEFERRED
);", , ,"insert into potential_student (first_name, last_name, parent_name, parent_email, gender, date_of_birth, postal_code, student_ID) values ('Kassia', 'Toping', 'Averil', 'atoping0@about.me', 'Male', '2016-03-13', '863783', 'S7709552I');
insert into potential_student (first_name, last_name, parent_name, parent_email, gender, date_of_birth, postal_code, student_ID) values ('Tabby', 'Kretschmer', 'Henrieta', 'hkretschmer1@cpanel.net', 'Female', '2016-09-30', '058312', 'S8625620G');
insert into potential_student (first_name, last_name, parent_name, parent_email, gender, date_of_birth, postal_code, student_ID) values ('Ruby', 'Stonnell', 'Crichton', 'cstonnell2@feedburner.com', 'Male', '2016-10-12', '909458', 'S2007452Y');
 
insert into primary_school (school_name, school_postal_code) values ('gigs primary school', '847309');
insert into primary_school (school_name, school_postal_code) values ('envoy primary school', '902393');
insert into primary_school (school_name, school_postal_code) values ('shutdown primary school', '522440');", , ,"INSERT INTO application(student_ID, school_name) 
SELECT 
  student_ID, 
  school_name 
FROM 
  potential_student, 
  primary_school 
ORDER BY 
  random() 
LIMIT 
  1000;", , ,,,
A0142279B,/* The code is written for PostgreSQL */,"/*The code for the following questions is written for PostgreSQL.
The chosen example record investors' stock trading history.
1. Entity Table E1 is ""Investor"" table: it contains investor basic information, which includes following 3 attributes
	1.1 Attribute ""investor_id"" is the unique identifier of investor, being the primary key of the table
	1.2 Attribute ""first_name"" and ""last_name"" describe the full name of investors
	1.3 Attribute ""email"" provides investor contact details, which is unique per investor
2. Entity Table E2 is ""Stock"" table: it contains information of stock offered for trading, which includes following 3 attributes
	2.1 Attribute ""stock_ticket"" is the unique identifier of stock, being the primary key of the table
	2.2 Attribute ""company_name"" is the company name of the stock listed
	2.3 Attribute ""exchange"" is the exchange that the stock is listed on
3. Relationship Table R is ""Transaction"" table: it contains stock transacted by investor, which includes following 5 attributes
	3.1 Attribute ""transaction_number"" is the unique series number of transaction that happened in the past, being the primary key of the table
	3.2 Attribute ""investor_id"" indicates the investor who traded stock. This is a foreign key with reference to the Investor table.
	3.3 Attribute ""stock_ticket"" indicates the stock the investor traded. This is a foreign key with reference to the Stock table.
	3.4 Attribute ""transact_date"" indicates the date when the stock is traded
	3.5 Attribute ""transact_quantity"" indicates the unit of stock the investor traded.
		The quantity can be positive or negaitve, but cannot be zero.
		If the quantity is positive, the investor purchases / longs the stock; if the quantity is negative, investor sells / short the stock.
		**Stock price is not included as an attribute because it can be easily retrieved based on the transact_date (providing detailed datetime). 
		**There could be another table that store pricing information which include the stock price of a pariticular time, the corresponding platform fee, commission charge etc.
All attributes in all tables are NOT NULL.
*/", , ,"-- DROP TABLE IF EXISTS INVESTOR, STOCK, TRANSACTION;
create table INVESTOR (
	investor_id CHAR(10) PRIMARY KEY,
	first_name VARCHAR(32) NOT NULL,
	last_name VARCHAR(32) NOT NULL,
	email VARCHAR(82) UNIQUE NOT NULL
);
create table STOCK (
	stock_ticket VARCHAR(10) PRIMARY KEY,
	company_name VARCHAR(100) NOT NULL,
	exchange VARCHAR(50) NOT NULL
);
create table TRANSACTION(
	transaction_number SERIAL PRIMARY KEY,
	investor_id CHAR(10) NOT NULL,
	stock_ticket VARCHAR(10) NOT NULL,
 	transact_date timestamp NOT NULL,
 	transact_quantity int NOT NULL CHECK (transact_quantity <> 0),
	FOREIGN KEY (investor_id) REFERENCES investor(investor_id) 
		ON UPDATE CASCADE
		ON DELETE CASCADE,
	FOREIGN KEY (stock_ticket) REFERENCES stock(stock_ticket)
		ON UPDATE CASCADE
		ON DELETE CASCADE
	);", , ,"insert into INVESTOR (investor_id, first_name, last_name, email) values ('85-4760179', 'Ranna', 'Carbry', 'rcarbry0@digg.com');
insert into INVESTOR (investor_id, first_name, last_name, email) values ('21-1397527', 'Cookie', 'Davson', 'cdavson1@accuweather.com');
insert into INVESTOR (investor_id, first_name, last_name, email) values ('51-0569976', 'Mae', 'Brownhill', 'mbrownhill2@symantec.com');
 
insert into stock (stock_ticket, company_name, exchange) values ('PSCT', 'PowerShares S&P SmallCap Information Technology Portfolio', 'NASDAQ');
insert into stock (stock_ticket, company_name, exchange) values ('SABR', 'Sabre Corporation', 'NASDAQ');
insert into stock (stock_ticket, company_name, exchange) values ('HUBS', 'HubSpot, Inc.', 'NYSE');", , ,"SELECT setseed(0.6);
WITH possible_transaction AS (
	SELECT investor_id, stock_ticket FROM investor, stock
	ORDER BY RANDOM()
	LIMIT 1000
)
INSERT INTO transaction (investor_id, stock_ticket, transact_date, transact_quantity)
SELECT investor_id, stock_ticket,
timestamp '2020-01-01 20:00:00' + RANDOM() * (timestamp '2021-08-15 20:00:00' - timestamp '2020-01-01 20:00:00'),
RANDOM()*2000-1000
FROM possible_transaction
;", , ,,,
A0150032A,/* The code is written for PostgreSQL */,"/*The  chosen example simulates the database used to monitor the Illegal Wildlife Trade.
It is contains information regarding:
(i) status of Wildlife - the conservation status of the animal
(ii) trafficking suspects - the details of suspected traffickers
(iii) trafficking transactions - the illegal transactions that have been traced
It contains 3 tables: 
(i) Species Watchlist 
- this describes the list of animal species under surveillance for Wildlife Trade
Attribute 1: [Conservation Status] Conservation Status of an animal e.g. ""Vulnerable"", ""Endangered""Attribute 2: [Common Name] Common name of the animal e.g. ""Indian Leopard"", ""American badger""Attribute 3: [Scientific Name] Scientific name of the animal e.g. ""Aquila chrysaetos"", ""Taxidea taxus""Attribute 4: [Image] URL containing images of a given animal e.g. ""http://dummyimage.com/231x114.png/5fa2dd/ffffff""(ii) Suspect Watchlist
- this describes the watchlist of suspects involved in the Illegal Wildlife Trafficking
Attribute 1: [Track_Id] Unique Tracking Id to tag each suspect e.g. ""03-1350731""Attribute 2: [First Name] The first name of the suspect e.g. ""Océane""Attribute 3: [Last Name] The last name of the suspect e.g. ""Fardell""Attribute 4: [Gender] The gender of the suspect e.g. ""M"", ""F""Attribute 5: [Country of Residence] The country of residence of the suspect e.g. ""CN"", ""ID"", ""FR""Attribute 6: [Traced Account] The banking account of the suspect associated with the illegal transaction e.g. ""DK90 3505 5586 3656 13""Attribute 7: [Investigation Status] The investigation status on the suspect e.g. ""Open"", ""In-Progress"", ""Closed""(iii) Trafficking Transactions
- this describes the transaction undertaken by a suspect
Attribute 1: [Transaction_Id] Unique Transaction Id to tag each transaction e.g. ""1473""Attribute 2: [Trafficked_Species] Common name of the animal trafficked e.g. ""Indian Leopard"", ""American badger""Attribute 3: [Seller_Account] The banking account of the suspect associated with the illegal transaction e.g. ""DK90 3505 5586 3656 13""Attribute 4: [Currency] The currency of the transaction e.g. ""AUD"", ""USD""Attribute 5: [Transaction_Date] The date of the transaction e.g. 2021-08-20
Measure 1: [Transaction_Value] Monetary Value of the transaction e.g. 34, 100
An animal or A suspect may be involved in multiple transactions.
*/", , ,"create table Species_Watchlist (
	Conservation_Status VARCHAR(21) NOT NULL,
	Common_Name VARCHAR(50) PRIMARY KEY,
	Scientific_Name VARCHAR(50) NOT NULL,
	Image VARCHAR(50) NOT NULL
);
create table Suspect_Watchlist (
	Track_Id VARCHAR(50) PRIMARY KEY,
	First_Name VARCHAR(50),
	Last_Name VARCHAR(50),
	Gender VARCHAR(50),
	Residence_Country VARCHAR(50),
	Traced_Account VARCHAR(50) UNIQUE NOT NULL,
	Investigation_Status VARCHAR(11) NOT NULL
);
create table Trafficking_Transaction (
	Transaction_Id VARCHAR(50) PRIMARY KEY,
	Trafficked_Species VARCHAR(50) NOT NULL,
	Seller_Account VARCHAR(50) NOT NULL,
	Currency VARCHAR(50) NOT NULL,
	Transaction_Value INT CHECK (Transaction_Value >= 0),
	Transaction_Date DATE CHECK (Transaction_Date > '1999-12-31'),
	FOREIGN KEY (Trafficked_Species) REFERENCES species_watchlist(Common_Name),
	FOREIGN KEY (Seller_Account) REFERENCES suspect_watchlist(Traced_Account)
);", , ,"/* Insert into Species Watchlist Table */ insert into Species_Watchlist (Conservation_Status, Common_Name, Scientific_Name, Image) values ('Vulnerable', 'Laughing kookaburra', 'Dacelo novaeguineae', 'http://dummyimage.com/245x236.png/5fa2dd/ffffff');
insert into Species_Watchlist (Conservation_Status, Common_Name, Scientific_Name, Image) values ('Endangered', 'Indian leopard', 'Panthera pardus', 'http://dummyimage.com/142x143.png/cc0000/ffffff');
insert into Species_Watchlist (Conservation_Status, Common_Name, Scientific_Name, Image) values ('Endangered', 'Adouri (unidentified)', 'unavailable', 'http://dummyimage.com/220x212.png/ff4444/ffffff');
 
/* Insert into Suspect Watchlist Table */ insert into Suspect_Watchlist (Track_Id, First_Name, Last_Name, Gender, Residence_Country, Traced_Account, Investigation_Status) values ('83-5942032', 'Örjan', 'Verbeke', 'F', 'CD', 'FR98 0190 2326 58SU RCSR QYML 945', 'Closed');
insert into Suspect_Watchlist (Track_Id, First_Name, Last_Name, Gender, Residence_Country, Traced_Account, Investigation_Status) values ('11-1658937', 'Thérèsa', 'Bonaire', 'M', 'ID', 'HU32 4949 2753 0467 4825 3001 5695', 'In-Progress');
insert into Suspect_Watchlist (Track_Id, First_Name, Last_Name, Gender, Residence_Country, Traced_Account, Investigation_Status) values ('40-1191371', 'Laurène', 'Bruntjen', 'F', 'CN', 'HU02 1200 8659 7253 1544 6268 3246', 'Open');", , ,"INSERT INTO Trafficking_Transaction
SELECT
ROW_NUMBER() OVER (ORDER BY 1) as Transaction_Id,
common_name as Trafficked_Species, 
Traced_Account as Seller_Account,
(array['AUD', 'GBP', 'JPY', 'USD', 'CHF'])[floor(random()*4)+1] as Currency,
floor(random()*10000)+10 as Transaction_Value,
NOW() - (random() * (interval '120 days')) as Transaction_Date
FROM species_watchlist
CROSS JOIN suspect_watchlist
WHERE RANDOM() < 0.15
ORDER BY RANDOM()
LIMIT 1000;", , ,,,
A0150639A,/* The code is written for PostgreSQL */,"/*In this project, will take online book store case as an example of application.
There are two main tables customers and books to store the customers' and books' info respectively.
We can create the first entity set E1 as table 'customers', which store the details of customer 
as data dictionary shown below: 
-- customer_id  (varchar)   :customer's identification no, like SG NRIC/FIN No in IC which is unique and not null, can set as primary key.             
-- customer_name (varchar)  :customer's detail name
-- gender (varchar)         :customer's gender, strictly limited to male or female
-- dob (varchar)            :customer's date of bith
-- email (varchar)          :customer's email contact
-- nationality (varchar)    :customer's nationality  			       
Following we can created second entity set E2 as table 'books', which store the info of books, 
and data dictionary shown below:	
-- book_id (varchar)        :Book's ISBN no issued by publisher,which is unique and not null,set as composite primary key with book name.
-- book_name (varchar)      :Detail name of this book and unique matching the ISBN No. Set as composite primary key with book id.
-- author (varchar)         :Author (person's name) of this book.              
-- publisher (varchar)      :Publisher (company name) of this book.             
-- price (int)	            :Retail price for this book.  
As mentioned this is a online book store, when the customers place the order for their desired books and
make the payment, we can say that the new relationship has been built. Hence we can create the new
many-to-many relationsip set (R) as table 'orders'. Each row of this table will record the details of
order that which customer placed the order for which book with respective price. Thus this table could be only be populated
after the table 'customers' and 'books' being populated because of the referential integrity constraints (FOREIGN KEY).
The data dictionary for `orders` as shown below:
-- customer_id (varchar)     :Customer's id no which is referenced from main table `customers`(E1) and set as one of composite primary key.	  	
-- book_id (varchar)         :Book's id no which is referenced from main table `books`(E2) and set as one of composite primary key.	  
-- book_name (varchar)       :Book's name no which is referenced from main table `books`(E2) and set as one of composite primary key.
-- payment (int)	         :The amount payable for this order, which is the retail price of this book.
Once we have completed the design of this entity relationship, 
we may proceed to design the query in following quesitons by PostgreSQL.*/", , ,"drop table if exists orders;
drop table if exists customers;
drop table if exists books;
-- create table customers
create table if not exists customers (
		customer_id VARCHAR(16) primary key,
		customer_name VARCHAR(32) not null,
		gender VARCHAR(8) constraint gender check(gender = 'Male' or gender='Female'),
		dob VARCHAR(16),
		email VARCHAR(64),
		nationality VARCHAR(32)
);
-- create table books
create table if not exists books (
		book_id VARCHAR(16),
		book_name VARCHAR(128),
		author VARCHAR(128) not null,
		publisher VARCHAR(128) not null,
		price INT not null,
		primary key (book_id,book_name)
);
-- create table orders
create table if not exists orders (
		customer_id varchar(16) references customers (customer_id) on update cascade on delete cascade deferrable initially deferred,
	    book_id varchar(16),
		book_name varchar(128),
		payment int,
		foreign key (book_id,book_name) references books (book_id,book_name),
		primary key (customer_id,book_id,book_name)
);", , ,"insert into customers (customer_id, customer_name, gender, dob, email, nationality) values ('U7765481Z', 'Shara Zorener', 'Female', '04/08/1980', 'szorener0@wikimedia.org', 'China');
insert into customers (customer_id, customer_name, gender, dob, email, nationality) values ('G6758793X', 'Dimitri Barrott', 'Male', '13/10/1979', 'dbarrott1@timesonline.co.uk', 'Brazil');
insert into customers (customer_id, customer_name, gender, dob, email, nationality) values ('Z3476892J', 'Lyell Eliasen', 'Male', '31/03/2003', 'leliasen2@163.com', 'United States');
insert into books (book_id, book_name, author, publisher, price) values ('750134567-8', 'Cop Out', 'Gordon', 'Cremin Group', 51);
insert into books (book_id, book_name, author, publisher, price) values ('130883510-8', 'Jackass Number Two', 'Donella', 'Marvin Inc', 44);
insert into books (book_id, book_name, author, publisher, price) values ('343669718-4', 'No End in Sight', 'Eddie', 'Ratke and Sons', 45);", , ,"-- Populate the date for table orders (R) by using one single insert query with random()
insert into orders
select 
		c.customer_id,
		b.book_id,
		b.book_name,
		b.price as payment
from customers c cross join books b
order by random() <= 0.1
limit 1000;
-- Check the total number of result generated.
select count(*) from orders ;
-- Check the generated realtion table orders by random sampling.
select * 
from orders
order by random()
limit 10;", , ,,,
A0154734A,/* The code is written for PostgreSQL */,"/* The first table is called grocery_membership. 
It is a table that contains some information about a person that signed up as a member of the grocery shop.
Within the table, it contains information such as a members's name, email, age, birth country, gender, job title and shirt size. 
The purpose of having these information is for analytics purposes where it provides insights on certain interesting relationships. 
For example, is there a correlation between gender and the type of food they usually buy ? 
or is there a stronger correlation between the type of food they buy depending on their job title, etc
For this table, the primary key is the membership ID and a combination of first, last name and email should be unique in hope to ensure that a person can only have 1 membership
The second table is called grocery_shop.
It is a table that contains specific information on the available products within the shop. 
For example, it has the name of the product, where the product was imported from, what color is the packaging and when the product will be expired.
The primary key is set as the item ID because each item should have a unique code to identify what a customer/member had bought. 
The last table / relationship table is called historical_unique_buys.
This table captures the specific unique items being bought by each member.
The membership ID is a foreign key as it is being referenced to the membership table while item ID is a foreign key that references the shop table.
This means that registered members cannot delete their membership and their historical purchases can always been retrieved.
In addition, items that had been imported and sold within the shop can always be retrieved from historical information. 
Lastly, the primary key is a combination of both IDs. This is because we want to know the unique items that each member had bought before. 
Overall, the information within the relationship table is useful as it can help to provide insights on certain relationships.
For example, is there a trend that a member who works as an engineer has a higher chance of buying a product from China instead of Indonesia ?
Alternatively, is there a trend that a member who wears a shirt size of L has a higher preference to buy more meat products instead of vegetables ?
In sum, these analysis are interesting and meaningful for the grocery store as they can focus on marketing strategies and 
type of products they want to import to optimize their profits.
*/", , ,"CREATE TABLE IF NOT EXISTS grocery_membership (
	id INT,
	membership_id VARCHAR(50) UNIQUE PRIMARY KEY,
	first_name VARCHAR(50) NOT NULL,
	last_name VARCHAR(50) NOT NULL,
	email VARCHAR(50) UNIQUE NOT NULL,
	age_at_registration INT NOT NULL,
	birth_country VARCHAR(50) NOT NULL,
	gender VARCHAR(50) NOT NULL,
	job_title VARCHAR(50) NOT NULL,
	shirt_size VARCHAR(50) NOT NULL,
    UNIQUE (first_name, last_name, email)
);
CREATE TABLE IF NOT EXISTS grocery_shop (
	id INT NOT NULL,
	items VARCHAR(50) NOT NULL,
	shipment_origin VARCHAR(50) NOT NULL,
    item_id VARCHAR(100) UNIQUE PRIMARY KEY,
	packaging_color VARCHAR(50) NOT NULL,
	expiry_date DATE
);
CREATE TABLE IF NOT EXISTS historical_unique_buys (
	grocery_membership_membership_id VARCHAR(100) NOT NULL,
    grocery_shop_item_id VARCHAR(100) NOT NULL,
    PRIMARY KEY (grocery_membership_membership_id, grocery_shop_item_id),
    FOREIGN KEY (grocery_membership_membership_id) REFERENCES grocery_membership(membership_id) ON UPDATE CASCADE,
    FOREIGN KEY (grocery_shop_item_id) REFERENCES grocery_shop(item_id) ON UPDATE CASCADE
);", , ,"insert into grocery_membership (id, membership_id, first_name, last_name, email, age_at_registration, birth_country, gender, job_title, shirt_size) values (1, 'ci8PURD4b6G', 'Aurilia', 'Checkley', 'acheckley0@msu.edu', 54, 'Libya', 'Male', 'Senior Financial Analyst', '3XL');
insert into grocery_membership (id, membership_id, first_name, last_name, email, age_at_registration, birth_country, gender, job_title, shirt_size) values (2, 'vnOBzdWvT4', 'Tanitansy', 'Seignior', 'tseignior1@linkedin.com', 16, 'Russia', 'Female', 'Desktop Support Technician', 'S');
insert into grocery_membership (id, membership_id, first_name, last_name, email, age_at_registration, birth_country, gender, job_title, shirt_size) values (3, 'cVUurr', 'Nina', 'Haworth', 'nhaworth2@chron.com', 27, 'Colombia', 'Female', 'Pharmacist', 'XS');
 
insert into grocery_shop (id, items, shipment_origin, item_id, packaging_color, expiry_date) values (1, 'Pork - Smoked Kassler', 'Democratic Republic of the Congo', 'Democratic Republic of the Congo Pork - Smoked Kassler', 'Turquoise', '7/25/2022');
insert into grocery_shop (id, items, shipment_origin, item_id, packaging_color, expiry_date) values (2, 'Bread - Focaccia Quarter', 'Norfolk Island', 'Norfolk Island Bread - Focaccia Quarter', 'Turquoise', '7/20/2023');
insert into grocery_shop (id, items, shipment_origin, item_id, packaging_color, expiry_date) values (3, 'Foam Cup 6 Oz', 'Portugal', 'Portugal Foam Cup 6 Oz', 'Goldenrod', '3/26/2023');", , ,"INSERT INTO historical_unique_buys (grocery_membership_membership_id, grocery_shop_item_id)
SELECT  
    *
FROM
(
    SELECT
        *
    FROM
        (
        SELECT 
            grocery_membership.membership_id AS grocery_membership_membership_id, grocery_shop.item_id AS grocery_shop_item_id
        FROM
            grocery_membership, grocery_shop
        ORDER BY
            random()
        ) AS s0
    LIMIT
        1000 
) AS s1;", , ,,,
A0165086Y,/* The code is written for PostgreSQL */,"/* 
E1 is the Car_Data.sql file. It contains details of all the cars owned by the ride sharing company, Gruber.
The details of each car are its unique identity number[PRIMARY KEY], its model, its model year, age of car and a row number for ordering purposes. There are a total of 100 cars.
E2 is the Taxi_Driver_Data.sql file. It contains details of all the drivers working for Gruber.
The details of each drivers is their identity number [PRIMARY KEY], full name, contact number, email and their age. There are a total of 100 drivers.
E1 and E2 are connected through R (Car_Driver_Relation), which is the table containing the relations between drivers and cars. Depending on availability, any driver can drive any car and any car can be driven by any driver. Many to many relationship between cars and drivers.The Car_Driver_Relation references car identity number from car_data and driver identity number from driver_data. The primary key is a composite of car_id and driver_id.
*/", , ,"CREATE TABLE Car_Data (
	Car_ID VARCHAR(50) PRIMARY KEY,
	Car_Model VARCHAR(50) NOT NULL,
	Car_Model_Year VARCHAR(50) NOT NULL,
	Car_Age INT NOT NULL,
	_row_ INT NOT NULL
);
CREATE TABLE Taxi_Driver_Data (
	Driver_ID INT PRIMARY KEY,
	Driver_Full_Name VARCHAR(50) NOT NULL,
	Driver_Phone_No VARCHAR(50) NOT NULL,
	Driver_Email VARCHAR(50) NOT NULL,
	Driver_Age INT NOT NULL
);
CREATE TABLE Car_Driver_Relation (
    Car_ID VARCHAR(50) REFERENCES Car_Data(Car_ID)
    ON UPDATE CASCADE ON DELETE CASCADE
    DEFERRABLE INITIALLY DEFERRED,
    Driver_ID INT REFERENCES Taxi_Driver_Data(Driver_ID)
    ON UPDATE CASCADE ON DELETE CASCADE
    DEFERRABLE INITIALLY DEFERRED,
    PRIMARY KEY (Car_ID,Driver_ID)
);", , ,"/*Insert Car Data*/ insert into Car_Data (Car_ID, Car_Model, Car_Model_Year, Car_Age, _row_) values ('WAUEFBFL9AN425879', 'Rapide', 2011, 77, 1);
insert into Car_Data (Car_ID, Car_Model, Car_Model_Year, Car_Age, _row_) values ('1C4RJEAG0EC411790', 'Skylark', 1992, 80, 2);
insert into Car_Data (Car_ID, Car_Model, Car_Model_Year, Car_Age, _row_) values ('YV4852CT0A1165688', 'RL', 2010, 35, 3);
 
/*Insert Driver Data*/ insert into Taxi_Driver_Data (Driver_ID, Driver_Full_Name, Driver_Phone_No, Driver_Email, Driver_Age) values (1, 'Lilli Cordrey', '652-583-3631', 'lcordrey0@china.com.cn', 81);
insert into Taxi_Driver_Data (Driver_ID, Driver_Full_Name, Driver_Phone_No, Driver_Email, Driver_Age) values (2, 'Fran Hirsthouse', '771-501-4527', 'fhirsthouse1@hugedomains.com', 38);
insert into Taxi_Driver_Data (Driver_ID, Driver_Full_Name, Driver_Phone_No, Driver_Email, Driver_Age) values (3, 'Ryann Hobbing', '513-742-7117', 'rhobbing2@netscape.com', 35);", , ,"INSERT INTO Car_Driver_Relation (Car_ID,Driver_ID) SELECT c.Car_ID, d.Driver_ID FROM Car_Data as c, Taxi_Driver_Data as d ORDER BY RANDOM() LIMIT 1000;", , ,,,
A0177964J,/* The code is written for PostgreSQL */,"/*The entity 1: users
The entity 2: stocks 
The relationship: buyin
THe table of users is with their username, fisrt name, last name, country,
company, jobtitle
The table of stocks is with their stock name, stock sector, country, price, 
date, time
The table buyin associating the username and the price of stock name they 
bought in at which day and time
The table users designed with consideration in the person need to open a account 
with a username to trade in the stock market. And there should be risk assessment 
taken during account openning which will get the information from the user about 
their country staying at and the current company working for and the job title. 
The table stocks including stock name and the stock sector it belongs 
to, and country was restricted to be China which means the users trade in the Chinese 
stock market. Meanwhile, the time restricted to be 9am to 3pm which is the market openning 
period for Chinese stock market. This table will show the price of each stock at specific 
date and time. 
The table buyin is the relationship between users and stocks, to show different users bought
in different stock at specific price at exact date and time. 
The code is written for PostgreSQL
*/", , ,"DROP TABLE users, stocks, buyin;
CREATE TABLE IF NOT EXISTS users(
	username VARCHAR(32) PRIMARY KEY,
	first_name VARCHAR(64) NOT NULL,
	last_name VARCHAR(64) NOT NULL,
	country VARCHAR(32) NOT NULL,
	company VARCHAR(32) NOT NULL,
	job_title VARCHAR(64) NOT NULL
);
CREATE TABLE IF NOT EXISTS stocks(
	stock_name VARCHAR(64) NOT NULL,
	stock_sector VARCHAR(64) NOT NULL,
	country VARCHAR(32) NOT NULL,
	price NUMERIC NOT NULL CHECK (price > 0),
	date DATE NOT NULL,
	time TIME NOT NULL,
	PRIMARY KEY (stock_name, price, date, time)
);
CREATE TABLE buyin(
	username VARCHAR(64) REFERENCES users(username)
		ON UPDATE CASCADE ON DELETE CASCADE
		DEFERRABLE INITIALLY DEFERRED,
	stock_name VARCHAR(64) NOT NULL,
	price NUMERIC NOT NULL CHECK (price > 0),
	date DATE NOT NULL,
	time TIME NOT NULL,
	PRIMARY KEY (username, stock_name, price, date, time),
	FOREIGN KEY (stock_name, price, date, time) 
	REFERENCES stocks(stock_name, price, date, time)
		ON UPDATE CASCADE ON DELETE CASCADE
		DEFERRABLE INITIALLY DEFERRED
);", , ,"insert into users (username, first_name, last_name, country, company, job_title) values ('jkayser0', 'Junette', 'Kayser', 'Norway', 'Jabberbean', 'Developer II');
insert into users (username, first_name, last_name, country, company, job_title) values ('ihay1', 'Inna', 'Hay', 'Luxembourg', 'Muxo', 'Product Engineer');
insert into users (username, first_name, last_name, country, company, job_title) values ('gbrumbye2', 'Geri', 'Brumbye', 'China', 'Oyoloo', 'Human Resources Manager');
 
insert into stocks (stock_name, stock_sector, country, price, date, time) values ('Eyegate Pharmaceuticals, Inc.', 'Health Care', 'China', 71.2, '2021-03-01 00:27:54', '11:10 AM');
insert into stocks (stock_name, stock_sector, country, price, date, time) values ('Aflac Incorporated', 'Finance', 'China', 46.79, '2021-04-28 04:37:20', '9:02 AM');
insert into stocks (stock_name, stock_sector, country, price, date, time) values ('Eaton Vance Senior Income Trust', 'n/a', 'China', 32.02, '2021-05-03 14:23:23', '12:10 PM');", , ,"DELETE FROM buyin;
INSERT INTO buyin 
SELECT username, stock_name, price, date, time 
FROM users, stocks 
ORDER BY RANDOM()
LIMIT 1000; ", , ,,,
A0179033E,/* The code is written for PostgreSQL */,"/*The tables here created correspond to a simple sustainability database system.
More specifically, it corresponds to a small sample of a given company's ""Scope 1"" CO2 emissions management system. (The term ""Scope 2"" emissions refer to CO2 generated indirectly through electricity consumption)
In practice, you would have at least an additional table with each site's electricity consumption which could be joined and used to calculate CO2 emissions. This is not the case here as we are limited by the exercise's 3 table rule.
In this exercise, we create three tables 1. SITES: Information on company owned sites, 2. EMISSIONS: Information regarding electricity supplier and CO2, 3. A relationship table that allows us to relate each site with their respective suppliers.
The table SITES corresponds to the company's ledger of their own production, distribution and cross-docking locations. This means, all possible locations owned by the company they may indirectly generate CO2 emissions.
	site_id - id representing the site
	country - Country where site is located
	country_code - Abbreviation of country name
	address - Complete address of site
	postal_code - Postal Code of site
	latitude , longitude - Values useful for geolocation analysis
	site_type - Type of site ('Production', 'Distribution','Cross-docking')
The table EMISSIONS corresponds to relevant information related to calculating or tracking CO2 emissions. This includes CO2 emission factors, supplier names, as well as applicable regulations.
	energy_supplier - Name of the electricity supplier to the site
	applicable_law - Most relevant law and subsection regarding CO2 regulations
	co2_factor - Factor used for calculation CO2 emissions based on electricity consumed.
	co2_unit - Unit in which 'co2_factor' is in. [tonCO2 equivalent/kWh consumed]
	regulatory_limit - regulatory CO2 limit according to law
	generation_method - Method used to generate electricity
Table co2_directory is the requested relational table where we relate each site to all their suppliers. In this case, since there will be multiple combinations, we are observing that each site may buy electricity from morer than one supplier.
This in turn means that a site will have several types of electricity (generated by different means) in their clean energy portfolio.
	site_id - ID of the site - FOREIGN KEY as it should reference the sites primary key.
	energy_supplier - Name of the electricity supplier - FOREIGN KEY as it should reference the emissions primary key
*/", , ,"CREATE TABLE IF NOT EXISTS sites (
	site_id VARCHAR(50) PRIMARY KEY,
	country VARCHAR(30) NOT NULL,
	country_code VARCHAR(5) NOT NULL,
	address VARCHAR(50) NOT NULL,
	postal_code VARCHAR(15) DEFAULT 'N/A',
	latitude NUMERIC NOT NULL,
	longitude NUMERIC NOT NULL,
	site_type VARCHAR(20) NOT NULL
);
CREATE TABLE IF NOT EXISTS emissions (
	energy_supplier VARCHAR(50) PRIMARY KEY,
	applicable_law VARCHAR(80) NOT NULL,
	co2_factor DECIMAL(5,5) NOT NULL,
	co2_unit VARCHAR(20) NOT NULL CHECK (co2_unit ~ '^ton *CO2 *[eq]*/ *kWh'),
	regulatory_limit DECIMAL(3,3) NOT NULL,
	generation_method VARCHAR(50) NOT NULL
);
CREATE TABLE IF NOT EXISTS co2_directory (
	site_id VARCHAR(50),
	energy_supplier VARCHAR(50),
	FOREIGN KEY (site_id) REFERENCES sites(site_id)
	ON UPDATE CASCADE
	ON DELETE CASCADE,
	FOREIGN KEY (energy_supplier) REFERENCES emissions(energy_supplier)
	ON UPDATE CASCADE
	ON DELETE CASCADE
);", , ,"insert into sites (site_id, country, country_code, address, postal_code, latitude, longitude, site_type) values ('VRB1', 'Indonesia', 'ID', '912 Kedzie Place', null, -8.694019, 116.5226451, 'Production');
insert into sites (site_id, country, country_code, address, postal_code, latitude, longitude, site_type) values ('UQW2', 'Czech Republic', 'CZ', '6679 Park Meadow Court', '763 33', 49.070618, 17.9723651, 'Production');
insert into sites (site_id, country, country_code, address, postal_code, latitude, longitude, site_type) values ('RVE3', 'Philippines', 'PH', '14406 Homewood Court', '6419', 14.7596318, 121.0589081, 'Cross-docking');
 
insert into emissions (energy_supplier, applicable_law, co2_factor, co2_unit, regulatory_limit, generation_method) values ('O''Conner LLC', '1-013 - Project Coordinator, Subsection 1', 0.00056, 'tonCO2eq/kWh', 0.765, 'Fuel Oil');
insert into emissions (energy_supplier, applicable_law, co2_factor, co2_unit, regulatory_limit, generation_method) values ('Hartmann-Rau', '11-080 - Registration Equipment, Subsection 1', 0.00064, 'tonCO2eq/kWh', 0.543, 'Hydropower');
insert into emissions (energy_supplier, applicable_law, co2_factor, co2_unit, regulatory_limit, generation_method) values ('Schmeler, Heathcote and Conn', '10-450 - Pedestrian Control Devices, Subsection 4', 0.00059, 'tonCO2eq/kWh', 0.47, 'Geothermal');", , ,"INSERT INTO co2_directory (site_id, energy_supplier)
SELECT a.site_id, b.energy_supplier 
	FROM sites as a CROSS JOIN emissions as b
	ORDER BY RANDOM()
	LIMIT 1000;", , ,,,
A0212524U,/*The code is written for PostgreSQL*/,"/*##A simple Schema is shown below, which shows the basic design idea.
E1: employee(e_id(P), e_name, first_year, depart ) <-- R: advise(i_id(F), e_id(F), me_date) 
--> E2: instructor(i_id(P), i_name, job_title, depart)
##Tables and attributes:
E1: employee
e_id(P):    varchar,    employee ID which is a primary key.
e_name:     varchar,    employee names
first_year: boolean,    whether this employee is in first year or not.
depart:     varchar,    department of the employee
E2: instructor
i_id(P):    varchar,    instructor/mentor's ID
i_name:     varchar,    instructor/mentor's name
job_title   varchar,    instructor/mentor's job title
depart      varchar,    department of the instructor
R: advise
i_id(F)     varchar,    instructor/mentor's ID
e_id(F)     varcahr,    employee ID
me_date     date,       the date that cartain advise record creates.
In the COMPANY Ltd., mentor culture is prevalent here. Each entry level 
employee will be assigned with a mentor who are from middle or high posions 
and willing to periodically offer a face-to-face meeting with those fresh 
birds, giving advise or sharing their experience. 
Now the company creates a database called mentor to save the meeting records 
as well as personal info of employees and instructors. Table 'advise' is a 
relational table link E1,E2.
*/", , ,"/* create 3 tables */
CREATE TABLE employee(
    e_id varchar(20) PRIMARY KEY,
    e_name varchar(20),
    first_year bool,
    depart varchar(30));
CREATE TABLE instructor(
    i_id varchar(20) PRIMARY KEY,
    i_name varchar(20),
    job_title varchar(50),
    depart varchar(30));
CREATE TABLE advise(
    i_id varchar(20) NOT NULL 
        REFERENCES instructor (i_id)
        ON DELETE SET NULL,
    e_id varchar(20) NOT NULL,
    me_date date,
    FOREIGN KEY (e_id) 
        REFERENCES employee (e_id)
        ON DELETE cascade);", , ,"/* populate table employee */ insert into employee (e_id, e_name, first_year, depart) values ('0904-6098', 'Brynne Durtnell', false, 'Training');
insert into employee (e_id, e_name, first_year, depart) values ('42411-022', 'Bevan Maiden', false, 'Product Management');
insert into employee (e_id, e_name, first_year, depart) values ('50383-803', 'Lorain Andrelli', false, 'Engineering');
 
insert into employee (e_id, e_name, first_year, depart) values ('57520-0150', 'Theodor Jenicke', true, 'Product Management');
insert into employee (e_id, e_name, first_year, depart) values ('42254-031', 'Inness Quiney', true, 'Human Resources');
insert into employee (e_id, e_name, first_year, depart) values ('54569-0392', 'Blondy Ebhardt', true, 'Sales');", , ,"/*Create table date for randomly selecting and interting into met_date columne.*/
CREATE TABLE date(
    met_date date);
insert into date (met_date) values ('2020-10-01');
insert into date (met_date) values ('2021-03-29');
insert into date (met_date) values ('2021-04-30');
insert into date (met_date) values ('2021-02-02');
insert into date (met_date) values ('2021-05-20');
insert into date (met_date) values ('2020-07-18');
insert into date (met_date) values ('2020-07-06');
insert into date (met_date) values ('2020-10-28');
insert into date (met_date) values ('2020-08-19');
insert into date (met_date) values ('2021-01-22');
insert into date (met_date) values ('2021-02-08');
insert into date (met_date) values ('2021-01-25');
insert into date (met_date) values ('2020-09-16');
insert into date (met_date) values ('2020-08-08');
insert into date (met_date) values ('2021-07-11');
insert into date (met_date) values ('2021-05-16');
insert into date (met_date) values ('2020-09-19');
insert into date (met_date) values ('2020-11-07');
insert into date (met_date) values ('2021-06-29');
insert into date (met_date) values ('2020-09-20');
insert into date (met_date) values ('2020-11-05');
insert into date (met_date) values ('2020-10-26');
insert into date (met_date) values ('2021-05-04');
insert into date (met_date) values ('2021-06-04');
insert into date (met_date) values ('2021-01-25');
insert into date (met_date) values ('2020-09-17');
insert into date (met_date) values ('2021-04-25');
insert into date (met_date) values ('2021-05-03');
insert into date (met_date) values ('2020-07-07');
insert into date (met_date) values ('2020-07-09');
insert into date (met_date) values ('2021-06-23');
insert into date (met_date) values ('2021-04-21');
insert into date (met_date) values ('2020-10-19');
insert into date (met_date) values ('2020-07-21');
insert into date (met_date) values ('2021-01-24');
insert into date (met_date) values ('2021-06-28');
insert into date (met_date) values ('2020-11-18');
insert into date (met_date) values ('2021-06-25');
insert into date (met_date) values ('2021-02-21');
insert into date (met_date) values ('2021-06-07');
insert into date (met_date) values ('2020-11-05');
insert into date (met_date) values ('2021-06-06');
insert into date (met_date) values ('2020-10-26');
insert into date (met_date) values ('2021-05-28');
insert into date (met_date) values ('2020-10-13');
insert into date (met_date) values ('2021-01-23');
insert into date (met_date) values ('2021-03-03');
insert into date (met_date) values ('2021-01-20');
insert into date (met_date) values ('2021-05-18');
insert into date (met_date) values ('2021-06-26');
insert into date (met_date) values ('2020-11-07');
insert into date (met_date) values ('2021-06-09');
insert into date (met_date) values ('2020-10-07');
insert into date (met_date) values ('2020-11-06');
insert into date (met_date) values ('2021-06-11');
insert into date (met_date) values ('2021-07-27');
insert into date (met_date) values ('2021-06-03');
insert into date (met_date) values ('2020-10-03');
insert into date (met_date) values ('2020-09-22');
insert into date (met_date) values ('2020-09-22');
insert into date (met_date) values ('2020-12-06');
insert into date (met_date) values ('2020-12-06');
insert into date (met_date) values ('2021-05-08');
insert into date (met_date) values ('2021-03-16');
insert into date (met_date) values ('2021-05-30');
insert into date (met_date) values ('2020-11-23');
insert into date (met_date) values ('2021-02-03');
insert into date (met_date) values ('2021-03-07');
insert into date (met_date) values ('2021-03-04');
insert into date (met_date) values ('2021-02-01');
insert into date (met_date) values ('2021-06-21');
insert into date (met_date) values ('2021-01-22');
insert into date (met_date) values ('2020-08-18');
insert into date (met_date) values ('2021-05-02');
insert into date (met_date) values ('2021-06-11');
insert into date (met_date) values ('2021-04-19');
insert into date (met_date) values ('2021-02-13');
insert into date (met_date) values ('2021-03-28');
insert into date (met_date) values ('2020-09-13');
insert into date (met_date) values ('2020-07-01');
insert into date (met_date) values ('2020-09-01');
insert into date (met_date) values ('2021-07-16');
insert into date (met_date) values ('2020-07-10');
insert into date (met_date) values ('2020-10-15');
insert into date (met_date) values ('2020-07-14');
insert into date (met_date) values ('2020-12-21');
insert into date (met_date) values ('2021-01-19');
insert into date (met_date) values ('2020-08-11');
insert into date (met_date) values ('2021-07-03');
insert into date (met_date) values ('2021-06-11');
insert into date (met_date) values ('2020-11-15');
insert into date (met_date) values ('2021-06-15');
insert into date (met_date) values ('2021-05-17');
insert into date (met_date) values ('2020-07-13');
insert into date (met_date) values ('2021-06-22');
insert into date (met_date) values ('2021-05-08');
insert into date (met_date) values ('2021-03-23');
insert into date (met_date) values ('2021-05-31');
insert into date (met_date) values ('2020-09-12');
insert into date (met_date) values ('2021-03-26');
insert into date (met_date) values ('2020-10-27');
insert into date (met_date) values ('2020-09-25');
insert into date (met_date) values ('2020-11-22');
insert into date (met_date) values ('2021-07-04');
insert into date (met_date) values ('2020-11-13');
insert into date (met_date) values ('2021-07-08');
insert into date (met_date) values ('2020-12-07');
insert into date (met_date) values ('2020-11-03');
insert into date (met_date) values ('2020-10-20');
insert into date (met_date) values ('2020-10-01');
insert into date (met_date) values ('2021-01-16');
insert into date (met_date) values ('2021-05-29');
insert into date (met_date) values ('2021-04-25');
insert into date (met_date) values ('2020-11-08');
insert into date (met_date) values ('2021-07-10');
insert into date (met_date) values ('2020-12-29');
insert into date (met_date) values ('2021-05-01');
insert into date (met_date) values ('2021-04-12');
insert into date (met_date) values ('2020-07-17');
insert into date (met_date) values ('2020-12-06');
/*Randomly select instructors, employees and meeting dates. And inset 
1000 rows into table advise.*/
INSERT INTO advise(i_id, e_id, me_date)
SELECT i_id,e_id,met_date FROM instructor, employee, date
ORDER BY random()
LIMIT 1000;
-- Drop temp table date.
DROP TABLE date;", , ,,,
A0218816Y,/* The code is written for PostgreSQL */,"/*I want to create a database to capture a company's shipment data. Specifically, I am interested to understand from which site to which customer the company is shipping how many pallets on which date. With this information, I will be able to prepare a centre-of-gravity study and analyse improvement opportunities in the company's supply chain network.
The database consists of 3 tables: site, customer, and shipment. The site and customer tables contain address details such as name, street address, city, postal code, country, as well as unique site and customer IDs. The shipment table contains transactional shipment information such as number of pallets, dispatch date, and the transport provider's unique shipment ID.
*/", , ,"DROP TABLE IF EXISTS shipment;
DROP TABLE IF EXISTS site;
DROP TABLE IF EXISTS customer;
CREATE TABLE IF NOT EXISTS site (
name VARCHAR(64) NOT NULL,
street_address VARCHAR(64) NOT NULL,
city VARCHAR(64) NOT NULL,
postal_code VARCHAR(64) NOT NULL,
country_code CHAR(2) NOT NULL,
site_id CHAR(4) PRIMARY KEY
);
CREATE TABLE IF NOT EXISTS customer (
name VARCHAR(64) NOT NULL,
street_address VARCHAR(64) NOT NULL,
city VARCHAR(64) NOT NULL,
postal_code VARCHAR(64) NOT NULL,
country_code CHAR(2) NOT NULL,
customer_id CHAR(4) PRIMARY KEY
);
CREATE TABLE IF NOT EXISTS shipment (
site_id CHAR(4) REFERENCES site(site_id) ON DELETE CASCADE DEFERRABLE,
customer_id CHAR(8) REFERENCES customer(customer_id) ON DELETE CASCADE DEFERRABLE,
number_of_pallets INT CHECK(number_of_pallets>0),
dispatch_date DATE NOT NULL,
shipment_id VARCHAR(16) PRIMARY KEY
);", , ,"INSERT INTO site (name, street_address, city, postal_code, country_code, site_id) VALUES ('Alex Industries BR', '0043 Schlimgen Road','Guaçuí','29560-000','BR','s1');
INSERT INTO site (name, street_address, city, postal_code, country_code, site_id) VALUES ('Alex Industries CR', '696 Derek Hill','Ángeles','40504','CR','s2');
INSERT INTO site (name, street_address, city, postal_code, country_code, site_id) VALUES ('Alex Industries CZ', '7 Heath Road','Boršice','687 10','CZ','s3');
 
INSERT INTO customer (name, street_address, city, postal_code, country_code, customer_id) VALUES ('Meezzy', '29 Morningstar Pass','Norrtälje','761 51','SE','c1');
INSERT INTO customer (name, street_address, city, postal_code, country_code, customer_id) VALUES ('Thoughtstorm', '18 Buell Road','Brandsen','1981','AR','c2');
INSERT INTO customer (name, street_address, city, postal_code, country_code, customer_id) VALUES ('Gevee', '6063 Alpine Center','Tsushima','979-1757','JP','c3');", , ,"INSERT INTO shipment (site_id, customer_id, number_of_pallets, dispatch_date, shipment_id)
SELECT 
's' || FLOOR(RANDOM()*(100-0)+1),
'c' || FLOOR(RANDOM()*(100-0)+1),
FLOOR(RANDOM()*(100-1)+1),
TIMESTAMP '2020-01-01' + RANDOM() * (TIMESTAMP '2020-12-31' - TIMESTAMP '2020-01-01'),
't' || generate_series(1,1000);", , ,,,
A0218840E,"/* The code is written for PostgreSQL, version 13.3 */","/* The chosen example consists of data from a beauty retailer (e.g Sephora).
Entity 1 will be a orders table containing order details such as which customer
ordered as user_id, the order_id, and when their order was made as created_as.
Entity 2 will be a products_inventory table containing inventory details such
as product_name, brand_name, and how much stock is available as units_remaining.
The many-to-many relationship is represented by items_in_order which associates
products being ordered with stock levels in the inventory. Unfortunately the system
does not have a constraint to prevent customers from ordering quantities larger than
available stock in the inventory.
*/", , ,"CREATE TABLE orders (
	order_id NUMERIC PRIMARY KEY UNIQUE,
	created_at DATE,
	user_id NUMERIC NOT NULL,
	country CHAR(64)
);
CREATE TABLE products_inventory (
	product_id NUMERIC,
	product_name CHAR(64) UNIQUE,
	brand_name CHAR(64),
	units_remaining NUMERIC CHECK (units_remaining >= 0),
	PRIMARY KEY(product_id, product_name, brand_name)
);
CREATE TABLE items_in_order (
	order_id NUMERIC,
	FOREIGN KEY(order_id) REFERENCES orders(order_id),
	product_id NUMERIC,
	product_name CHAR(64),
	brand CHAR(64),
	FOREIGN KEY(product_id, product_name, brand) REFERENCES products_inventory(product_id, product_name, brand_name)
		ON UPDATE CASCADE
		ON DELETE CASCADE,
	quantity NUMERIC NOT NULL CHECK (quantity > 0)
);", , ,"insert into orders (order_id, created_at, user_id, country) values ('2357757132', '13/01/2021', '0510816746', 'Armenia');
insert into orders (order_id, created_at, user_id, country) values ('8790551826', '09/08/2021', '6765461027', 'China');
insert into orders (order_id, created_at, user_id, country) values ('8339765531', '01/02/2021', '5701578046', 'Belarus');
 
insert into products_inventory (product_id, product_name, brand_name, units_remaining) values ('4675490018', 'All Nighter Long-Lasting Makeup Setting Spray', 'Urban Decay', '2104');
insert into products_inventory (product_id, product_name, brand_name, units_remaining) values ('4482519294', 'Super Shock Pressed Pigments', 'Colour Pop', '40523');
insert into products_inventory (product_id, product_name, brand_name, units_remaining) values ('6045659309', 'Powder Bronzer', 'Jordana', '42');", , ,"INSERT INTO items_in_order(order_id, product_id, product_name, brand, quantity)
SELECT o.order_id, pi.product_id, pi.product_name, pi.brand_name, ROUND(RANDOM()*(100-1+1)+1)
FROM orders o, products_inventory pi
WHERE RANDOM() < 0.1;", , ,,,
A0218849M,/* The code is written for PostgreSQL */,"/* 
COVID-19 clusters had emerged in hundreds of small companies across Sydney in late July 2021. As Lyft, a private-hire driver 
platform, the task is to identify the private-hire drivers who had picked up passengers from the affected companies during 
a 2 week window in early August 2021 and to suspend the drivers' Lyft account as a precaution.
The 'driver' table contains the details of the affected Lyft's drivers in Sydney like name, gender, date of birth and 
employee-id.
The 'affected_companies' table contains the details of companies with active COVID-19 clusters. The table contain the 
company name, uen, the latitude and longitude coordinates of their office where the cluster is active, and the date where the
COVID-19 cluster was first identified.
The 'contact_tracing' table shows the employee-id of the drivers who had picked up passengers from the affected companies.
Code is written for PostgreSQL.
*/", , ,"/*** Create schema ***/
DROP TABLE IF EXISTS contact_tracing;
DROP TABLE IF EXISTS driver;
DROP TABLE IF EXISTS affected_companies;
CREATE TABLE IF NOT EXISTS driver (
first_name VARCHAR(64) NOT NULL,
last_name VARCHAR(64) NOT NULL,
gender CHAR(1) NOT NULL CONSTRAINT gender CHECK(gender = 'M' OR gender='F'),
employee_id CHAR(10) PRIMARY KEY,
dob DATE NOT NULL
);	
CREATE TABLE IF NOT EXISTS affected_companies (
company VARCHAR(64) NOT NULL,
uen CHAR(11) PRIMARY KEY,
latitude CHAR(12) NOT NULL,
longitude CHAR(12) NOT NULL,
cluster_startdate DATE NOT NULL
);	
CREATE TABLE IF NOT EXISTS contact_tracing (
employee_id CHAR(10) REFERENCES driver(employee_id) ON UPDATE CASCADE ON DELETE CASCADE, 
uen CHAR(11) REFERENCES affected_companies(uen) ON UPDATE CASCADE ON DELETE CASCADE	
);", , ,"INSERT INTO driver VALUES ('Octavia', 'Penhalurick', 'F', '89-7629059', '09/07/1987');
INSERT INTO driver VALUES ('Hildegaard', 'Bampford', 'F', '64-3373794', '26/01/1989');
INSERT INTO driver VALUES ('Barnett', 'McNirlan', 'M', '42-2827108', '12/07/1964');
 
INSERT INTO driver VALUES ('Rhiamon', 'Sporgeon', 'F', '16-6882422', '28/08/1993');
INSERT INTO driver VALUES ('Lois', 'Tumility', 'F', '30-8007667', '26/09/1977');
INSERT INTO affected_companies VALUES ('Hoppe-Harris', '366-46-3199',-0.031303,110.120499, '07/08/2021');", , ,"INSERT INTO contact_tracing (employee_id, uen)
SELECT driver.employee_id, affected_companies.uen FROM driver CROSS JOIN affected_companies
ORDER BY
RANDOM()
LIMIT 1000;", , ,,,
A0218865R,/* The code is written for PostgreSQL */,"/*Entity set E1 (client) is a list of clients of a trading firm, 
providing information about their customer demographics such as gender, income as well as address (including latitude and longitude).
Entity set E2 (ticker) is a list of stocks available on various exchange,
providing information regarding the stock name, ticker, industry, sector and market cap.
The relationship table (client_ticker) tells us the transaction details of clients, 
providing information on transaction creation timestamp, ticker, stock name and total amount purchased.
Using the clients' demographics, we can analyse whether there are transactional patterns over time among age group, gender and income,
including with their preferences in sector and industry.  
One interesting use case of this entity-relationship is to find out which ticker is the most heavily invested
amongst geographical locations (using latitude and longitude to plot on map).
*/", , ,"DROP TABLE IF EXISTS client_ticker;
DROP TABLE IF EXISTS client;
DROP TABLE IF EXISTS ticker;
create table client (
	customer_id VARCHAR(40) PRIMARY KEY,
	email_address VARCHAR(50) UNIQUE,
	first_name VARCHAR(50) NOT NULL,
	last_name VARCHAR(50) NOT NULL,
	gender VARCHAR(50) NOT NULL,
	income NUMERIC NOT NULL,
	latitude NUMERIC NOT NULL,
	longitude NUMERIC NOT NULL
);
CREATE table ticker (
	stock_name VARCHAR(100) UNIQUE NOT NULL,
	ticker VARCHAR(50) UNIQUE NOT NULL,
	market VARCHAR(50),
	sector VARCHAR(50),
	market_cap VARCHAR(50),
	industry VARCHAR(100),
  PRIMARY KEY (stock_name, ticker)
);
CREATE TABLE client_ticker (
	customer_id VARCHAR(40) REFERENCES client (customer_id) ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE,
	stock_name VARCHAR(100) NOT NULL REFERENCES ticker (stock_name) ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE,
	ticker VARCHAR(50) NOT NULL REFERENCES ticker (ticker) ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE,
	created_at TIMESTAMPTZ,
	total_purchased NUMERIC NOT NULL CHECK (total_purchased>0), 
	PRIMARY KEY (customer_id, stock_name, ticker, created_at)
);", , ,"insert into client (customer_id, email_address, first_name, last_name, gender, income, latitude, longitude) values ('f911fe55-6fb5-4252-8ff0-02ba0ac6e880', 'cperri0@cdc.gov', 'Carline', 'Perri', 'Bigender', 629795, 45.2911425, 20.1955026);
insert into client (customer_id, email_address, first_name, last_name, gender, income, latitude, longitude) values ('ee98f1a5-2231-4a58-a651-ff10899ef0f0', 'vgilvary1@yandex.ru', 'Vernor', 'Gilvary', 'Bigender', 830904, 22.463604, -79.7231612);
insert into client (customer_id, email_address, first_name, last_name, gender, income, latitude, longitude) values ('42c3fb23-e901-4a14-b0e3-41a451ac9b0b', 'bmarchello2@guardian.co.uk', 'Borden', 'Marchello', 'Bigender', 418106, 59.9123889, 10.8335476);
 
insert into ticker (stock_name, ticker, market, sector, market_cap, industry) values ('Tennessee Valley Authority', 'TVE', 'NYSE', 'Public Utilities', 'n/a', 'Electric Utilities: Central');
insert into ticker (stock_name, ticker, market, sector, market_cap, industry) values ('Columbia Sportswear Company', 'COLM', 'NASDAQ', 'Consumer Non-Durables', '$3.94B', 'Apparel');
insert into ticker (stock_name, ticker, market, sector, market_cap, industry) values ('iShares MSCI Europe Small-Cap ETF', 'IEUS', 'NASDAQ', 'n/a', '$126.72M', 'n/a');", , ,"INSERT INTO client_ticker 
SELECT * FROM (SELECT customer_id, stock_name, ticker,
NOW() - (random()*10 * (interval '365 days'))  AS created_at,
floor(random()*9999999)/100 AS total_purchased
FROM client, ticker)
ORDER BY random()
LIMIT 1000;", , ,,,
A0218871X,/* The code is written for PostgreSQL */,"/*This case is to simply demonstrate a many to many relationship in database, the example I chose is an online video on demand sales history system.
The first entity set is the users data, including username, their first name and last name, their email address, phone number, country, billing address and credit card number that they used on our VOD platform.
The second entity set is the movies that are available on our platform, movie title, genres,  content providers of those movie and price for each movie are stored in this table.
The many to many relationship in this case is the user’s VOD playback history. This table only has two attributes, they are username and the title of movie that the customers order on our VOD platform.
Ideally, in real case, we would like to have a timestamp of transaction and web order number in this table as well, but because of the way we populate this table, it is not feasible to add those attributes, so I just skipped.
The code is written for PostgreSQL
*/", , ,"/* Drop tables as needed */
DROP TABLE IF EXISTS vod;
DROP TABLE IF EXISTS movies;
DROP TABLE IF EXISTS users;
/* Create users table*/
CREATE TABLE IF NOT EXISTS users (
 username VARCHAR(64) PRIMARY KEY,
 first_name VARCHAR(64) NOT NULL,
 last_name VARCHAR(64) NOT NULL,
 email VARCHAR(64) UNIQUE NOT NULL,
 phone_number VARCHAR(32) UNIQUE NOT NULL,
 country VARCHAR(64) NOT NULL,
 billing_address VARCHAR(128) NOT NULL,
 cc_number VARCHAR(32) NOT NULL
);
/* all attributes are set to be not null in users table. In PostgreSQL, we dont't need to explicitly declare the primary key as not null.
Phone number and email address is set to be unique as it is not allowed to create the account again using the same email or phone number.
 */
 /* Create movies table */
 CREATE TABLE IF NOT EXISTS movies(
  title VARCHAR(128) PRIMARY KEY,
  genres VARCHAR(128) NOT NULL,
  provider VARCHAR(64) NOT NULL,
  price NUMERIC NOT NULL CHECK (price >= 0)
  );
  /*  All attributes are set to be not null.
  If we generate 1000 rows of movie records from Mockaroo, it was noticed that there could be some duplicate movie titles in the dataset,
  but fortunately, the set of data here doesn't have any duplicate movie titles, so we can choose it as primary key.
 One way to create the constraint in case of duplicate titles is to use the combination of tile and realease year as primary key, whicn can be generated using 'car model year' in mockaroo.
 This also happens in real life. E.g. The movie Ghostbuster
 The assumption we have to make here is that there isn't any movie that released in the same year with the same title.
 If that's not the case, the best way is to create a movie_id column as primary key in this table.
 */
 /* Create vod table*/
CREATE TABLE vod(
 username VARCHAR(32) REFERENCES users(username) ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
 title  VARCHAR(128) REFERENCES movies(title) ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
 PRIMARY KEY(username,title)
 );
 /* Both attributes are foreign key in this table.
 As what was being discussed earlier,
 ideally, in real case, we would like to have a timestamp of transaction and web order number in this table as well,
 but because of the way we populate this table, it is not feasible to populating those attributes using one single insert statement,
 so I just skipped.
 */", , ,"/* Populating table movies */ insert into movies (title, genres, provider, price) values ('When I Grow Up, I''ll Be a Kangaroo (Kad porastem bicu Kengur)', 'Comedy', 'Walsh Group', 9);
insert into movies (title, genres, provider, price) values ('Chronos', 'Documentary|IMAX', 'Windler and Sons', 10);
insert into movies (title, genres, provider, price) values ('Rooster Cogburn', 'Comedy|Western', 'Walsh and Sons', 14);
 
/* Populating table users */ insert into users (username, first_name, last_name, email, phone_number, country, billing_address, cc_number) values ('spunyer0', 'Sybilla', 'Punyer', 'spunyer0@washingtonpost.com', '167 188 6818', 'China', '2 Mcbride Point', '3530396380330618');
insert into users (username, first_name, last_name, email, phone_number, country, billing_address, cc_number) values ('apevie1', 'Auria', 'Pevie', 'apevie1@squidoo.com', '642 367 6187', 'Portugal', '4584 Swallow Terrace', '5574012546167552');
insert into users (username, first_name, last_name, email, phone_number, country, billing_address, cc_number) values ('bmaylam2', 'Briant', 'Maylam', 'bmaylam2@google.com', '935 930 5043', 'Uganda', '4937 Banding Street', '3579255852631956');", , ,"INSERT INTO vod (username,title)
SELECT username,title FROM users, movies
ORDER BY random() LIMIT 1000;
SELECT * FROM vod;", , ,,,
A0218875N,/* The code is written for PostgreSQL */,"/* All of the code is written for PostgreSQL
Our use case is that of a video streaming service with its subscribers. 
Our key goal is to identify which movies the subscribers have watched in order to recommend the next movie to watch.
The three tables are as follows:
1. Movies (Entity 1)
As each movie is uploaded to the service, it is assigned a MovieID which is unique and shall be used as our Primary Key.
We introduced a constraint to verify if the StreamingRights to the movie is 'Available' or 'Expired'.
A Subscriber will not be able to watch a film that has expired StreamingRights.
2. Subscriber (Entity 2)
As each subscriber joins our service, they are assigned a unique UserID that shall be used as our Primary Key although their email addresses could be also an alternative.
We introduced a constraint to verify if a Subscriber has an Active status (paid fees) to continue watching movies.
3. WatchedMovies (Relationship)
This table stores the record of which viewer has seen which movie. 
This can then be used in a recommendation model to suggest films that clients have not watched.
We have used a composite of Viewer and Movie as the primary key as we only aim to capture if a subscriber has seen a film.
*/", , ,"CREATE TABLE IF NOT EXISTS Movies (
Title VARCHAR(256) NOT NULL,
Genre VARCHAR (256) NOT NULL,
Duration INT NOT NULL,
MovieID INT PRIMARY KEY,
Rating INT NOT NULL, 
StreamingRights VARCHAR(256) CONSTRAINT StreamingRights CHECK(StreamingRights = 'Available' OR StreamingRights='Expired')
);
CREATE TABLE IF NOT EXISTS Subscriber (
Firstname VARCHAR(32) NOT NULL,
Lastname VARCHAR(32) NOT NULL,
Email VARCHAR(256) NOT NULL UNIQUE,
Address VARCHAR(256) NOT NULL,
Joined DATE NOT NULL,
UserID INT PRIMARY KEY,
Status VARCHAR(256) CONSTRAINT Status CHECK(Status = 'Active' OR Status='Expired')
);
CREATE TABLE IF NOT EXISTS WatchedMovies (
Viewer INT REFERENCES Subscriber(UserID) DEFERRABLE,
Movie INT REFERENCES Movies(MovieID) DEFERRABLE,
PRIMARY KEY (Viewer, Movie)
);", , ,"insert into movies (Title, Genre, Duration, MovieID, Rating, StreamingRights) values ('The Confessions of Bernhard Goetz', 'Crime|Documentary', 49, '100001', 3, 'Available');
insert into movies (Title, Genre, Duration, MovieID, Rating, StreamingRights) values ('El Dorado', 'Western', 183, '100002', 5, 'Available');
insert into movies (Title, Genre, Duration, MovieID, Rating, StreamingRights) values ('Birthday Girl', 'Drama|Romance', 61, '100003', 1, 'Available');
 
insert into subscriber (Firstname, Lastname, Email, Address, Joined, UserID, Status) values ('Vergil', 'Ingray', 'vingray0@pcworld.com', '0 Welch Terrace', '02/06/2006', '810001', 'Active');
insert into subscriber (Firstname, Lastname, Email, Address, Joined, UserID, Status) values ('Robby', 'Fielding', 'rfielding1@rambler.ru', '28 Rusk Street', '10/06/2017', '810002', 'Active');
insert into subscriber (Firstname, Lastname, Email, Address, Joined, UserID, Status) values ('Aldric', 'Ayerst', 'aayerst2@sourceforge.net', '5 Arrowood Crossing', '24/08/2015', '810003', 'Active');", , ,"INSERT INTO watchedmovies(Viewer, Movie)
SELECT a.UserID, b.MovieID
FROM Subscriber a, Movies b
WHERE a.status = 'Active' AND b.StreamingRights = 'Available'
ORDER BY RANDOM()
LIMIT 1000
;", , ,,,
A0218877L,"/*The code is written for PostgreSQL
*/","/*My 3 tables will represent sales from an online drugstore.
Entity 1: Customer Details
Table Name: customer_details_mock
Columns are as followed
Row ID:						id INT
Registered First Name:		first_name VARCHAR(50)
Registered Last Name:		last_name VARCHAR(50)
Registered Email:			email VARCHAR(50)
Stated Gender:				gender VARCHAR(50)
Unique created username:	username VARCHAR(50)
Registered Country:			country_of_residence VARCHAR(50)
Entity 2: Available drug details and pricing 
Table Name: drug_mock
Columns are as followed
Row ID:			id INT
Brand of Drug:	drug_brand VARCHAR(1000)
Name of Drug:	drug_name VARCHAR(1000)
Price:			price INT
Relationship: Purchases made by customers in last 7 days
Table Name: purchases
Columns are as followed
date of purchase last 7 days:	date_of_purchase DATE
Unique created username:		username VARCHAR(50)
Brand of Drug:					drug_brand VARCHAR(1000)
Name of Drug:					drug_name VARCHAR(1000)
Price:							price INT
*/", , ,"create table IF NOT EXISTS customer_details_mock (
	id INT,
	first_name VARCHAR(50) NOT NULL,
	last_name VARCHAR(50) NOT NULL,
	email VARCHAR(50) UNIQUE NOT NULL,
	gender VARCHAR(50) NOT NULL,
	username VARCHAR(50) PRIMARY KEY,
	country_of_residence VARCHAR(50) NOT NULL
);
create table IF NOT EXISTS drug_mock (
	id INT,
	drug_brand VARCHAR(1000) NOT NULL,
	drug_name VARCHAR(1000) NOT NULL,
	price INT NOT NULL CHECK (price > 0),
	PRIMARY KEY (drug_brand , drug_name) 
);
create table IF NOT EXISTS purchases (
	date_of_purchase DATE,
	username VARCHAR(50) REFERENCES customer_details_mock (username)
		ON UPDATE CASCADE ON DELETE CASCADE
		DEFERRABLE INITIALLY DEFERRED,
	drug_brand VARCHAR(1000),
	drug_name VARCHAR(1000),
	price INT NOT NULL CHECK (price > 0),
	FOREIGN KEY (drug_brand, drug_name) REFERENCES drug_mock (drug_brand, drug_name)
		ON UPDATE CASCADE ON DELETE CASCADE
		DEFERRABLE INITIALLY DEFERRED
);", , ,"/*customer_details_mock*/ insert into customer_details_mock (id, first_name, last_name, email, gender, username, country_of_residence) values (1, 'Orelia', 'Jovasevic', 'ojovasevic0@cdbaby.com', 'Female', 'ojovasevic0', 'Indonesia');
insert into customer_details_mock (id, first_name, last_name, email, gender, username, country_of_residence) values (2, 'Garrott', 'Varlow', 'gvarlow1@jimdo.com', 'Non-binary', 'gvarlow1', 'Papua New Guinea');
insert into customer_details_mock (id, first_name, last_name, email, gender, username, country_of_residence) values (3, 'Claudina', 'Rodnight', 'crodnight2@fc2.com', 'Bigender', 'crodnight2', 'China');
 
/*drug_mock*/ insert into drug_mock (id, drug_brand, drug_name, price) values (1, 'Gleostine', 'lomustine', 114);
insert into drug_mock (id, drug_brand, drug_name, price) values (2, 'Naproxen', 'Naproxen', 155);
insert into drug_mock (id, drug_brand, drug_name, price) values (3, 'Testes Apis', 'Testes Apis', 192);", , ,"INSERT INTO purchases(
	date_of_purchase, username, drug_brand, drug_name, price)
	SELECT 
	(NOW() + (random() * (NOW()+'-7 days' - NOW()))) as date_of_purchase,
 	a.username, 
	b.drug_brand, 
	b.drug_name, 
	b.price
	FROM 
	customer_details_mock a
	CROSS JOIN 
	drug_mock b
	ORDER BY RANDOM()
	limit 1000;", , ,,,
A0218897H,/* The code is written for PostgreSQL */,"/* The example intended to illustrate how Crunchbase (a platform documenting business information about public/private company) works,
focusing on the fundraising activities. There would be 3 tables, where the 1st one will be a master list of all potential investors, their
public email addresses, investor type (ie, family offices or venture capital), country and registration date; while the second one would 
be a master list of all companies, with their registration date and country. The third table will document all fund raising activities between the investors 
and companies, however, the table only document the closed date or the completion date of these activities to ensure compliance while the closed amount is a
column accepting null value since it might be a highly confidential information. Nonetheless, it will minimally document if the fundraising round is a success
or not, and which series it is. 
The code below is written in PostgreSQL.
*/", , ,"/* CREATE TABLE if NOT EXISTS investors (
 inv_name VARCHAR(64) NOT NULL,
 email VARCHAR(64) UNIQUE NOT NULL,
 inv_type VARCHAR(64),
 registration DATE NOT NULL,
 country VARCHAR(64) NOT NULL,
 inv_id bigint primary key
 check (inv_type in ('Family Offices', 'Venture Capital')));
 CREATE TABLE if NOT EXISTS company (
 company_name VARCHAR(64) NOT NULL,
 registration_date DATE NOT NULL,
 country VARCHAR(64) NOT NULL,
 company_id bigint primary key) ;
CREATE TABLE if not Exists fundraised (
inv_id bigint references investors(inv_id) not null,
company_id bigint references company(company_id) not null,
status VARCHAR(64) check (status in ('Completed', 'Failed')),
closed_amount numeric,
closed_date Date not null,
series VARCHAR(64) check (series in ('Angel-Investment Round', 'Series Funding Round',
									 'IPO')));
*/", , ,"/* insert into company (company_name, registration_date, country, company_id) values ('Skyba', '02/09/2020', 'China', 1);
insert into company (company_name, registration_date, country, company_id) values ('Riffwire', '04/09/2020', 'Poland', 2);
insert into company (company_name, registration_date, country, company_id) values ('Twitterwire', '07/06/2021', 'Argentina', 3);
 
insert into investors ( inv_name, email, inv_type, registration, country, inv_id) values ('Browsedrive', 'lbanishevitz0@sogou.com', 'Family Offices', '05/07/2021', 'United States', 1);
insert into investors ( inv_name, email, inv_type, registration, country, inv_id) values ('Shuffledrive', 'tnarup1@canalblog.com', 'Venture Capital', '26/06/2021', 'Brazil', 2);
insert into investors ( inv_name, email, inv_type, registration, country, inv_id) values ('Yoveo', 'kpeplow2@google.co.jp', 'Venture Capital', '27/10/2020', 'Cuba', 3);", , ,"/*INSERT INTO fundraised (inv_id, company_id, status, closed_amount, closed_date, series)
SELECT 
	i.inv_id, c.company_id,
  (ARRAY['Completed', 'Failed'])[round(random())+1], -- for status
  round(random()*1000000000), -- closed_amount
  NOW() + (random() * (NOW()+'90 days' - NOW())) + '30 days', -- closed_date
  (ARRAY['Angel-Investment Round', 'Series Funding Round','IPO'])[round(random())+2] -- for series
from investors i, company c TABLESAMPLE SYSTEM_ROWS(100) limit 1000;
*/
", , ,,,
A0218915Y,/* The code is written for PostgreSQL */,"/* Create one database including the information of the movie tickets booked 
online by customers for the monitoring period.
Assume that the monitoring period is from 24-Aug-2021 to 29-Aug-2021.
Table E1 stores the information about the customers, 
 - their first name, 
 - last name, 
 - email, 
 - and mobile number.
Table E2 stores the information about the movies, 
 - movie name,
 - movie genres, 
 - and movie date.
Table R provides the information about the potential bookings for the 
given period. It presents a many-to-many relationship to show that one 
customer can choose various movies on the differet dates,and one movie
can be shown to many customers on the different dates. 
customers (E1) table contains information of 
	first_name, 
	last_name, 
	email, 
	and mobile_no (primary key).
movies (E2) table contains information of 
	movie_name, movie_date (primary key)
	and movie_genres.
bookings (R) table contains information of 
	mobile_no (referenced column), 
	movie_name, movie_date (referenced column), 
	and the primary key is mobile_no from customers and 
	movie_name & movie_date from movies.                                */", , ,"CREATE TABLE IF NOT EXISTS customers (
	 first_name VARCHAR(50) NOT NULL,
	 last_name VARCHAR(50) NOT NULL,
	 email VARCHAR(50) NOT NULL,
	 mobile_no VARCHAR(12) PRIMARY KEY);
CREATE TABLE IF NOT EXISTS movies(
	 movie_name VARCHAR(150) NOT NULL,
	 movie_genres VARCHAR(150) NOT NULL,
	 movie_date DATE NOT NULL,
	 PRIMARY KEY (movie_name, movie_date));
 CREATE TABLE IF NOT EXISTS bookings(
	 mobile_no VARCHAR(12) REFERENCES customers (mobile_no)
		 ON UPDATE CASCADE
		 ON DELETE CASCADE
	 	 DEFERRABLE INITIALLY DEFERRED,
	 movie_name VARCHAR(150),
	 movie_date DATE,
	 PRIMARY KEY (mobile_no, movie_name, movie_date),
	 FOREIGN KEY (movie_name, movie_date) REFERENCES movies (movie_name, movie_date)
		 ON UPDATE CASCADE
		 ON DELETE CASCADE
 		 DEFERRABLE INITIALLY DEFERRED);", , ,"/* Populate the customers table */ insert into customers values ('Daphene', 'Summerbell', 'dsummerbell0@marriott.com', '896-350-4737');
insert into customers values ('Rozanne', 'MacGarvey', 'rmacgarvey1@yale.edu', '900-300-5152');
insert into customers values ('Joannes', 'Raulin', 'jraulin2@zimbio.com', '865-431-6667');
 
/* Populate the movies table */ insert into movies values ('Snarveien (Detour)', 'Horror|Thriller', '2021-08-13');
insert into movies values ('Beauty and the Bastard (Tyttö sinä olet tähti)', 'Drama|Musical|Romance', '2020-08-24');
insert into movies values ('Life On A String (Bian chang Bian Zou)', 'Adventure|Drama|Fantasy|Musical', '2021-02-27');", , ,"INSERT INTO bookings 
	(SELECT mobile_no, movie_name, movie_date FROM customers,movies) 
		ORDER BY RANDOM() LIMIT 1000;
SELECT * FROM bookings;", , ,,,
A0218923B,/* The code is written for PostgreSQL */,"/*Chinese Autumn festival is going to happen soon around 21st Sep 2021. Many families are planning for a short term trip across some areas in China but may have limited budget.
This scenario was based on above and created 3 tables for one famous traveling plan website that you could bookmark travel plans with your email address. While there is price reduction, you would be able to received email to book the plan immediately. 
According to bookmark popularity, the website can plan for promotions and send updates through user email.
Entity set E1 to be t_user, including system generated user_id (as primary key) and user information last_name, first_name, email (Not Null & Unique), gender and age. 
Entity set E2 to be t_plan, for counrty & travel plan price information, including country_id(as primary key), country_name, city_name as well as price_total and travel_days_total.
Many-to-many relationship set R to be t_bookmark, which was stored the information of which user has bookmarked into wishlist for the combination of travel places. 
*/", , ,"/* Entity set 1 - t_user table */
CREATE TABLE IF NOT EXISTS t_user(
    user_id INT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(50) UNIQUE NOT NULL,
    gender VARCHAR(50) NOT NULL,
    age INT NOT NULL
    );
/* Entity set 2 - t_plan table */
CREATE TABLE IF NOT EXISTS t_plan (
	plan_id INT PRIMARY KEY,
	country_name VARCHAR(50) NOT NULL,
	city_name VARCHAR(50) NOT NULL,
	price_total VARCHAR(50) NOT NULL,
	travel_days_total INT NOT NULL
);
/* M-M relationship - t_bookmark table */
CREATE TABLE IF NOT EXISTS t_bookmark (
    user_id INT REFERENCES t_user (user_id) DEFERRABLE,
    plan_id INT,
    PRIMARY KEY (user_id , plan_id),
    FOREIGN KEY (plan_id) REFERENCES t_plan(plan_id) ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE
);", , ,"/* E1 t_user table insert */ insert into t_user (user_id, first_name, last_name, email, gender, age) values (1, 'Chane', 'Levesley', 'clevesley0@instagram.com', 'Male', 16);
insert into t_user (user_id, first_name, last_name, email, gender, age) values (2, 'Joe', 'Kemet', 'jkemet1@yandex.ru', 'Male', 53);
insert into t_user (user_id, first_name, last_name, email, gender, age) values (3, 'Rockie', 'Mazzilli', 'rmazzilli2@google.com', 'Male', 51);
 
/* E2 t_plan table insert */ insert into t_plan (plan_id, country_name, city_name, price_total, travel_days_total) values (1, 'China', 'Sancha', '¥3185.57', 3);
insert into t_plan (plan_id, country_name, city_name, price_total, travel_days_total) values (2, 'China', 'Liurenba', '¥2601.27', 1);
insert into t_plan (plan_id, country_name, city_name, price_total, travel_days_total) values (3, 'China', 'Daming', '¥2526.52', 2);", , ,"insert into t_bookmark select u.user_id, p.plan_id from t_user u cross join t_plan p where random() <=0.1 limit 1000;", , ,,,
A0218929N,/* The code is written for PostgreSQL */,"/*This is a goalkeeper database that allows football managers to keep track
and perform analysis on goalkeepers to recruit. The two entity tables are 
called goalkeepers and clubs. The relationship table is called 
games_played_for.
The goalkeepers table has a serial primary key and its attributes are 
first name, last name, birth date and t-shirt number.
The clubs table has club name as primary key because the league authorities
do not allow clubs to have same names. Its other attributes are city, date 
of formation and club value.
The games_played_for table records the game played by a goalkeeper for a
club. This is a very liberal football league that allows goalkeepers to
move around. So, there is a many-to-many relationship as goalkeepers can
play for multiple clubs, and each club may have multiple goalkeepers.
The primary key is a serial game ID. The attributes are goalkeeper involved, 
club played for, number of goals saved by goalkeeper, whether it was a home
or away game. 
*/", , ,"CREATE TABLE goalkeepers (
	goalkeeper_id SERIAL PRIMARY KEY,
	first_name VARCHAR(50) NOT NULL,
	last_name VARCHAR(50) NOT NULL,
	birth_date DATE NOT NULL,
	tshirt_number INT NOT NULL CHECK(tshirt_number BETWEEN 0 AND 100)
);
CREATE TABLE clubs (
	club_name VARCHAR(50) PRIMARY KEY,
	city VARCHAR(50) NOT NULL,
	date_of_formation DATE NOT NULL,
	club_value NUMERIC NOT NULL
);
CREATE TABLE games_played_for (
	game_id SERIAL PRIMARY KEY,
	club_name VARCHAR(50) NOT NULL,
	home_game BOOLEAN NOT NULL,
	goalkeeper_id INT NOT NULL,
	goals_saved INT NOT NULL CHECK(goals_saved >= 0),
	FOREIGN KEY (club_name) REFERENCES clubs(club_name),
	FOREIGN KEY (goalkeeper_id) REFERENCES goalkeepers(goalkeeper_id)
);", , ,"insert into goalkeepers (first_name, last_name, birth_date, tshirt_number) values ('Humbert', 'Dinse', '12/11/1989', 41);
insert into goalkeepers (first_name, last_name, birth_date, tshirt_number) values ('Alyss', 'Mouncey', '12/25/2002', 81);
insert into goalkeepers (first_name, last_name, birth_date, tshirt_number) values ('Julia', 'Kiff', '10/2/1993', 30);
 
insert into clubs (city, club_name, date_of_formation, club_value) values ('Cayambe', 'Cayambe Town', '10/22/1998', 252391073);
insert into clubs (city, club_name, date_of_formation, club_value) values ('Podgortsy', 'Podgortsy County', '1/18/1997', 861583797);
insert into clubs (city, club_name, date_of_formation, club_value) values ('Jiatou', 'Jiatou ﻿Athletic', '8/4/2009', 280272077);", , ,"INSERT INTO games_played_for (goalkeeper_id, club_name, home_game, goals_saved)
(SELECT 
	*, 
	random() > 0.5 AS home_game,
	floor(random() * 4)::int AS goals_saved
FROM (
	SELECT goalkeeper_id, club_name
	FROM goalkeepers, clubs
	ORDER BY random() LIMIT 1000
) as a);", , ,,,
A0218930E,/* The code is written for PostgreSQL */,"/*My example is about Grab/GoJerk Taxi application, which consist of three entity sets
1. customer, has customer_id, first_name, last_name, UNIQUE account_email, contact_number and payment
2. trip, has order_id, customer_id, driver_id
3. driver, has the driver_id, UNIQUE car_vin, car_model, first_name and last_name
*/", , ,"DROP DATABASE IF EXISTS project_1;
CREATE database project_1;
\c project_1;
DROP TABLE IF EXISTS trip;
DROP TABLE IF EXISTS customer;
DROP TABLE IF EXISTS driver;
CREATE TABLE IF NOT EXISTS customer (
  customer_id INT PRIMARY KEY,
  first_name VARCHAR(32) NOT NULL,
  last_name VARCHAR(32) NOT NULL,
  account_email VARCHAR(256) NOT NULL UNIQUE,
  contact_number VARCHAR(256) NOT NULL UNIQUE,
  payment VARCHAR(32)
);
CREATE TABLE IF NOT EXISTS driver (
  driver_id INT PRIMARY KEY,
  car_vin VARCHAR(256) NOT NULL UNIQUE,
  car_model VARCHAR(32) NOT NULL,
  first_name VARCHAR(32) NOT NULL,
  last_name VARCHAR(32) NOT NULL
);
CREATE TABLE IF NOT EXISTS trip (
  order_id INT,
  driver_id INT,
  customer_id INT,
  PRIMARY KEY (order_id, driver_id, customer_id),
  FOREIGN KEY (driver_id) REFERENCES driver(driver_id)
    ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
  FOREIGN KEY  (customer_id) REFERENCES customer(customer_id)
    ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED
);", , ,"/* CUSTOMER */ insert into customer (customer_id, first_name, last_name, account_email, contact_number, payment) values (1, 'Cristie', 'Ferriman', 'cferriman0@ed.gov', '(516) 3791658', 'switch');
insert into customer (customer_id, first_name, last_name, account_email, contact_number, payment) values (2, 'Ritchie', 'Guiraud', 'rguiraud1@wired.com', '(656) 5044696', 'maestro');
insert into customer (customer_id, first_name, last_name, account_email, contact_number, payment) values (3, 'Gale', 'Ferrier', 'gferrier2@canalblog.com', '(627) 6836642', 'jcb');
 
/* DRIVER */ insert into driver (driver_id, car_vin, car_model, first_name, last_name) values (1, 'KMHHT6KD5BU900932', 'Mustang', 'Joel', 'Micah');
insert into driver (driver_id, car_vin, car_model, first_name, last_name) values (2, '1D7RV1GP1BS777740', 'Cherokee', 'Georgeanne', 'Hardaker');
insert into driver (driver_id, car_vin, car_model, first_name, last_name) values (3, 'KL4CJESB5EB032860', 'Eclipse', 'Samson', 'Haslegrave');", , ,"/* I used the row_number to generate the distinct value of order_id since the combination of customer_id and driver_id
may have duplicate. */
INSERT INTO trip
SELECT  ROW_NUMBER() OVER (ORDER BY c.customer_id) AS order_id, c.customer_id, d.driver_id
FROM customer c
CROSS JOIN driver d
WHERE random() <= 0.1 LIMIT 1000;", , ,,,
A0218942Y,/* The code is written for PostgreSQL */,"/* instagram users can post many photos in their own accounts and they can also comment on other users' photos posted*/
/* hence, one photo can have many comments */
/* 1. table of instagram users that contain their usernames and emails */
/* 2. table of photos(in url) posted by the instagram users */
/* 3. table of comments posted by the instagram users on the photos */", , ,"CREATE TABLE users (
	id SERIAL PRIMARY KEY,
	username VARCHAR(50) NOT NULL,
	email VARCHAR(50) NOT NULL UNIQUE
);
CREATE TABLE photos (
	id SERIAL PRIMARY KEY,
	user_id INTEGER NOT NULL REFERENCES users(id),
	url VARCHAR(100) NOT NULL UNIQUE
);
CREATE TABLE comments (
	id SERIAL PRIMARY KEY,
	user_id INTEGER NOT NULL REFERENCES users(id),
	photo_id INTEGER NOT NULL REFERENCES photos(id),
	body VARCHAR(500) NOT NULL
);", , ,"INSERT INTO users (username, email) VALUES  ('aseaman0', 'hfarlowe0@dagondesign.com'),  ('kcoule1', 'lnelissen1@jugem.jp'),  ('akersey2', 'evoysey2@tiny.cc'),  ('fishaki3', 'dbisacre3@msu.edu'),  ('amcevay4', 'shambly4@hubpages.com'),  ('lnorrington5', 'lbudgeon5@google.ru'),  ('lmcveighty6', 'bpoacher6@statcounter.com'),  ('fgillmor7', 'roby7@businessinsider.com'),  ('nwharfe8', 'cfear8@ifeng.com'),  ('rloreit9', 'srudsdell9@usa.gov'),  ('dblondina', 'ggallaghera@dell.com'),  ('dcaskieb', 'cgallihawkb@salon.com'),  ('bdumberrillc', 'cshowalterc@ed.gov'),  ('ebiggsd', 'rdanaherd@discuz.net'),  ('kstaige', 'rblencoee@weibo.com'),  ('fhadleyf', 'ctearneyf@craigslist.org'),  ('aciabatterig', 'gmurdyg@moonfruit.com'),  ('mscraggh', 'elammash@facebook.com'),  ('mruckerti', 'jruggieroi@amazon.de'),  ('bkibelj', 'stwortj@sohu.com'),  ('kwiddowsk', 'tmartugink@etsy.com'),  ('ecollesl', 'alepiscopil@surveymonkey.com'),  ('rbemlottm', 'ochinnerym@comsenz.com'),  ('dfairbournn', 'cbrownriggn@typepad.com'),  ('bjurzyko', 'fwieldo@studiopress.com'),  ('wdavittip', 'reldersp@seattletimes.com'),  ('bgallehockq', 'sdeguiseq@netscape.com'),  ('ikristufekr', 'sglisenanr@google.co.jp'),  ('bwalworths', 'rkirtons@indiatimes.com'),  ('srevellt', 'brichardtt@rambler.ru'),  ('rruslingeu', 'yberksu@mapy.cz'),  ('tmussingtonv', 'jgonv@chicagotribune.com'),  ('ahendinw', 'hchadbournew@cafepress.com'),  ('eludewigx', 'kpurslowx@slideshare.net'),  ('kpetleyy', 'dleydony@ucla.edu'),  ('kdollarz', 'rmetzelz@ox.ac.uk'),  ('cfurze10', 'acunradi10@yelp.com'),  ('mdiehn11', 'jmucklestone11@vinaora.com'),  ('thurst12', 'afoskett12@auda.org.au'),  ('lstoodale13', 'mmanson13@jigsy.com'),  ('ocristoferi14', 'rbecarra14@businessinsider.com'),  ('kinnett15', 'spedrocco15@altervista.org'),  ('vreihill16', 'mconwell16@craigslist.org'),  ('cgalego17', 'rbelitz17@csmonitor.com'),  ('icouper18', 'ebuchanan18@addtoany.com'),  ('fmcgooch19', 'ecowser19@flickr.com'),  ('tackerley1a', 'fmargrem1a@virginia.edu'),  ('wgeake1b', 'zpattingson1b@arstechnica.com'),  ('ahinckley1c', 'ojupp1c@ebay.co.uk'),  ('mdomenichelli1d', 'jgarrat1d@psu.edu'),  ('hspink1e', 'caidler1e@cisco.com'),  ('gcoulsen1f', 'rgarratty1f@china.com.cn'),  ('bbetz1g', 'prope1g@ifeng.com'),  ('lyorkston1h', 'avennart1h@seesaa.net'),  ('erootham1i', 'akemster1i@sbwire.com'),  ('mwodham1j', 'cdikle1j@hao123.com'),  ('mbulter1k', 'acrumley1k@unicef.org'),  ('pconnock1l', 'hbustard1l@cdc.gov'),  ('rspringall1m', 'nkaygill1m@columbia.edu'),  ('ecouch1n', 'smarians1n@ocn.ne.jp'),  ('aheaphy1o', 'cludlem1o@soup.io'),  ('bhopkyns1p', 'kcayser1p@cnn.com'),  ('abevar1q', 'gsawkin1q@storify.com'),  ('bsetterfield1r', 'dshadbolt1r@hibu.com'),  ('bchapelhow1s', 'tandras1s@123-reg.co.uk'),  ('ewathan1t', 'mmarciskewski1t@mashable.com'),  ('cdeners1u', 'gmackimmie1u@yale.edu'),  ('clampet1v', 'vvanderhoven1v@go.com'),  ('jdaughtry1w', 'jidle1w@jugem.jp'),  ('fenderlein1x', 'gkorb1x@xinhuanet.com'),  ('amowson1y', 'alamberto1y@prlog.org'),  ('dspurret1z', 'lalldre1z@sfgate.com'),  ('ekeyzman20', 'jklulik20@posterous.com'),  ('aforesight21', 'kjones21@bluehost.com'),  ('hocorren22', 'syakhin22@1688.com'),  ('egowdy23', 'cbrandenburg23@army.mil'),  ('dusborn24', 'psnedden24@newsvine.com'),  ('clicciardo25', 'kstonier25@gnu.org'),  ('etramel26', 'lolexa26@reference.com'),  ('hfrancesch27', 'hbarwell27@homestead.com'),  ('onasi28', 'cluter28@tmall.com'),  ('jcareswell29', 'jlightwing29@nps.gov'),  ('mfarfalameev2a', 'gcallicott2a@businesswire.com'),  ('zdulany2b', 'mlyard2b@yandex.ru'),  ('cyelland2c', 'ffernando2c@t-online.de'),  ('jocloney2d', 'ewymer2d@nydailynews.com'),  ('mmynett2e', 'ltunnock2e@reverbnation.com'),  ('brenzo2f', 'lmutton2f@meetup.com'),  ('scarrane2g', 'paxup2g@slate.com'),  ('wtomankowski2h', 'shadcroft2h@ibm.com'),  ('clecount2i', 'jiskow2i@amazon.de'),  ('rpyle2j', 'tmowles2j@webs.com'),  ('ctomaszek2k', 'odundon2k@gmpg.org'),  ('pmacintyre2l', 'avallery2l@google.co.jp'),  ('rwingeat2m', 'gosbourne2m@abc.net.au'),  ('pduran2n', 'hstockman2n@vkontakte.ru'),  ('abotton2o', 'bgilvary2o@tinyurl.com'),  ('dpiscopiello2p', 'sleach2p@naver.com'),  ('mcannicott2q', 'cafield2q@newsvine.com'),  ('eduerden2r', 'jskilbeck2r@vkontakte.ru');
INSERT INTO photos (user_id, url) VALUES  (30, 'http://dummyimage.com/108x200.png/dddddd/000000'),  (32, 'http://dummyimage.com/152x200.png/dddddd/000456'),  (24, 'http://dummyimage.com/236x200.png/5fa2dd/ffffff'),  (13, 'http://dummyimage.com/126x200.png/dddddd/000000'),  (43, 'http://dummyimage.com/249x200.png/cc0000/ffffff'),  (25, 'http://dummyimage.com/214x200.png/ff4444/ffffff'),  (53, 'http://dummyimage.com/215x200.png/5fa2dd/000fff'),  (68, 'http://dummyimage.com/203x200.png/dddddd/000000'),  (15, 'http://dummyimage.com/101x200.png/ff4444/ffffff'),  (6, 'http://dummyimage.com/143x200.png/5fa2dd/000fff'),  (91, 'http://dummyimage.com/199x200.png/5fa2dd/ffffff'),  (42, 'http://dummyimage.com/245x200.png/dddddd/000000'),  (34, 'http://dummyimage.com/114x100.png/cc0000/ffffff'),  (58, 'http://dummyimage.com/103x100.png/5fa2dd/000fff'),  (37, 'http://dummyimage.com/131x100.png/dddddd/000000'),  (94, 'http://dummyimage.com/211x100.png/cc0000/ffffff'),  (36, 'http://dummyimage.com/179x100.png/5fa2dd/000fff'),  (11, 'http://dummyimage.com/155x100.png/ff4444/ffffff'),  (54, 'http://dummyimage.com/149x100.png/cc0000/ffffff'),  (24, 'http://dummyimage.com/112x100.png/ff4444/000fff'),  (84, 'http://dummyimage.com/183x100.png/cc0000/ffffff'),  (83, 'http://dummyimage.com/165x100.png/ff4444/000fff'),  (65, 'http://dummyimage.com/107x100.png/dddddd/000fff'),  (2, 'http://dummyimage.com/114x100.png/5fa2dd/ffffff'),  (14, 'http://dummyimage.com/216x100.png/dddddd/000fff'),  (6, 'http://dummyimage.com/213x100.png/ff4444/000fff'),  (100, 'http://dummyimage.com/240x100.png/dddddd/000000'),  (39, 'http://dummyimage.com/231x150.png/5fa2dd/ffffff'),  (27, 'http://dummyimage.com/113x150.png/5fa2dd/000fff'),  (84, 'http://dummyimage.com/117x150.png/cc0000/ffffff'),  (38, 'http://dummyimage.com/225x150.png/cc0000/000fff'),  (69, 'http://dummyimage.com/131x150.png/ff4444/ffffff'),  (7, 'http://dummyimage.com/171x150.png/ff4444/000fff'),  (76, 'http://dummyimage.com/109x150.png/cc0000/ffffff'),  (80, 'http://dummyimage.com/124x150.png/cc0000/fff000'),  (11, 'http://dummyimage.com/126x150.png/dddddd/000fff'),  (42, 'http://dummyimage.com/115x150.png/ff4444/ffffff'),  (24, 'http://dummyimage.com/126x150.png/dddddd/000000'),  (22, 'http://dummyimage.com/146x150.png/cc0000/ffffff'),  (35, 'http://dummyimage.com/142x150.png/ff4444/fff000'),  (26, 'http://dummyimage.com/213x150.png/5fa2dd/ffffff'),  (67, 'http://dummyimage.com/211x150.png/5fa2dd/fff000'),  (53, 'http://dummyimage.com/193x150.png/5fa2dd/ffffff'),  (40, 'http://dummyimage.com/144x150.png/5fa2dd/fff000'),  (96, 'http://dummyimage.com/108x150.png/5fa2dd/ffffff'),  (74, 'http://dummyimage.com/148x120.png/ff4444/fff000'),  (52, 'http://dummyimage.com/133x120.png/5fa2dd/ffffff'),  (29, 'http://dummyimage.com/201x120.png/cc0000/fff000'),  (11, 'http://dummyimage.com/116x120.png/5fa2dd/ffffff'),  (39, 'http://dummyimage.com/130x120.png/cc0000/fff000'),  (28, 'http://dummyimage.com/239x120.png/dddddd/123000'),  (82, 'http://dummyimage.com/118x120.png/5fa2dd/ffffff'),  (32, 'http://dummyimage.com/122x120.png/5fa2dd/123000'),  (5, 'http://dummyimage.com/172x120.png/5fa2dd/ffffff'),  (22, 'http://dummyimage.com/243x120.png/cc0000/123000'),  (97, 'http://dummyimage.com/235x120.png/dddddd/000000'),  (83, 'http://dummyimage.com/223x120.png/dddddd/123000'),  (36, 'http://dummyimage.com/140x120.png/ff4444/ffffff'),  (85, 'http://dummyimage.com/108x120.png/ff4444/123000'),  (80, 'http://dummyimage.com/235x120.png/cc0000/ffffff'),  (86, 'http://dummyimage.com/140x120.png/5fa2dd/123000'),  (2, 'http://dummyimage.com/124x120.png/dddddd/000000'),  (87, 'http://dummyimage.com/176x120.png/5fa2dd/ffffff'),  (85, 'http://dummyimage.com/217x120.png/dddddd/123000'),  (63, 'http://dummyimage.com/202x120.png/dddddd/000000'),  (87, 'http://dummyimage.com/176x120.png/cc0000/ffffff'),  (88, 'http://dummyimage.com/243x120.png/dddddd/123000'),  (33, 'http://dummyimage.com/200x120.png/dddddd/000000'),  (73, 'http://dummyimage.com/103x120.png/ff4444/ffffff'),  (56, 'http://dummyimage.com/221x120.png/ff4444/123456'),  (81, 'http://dummyimage.com/179x120.png/ff4444/ffffff'),  (20, 'http://dummyimage.com/139x120.png/5fa2dd/ffffff'),  (38, 'http://dummyimage.com/157x120.png/cc0000/123456'),  (10, 'http://dummyimage.com/210x120.png/5fa2dd/ffffff'),  (32, 'http://dummyimage.com/209x120.png/ff4444/ffffff'),  (18, 'http://dummyimage.com/149x120.png/dddddd/123456'),  (36, 'http://dummyimage.com/144x120.png/dddddd/000000'),  (83, 'http://dummyimage.com/113x120.png/ff4444/ffffff'),  (97, 'http://dummyimage.com/123x120.png/5fa2dd/123456'),  (56, 'http://dummyimage.com/132x120.png/cc0000/ffffff'),  (50, 'http://dummyimage.com/120x120.png/5fa2dd/123456'),  (25, 'http://dummyimage.com/126x120.png/dddddd/000000'),  (66, 'http://dummyimage.com/106x120.png/cc0000/ffffff'),  (41, 'http://dummyimage.com/177x110.png/5fa2dd/123456'),  (25, 'http://dummyimage.com/115x110.png/dddddd/000000'),  (71, 'http://dummyimage.com/114x110.png/5fa2dd/123456'),  (46, 'http://dummyimage.com/141x110.png/5fa2dd/ffffff'),  (29, 'http://dummyimage.com/185x110.png/5fa2dd/123456'),  (55, 'http://dummyimage.com/164x110.png/5fa2dd/ffffff'),  (38, 'http://dummyimage.com/141x110.png/5fa2dd/000fff'),  (95, 'http://dummyimage.com/148x110.png/5fa2dd/ffffff'),  (52, 'http://dummyimage.com/233x110.png/5fa2dd/gggfff'),  (92, 'http://dummyimage.com/152x110.png/dddddd/000000'),  (9, 'http://dummyimage.com/167x110.png/dddddd/gggfff'),  (90, 'http://dummyimage.com/202x110.png/ff4444/ffffff'),  (50, 'http://dummyimage.com/226x110.png/5fa2dd/ffffff'),  (27, 'http://dummyimage.com/185x110.png/cc0000/000fff'),  (63, 'http://dummyimage.com/122x110.png/5fa2dd/ffffff'),  (28, 'http://dummyimage.com/189x110.png/cc0000/gggfff'),  (10, 'http://dummyimage.com/104x110.png/ff4444/ffffff');
;
 ", , ,"INSERT INTO comments (user_id, photo_id, body)
WITH expanded AS (
	SELECT RANDOM(), seq, u.id AS user_id, p.id AS photo_id
	FROM GENERATE_SERIES(1,1000) seq, users u, photos p
), shuffled AS (
	SELECT e.*
	FROM expanded e
	INNER JOIN (
		SELECT ei.seq, MIN(ei.random) FROM expanded ei GROUP BY ei.seq
	) em ON (e.seq = em.seq AND e.random = em.min)
	ORDER BY e.seq
)
SELECT
	s.user_id,
	s.photo_id,
	'Comments ABCD ' || s.seq AS body
FROM shuffled s;
SELECT * FROM comments LIMIT 1000;", , ,,,
A0218949L,/* The code is written for PostgreSQL */,"/*I want to study the relationship between a person's job and the type of stocks (in sectors) one holds in the portfolio.
Therefore, the contents of the three tables are as follows:
	+ The entity set E1 will be person. Person contains information like first and last name, gender, email, city, country, company, department and job title.
	  The rationale of having the above mentioned information is to uniquely identify individuals. They are also assigned an identification number (id), which takes the serial data type.
	  In addition, factors like age, gender, job title, department, city and company could affect the portfolio breakdown of an individual and are thus included in person.
		All columns are to be non-null. Gender here is binary (M or F) so there is a check to ensure that all values are either 'M' or 'F' to ensure data integrity.
	  The header of E1 would look like, with the primary key id:
	.________________________________________________________________________________________________________.
	|												person 													 |
	.____.____________.___________.________._____._______.______._________._________.____________.___________.
	| id | first_name | last_name | gender | dob | email | city | country | company | department | job_title |
	.____.____________.___________.________._____._______.______._________._________.____________.___________.
	+ The entity set E2 will be stocks. This contains information on stocks in the market, with information like stock code, stock name, stock industry and stock sector.
	  We note that the stock name is unique to each stock code. In fact, each row of the table must be unique.
	  Stock sector and stock industries are non-unique but there is a one-to-one relationship between the stock code and sector or industry.
	  We have the primary key (stock_code, stock_name) and foreign key stock_code. The primary key is strictly unique and not null.
	  The header of E2 will resemble:
	._______________________________________.
	| 			  	  stocks				|
	.____________.______.________.__________.
	| stock_code | name | sector | industry |
	.____________.______.________.__________.
	+ Finally, the relationship set R is trades. The entity-relationship would then be person-trades-stocks.
	  trades will contain the id referencing the id in person, stock code and portfolio_value.
	  There can be multiple rows with the same id, but different stock code.
	.___________________________________.
	| 				trades				|
	.____.____________._________________.
	| id | stock_code | portfolio_value |
	.____.____________._________________.
	Here, it is not necessary to check for portfolio value > 0 because portfolio values can be negative as well. Since trades is representative of the total portfolio value per stock per person,
	there is a unique constraint on the composite pair of id and stock_code to ensure data integrity. Similarly, this is reflected when generating random data for the relationship set.
	I generated 5000 random samples and summed the portfolio value by grouping the data by id and stock_code before taking the top 1000 rows to generate 1000 rows for the table.
	In trades, id references the id in person and stock_code references stock_code in stocks. Since we want any changes in person or stocks to be reflected in trades,
	I added deferrable update and delete cascades to propogate the changes after the end of each transaction.
Together, the entity-relationship is able to generate interesting insights on the whether a person's job or company's sector affects the industries or sectors of one's stock portfolio.
The assumption here is that the people in person trade in the stock market.
*/", , ,"DROP TABLE IF EXISTS trades;
DROP TABLE IF EXISTS person;
DROP TABLE IF EXISTS stocks;
CREATE TABLE IF NOT EXISTS person (
  id SERIAL PRIMARY KEY, 
  first_name VARCHAR(64) NOT NULL, 
  last_name VARCHAR(64) NOT NULL, 
  gender CHAR(1) NOT NULL CHECK(
    gender = 'M' 
    OR gender = 'F'), 
  dob DATE NOT NULL, 
  email VARCHAR(64) UNIQUE NOT NULL, 
  city VARCHAR(32) NOT NULL, 
  country VARCHAR(32) NOT NULL, 
  company VARCHAR(64) NOT NULL, 
  department VARCHAR(64) NOT NULL, 
  job VARCHAR(64) NOT NULL);
CREATE TABLE IF NOT EXISTS stocks (
  stock_code VARCHAR(16) UNIQUE NOT NULL, 
  name VARCHAR(64) UNIQUE NOT NULL, 
  sector VARCHAR(64) NOT NULL, 
  industry VARCHAR(64) NOT NULL, 
  PRIMARY KEY (stock_code, name));
CREATE TABLE IF NOT EXISTS trades (
  id INT REFERENCES person(id) ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE, 
  stock_code VARCHAR(16) NOT NULL REFERENCES stocks(stock_code) ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE, 
  portfolio_value DEC(10, 2) NOT NULL, 
  PRIMARY KEY (id, stock_code));", , ,"/* Populating person - 100 rows */ INSERT INTO person (id, first_name, last_name, gender, dob, email, city, country, company, department, job) VALUES (1, 'Blayne', 'Lorkings', 'M', '1961-10-15', 'blorkings0@last.fm', 'Atawutung', 'Indonesia', 'Thoughtbridge', 'Legal', 'Compensation Analyst');
INSERT INTO person (id, first_name, last_name, gender, dob, email, city, country, company, department, job) VALUES (2, 'Lara', 'Burghall', 'F', '1985-12-25', 'lburghall1@ifeng.com', 'Kokembang', 'Indonesia', 'Feedmix', 'Business Development', 'Senior Sales Associate');
INSERT INTO person (id, first_name, last_name, gender, dob, email, city, country, company, department, job) VALUES (3, 'Hadlee', 'Mahedy', 'M', '1942-11-05', 'hmahedy2@trellian.com', 'Um Jar Al Gharbiyya', 'Sudan', 'Meemm', 'Accounting', 'Chief Design Engineer');
 
/* Populating stocks - 100 rows */ INSERT INTO stocks (stock_code, name, sector, industry) VALUES ('TGTX', 'TG Therapeutics, Inc.', 'Health Care', 'Major Pharmaceuticals');
INSERT INTO stocks (stock_code, name, sector, industry) VALUES ('BSAC', 'Banco Santander Chile', 'Finance', 'Commercial Banks');
INSERT INTO stocks (stock_code, name, sector, industry) VALUES ('MDP', 'Meredith Corporation', 'Consumer Services', 'Newspapers/Magazines');", , ,"INSERT INTO trades (id, stock_code, portfolio_value) 
SELECT * 
FROM (
	SELECT generate_series AS id, 
		   stock_code, 
		   floor(random() * 1000000 + random())/ 100 AS portfolio_value 
	FROM generate_series(1, 100) 
		CROSS JOIN (
			SELECT DISTINCT stock_code 
			FROM stocks
		) stock_symbols 
	) insert_tab
ORDER BY random()
LIMIT 1000;", , ,,,
A0218954U,/* The code is written for PostgreSQL */,"/*My chosen example is an online wine shop. The shop sells many different kind of fine wine from various countries 
and customers can choose to subscribe to their email newsletter to receive news about the wine products. 
Entity set E1 is customers (customers who subscribed to the newsletter), entity set E2 is products (types of wine
the shop sells) and the many-to-many relationship set R is transactions (associating the email of a customer to
the type of wine and quantity they have purchased).  
Below are the details of the 3 tables. 
Table 1 (Customers):
-Customer_name (not null)
-Email (primary key)
-Age (not null and check constraint as customers must be 18 years old or above to sign up)
Table 2 (Products):
-LWIN (Primary key) (similar to ISBN for books, LWIN is a 7 digit unique identifier for fine wine)
-Country (not null) (country which the wine is from)  
-Price (not null and check constraint as price must be more than 0)
Table 3 (Transactions): 
-Transaction ID (primary key)
-Email (foreign key which references customer's email from customers table)
-LWIN (foreign key which references lwin from products table)
-Quantity (not null and check constraint as quantity must be more than 0)
The code will be written in PostgreSQL.
*/", , ,"CREATE TABLE customers (
  customer_name VARCHAR(64) NOT NULL, 
  email VARCHAR(64) PRIMARY KEY, 
  age NUMERIC NOT NULL CHECK (age > 17)
);
CREATE TABLE products (
  lwin NUMERIC PRIMARY KEY, 
  country VARCHAR(64) NOT NULL, 
  price NUMERIC NOT NULL CHECK (price > 0)
);
CREATE TABLE transactions (
  transaction_id SERIAL PRIMARY KEY, 
  email VARCHAR(64) REFERENCES customers (email), 
  lwin NUMERIC REFERENCES products (lwin),
  quantity NUMERIC NOT NULL CHECK (quantity>0)
);", , ,"INSERT INTO customers (customer_name, email, age) VALUES ('Germaine', 'gpikesley0@twitter.com', 81);
INSERT INTO customers (customer_name, email, age) VALUES ('Hephzibah', 'hgosland1@posterous.com', 78);
INSERT INTO customers (customer_name, email, age) VALUES ('Shay', 'sfantini2@trellian.com', 78);
 
INSERT INTO products (lwin, country, price) VALUES (7732768, 'Russia', 4500);
INSERT INTO products (lwin, country, price) VALUES (3503629, 'France', 4500);
INSERT INTO products (lwin, country, price) VALUES (5519823, 'Russia', 550);", , ,"INSERT INTO transactions (email, lwin, quantity) 
SELECT 
  c.email, 
  p.lwin,
  CAST (random()*(20-1+1)+1 as INT)
FROM 
  customers c, 
  products p 
ORDER BY 
  random () 
LIMIT 
  1000;
/*Note: for the purpose of this question, will set quantity to be a random number between 1-20*/
", , ,,,
A0218968J,/* The code is written for PostgreSQL */,"/*CASE DESCRIPTION:
Buyers and Sellers of properties want to be well-versed with agents and agencies avialble
in the market for providing assistance in real estate/property transactions. 
My company, Housing Estate Pvt Ltd, identifies this demand as Data as a Service(DaaS) opportunity. 
We provide UK Real Estate Residential Transactions data as a service. 
For all 4 states of UK, we record information about real estate individual agents, 
real estate agencies and property transactions they have performed, in collaboration, 
over the past 25 years. 
As per UK law, individual real estate agents/brokers do not require a license for 
facilitating real estate transactions. Mostly, individual agents/brokers collaborate with 
real estate agencies for acquiring clients and facilitating property transactions. 
The commission is split between the agents and the agencies on a successful transaction.
For each agent, the database records the name, email, phone number(UK based +44), 
state in which the agent resides(among the 4 states of UK namely - 
England, Wales, Northern Ireland, Scotland). 
Each agent is identified by their email in the system. 
The specialization of the agent in either Commercial or Residential sector is also recorded.
(Mockaroo link to Schema: https://mockaroo.com/7dc18f80)
For each agency, the database records the agency name, company registration number, 
email, phone number(UK based +44), street address, state and website. 
Each agency is identified by their registration_number(unique ID obtained from the 
Companies House UK: https://www.gov.uk/limited-company-formation/register-your-company).
(Mockaroo link to Schema: https://mockaroo.com/7720f300)
For each residential transaction, the database records transaction unique identifier(
generated using MD5 Hash Function), date of transfer (ranging over the last 25 years 
from current date_time) and maps the collaboration between agent and 
agencies involved in the transaction.
REFERENCES:
1. UK Firms/Agencies Database: https://www.rdmarketing.co.uk/post/2018/07/25/uk-estate-agents-database
2. UK Residential Transaction Database:  https://www.gov.uk/guidance/about-the-price-paid-data#explanations-of-column-headers-in-the-ppd
*/", , ,"CREATE TABLE IF NOT EXISTS agents(
 name VARCHAR(64) NOT NULL,
 email VARCHAR(64) PRIMARY KEY,
 phone VARCHAR(50) UNIQUE NOT NULL,
 specialization VARCHAR(20) NOT NULL CONSTRAINT specialization CHECK(specialization = 'Residential' OR specialization = 'Commercial'),
 state VARCHAR(64) NOT NULL
);
CREATE TABLE IF NOT EXISTS agencies(
 agency_name VARCHAR(50) NOT NULL,
 registration_number VARCHAR(50) PRIMARY KEY,
 email VARCHAR(50) UNIQUE NOT NULL,
 phone VARCHAR(50) NOT NULL,
 address VARCHAR(50) NOT NULL,
 state VARCHAR(50) NOT NULL,
 website VARCHAR(50) NOT NULL
);
CREATE TABLE IF NOT EXISTS transactions(
 transaction_UID VARCHAR(64) PRIMARY KEY,
 date_of_transfer DATE NOT NULL,
 agent_email VARCHAR(64) REFERENCES agents(email) ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
 agency_registration_number VARCHAR(50) NOT NULL,
 FOREIGN KEY (agency_registration_number) REFERENCES agencies(registration_number) ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED
);", , ,"/* Agents Table Insert statements generated from mockaroo.com           */ /* https://mockaroo.com/7dc18f80                                        */ /*                                                                      */ /************************************************************************/ INSERT INTO agents (name, phone, email, specialization, state) VALUES ('Jorey Giraudeau', '+44 5560 049500', 'jgiraudeau0@bing.com', 'Commercial', 'England');
INSERT INTO agents (name, phone, email, specialization, state) VALUES ('Web Olivella', '+44 5031 896708', 'wolivella1@unblog.fr', 'Residential', 'England');
INSERT INTO agents (name, phone, email, specialization, state) VALUES ('Thomasa Vink', '+44 2626 365553', 'tvink2@elegantthemes.com', 'Commercial', 'England');
 
/************************************************************************/ /*                                                                      */ /* Agencies Table Insert statements generated from mockaroo.com         */ /* https://mockaroo.com/7720f300                                        */ /*                                                                      */ /************************************************************************/ INSERT INTO agencies (agency_name, registration_number, email, phone, address, state, website) VALUES ('Kozey LLC', '81-953-8842', 'aarlott0@mit.edu', '+44 3565 930890', '66892 Lindbergh Place', 'Scotland', 'google.ru');
INSERT INTO agencies (agency_name, registration_number, email, phone, address, state, website) VALUES ('Wunsch, Haley and Lubowitz', '84-710-7244', 'jgundrey1@wisc.edu', '+44 4856 330541', '72621 Gina Plaza', 'England', 'wikipedia.org');
INSERT INTO agencies (agency_name, registration_number, email, phone, address, state, website) VALUES ('Leffler, Hamill and Runolfsdottir', '96-886-2827', 'cbarrs2@hubpages.com', '+44 3228 907677', '6 Nancy Plaza', 'Scotland', 'shop-pro.jp');", , ,"INSERT INTO TRANSACTIONS (
    transaction_uid, date_of_transfer, 
    agent_email, agency_registration_number)
SELECT MD5( random()::text ) AS transaction_uid,
       NOW() - (random() * (interval '25 years')) AS date_of_transfer,
       agents.email AS agent_email,
       agencies.registration_number AS agency_registration_number
FROM agents,
     agencies
ORDER BY random()
LIMIT 1000;", , ,,,
A0231847B,/* The code is written for PostgreSQL */,"/* Company A is an online survey company based in Singapore, specializing in conducting online surveys
with physicians in Singapore for its clients including pharmaceutical and medical device companies, etc.
Company A has an online panel with physicians who have signed up to the panel previously. Also company A keeps 
records of all the surveys it has completed or is still ongoing.
Company A wants to manage its physician and survey data more efficiently, and also hopes to analyse physicians'
participation in the surveys. Thus, the followings have been developed:
Entity set E1 is set as physicians. Table E1 contains all the important information about physicians such as first name,
last name, physicianID, specialty, sector, organization name, email, years of experience.
Entity set E2 is set as surveys. Table E2 consists of information such as survey name, wave number (i.e. default is 1. 
When a survey is repeated for 2nd time, wave # would be assigned as 2), client name, therapy area, revenue, project 
status (i.e. ongoing, completed).
Relation set R is set as participation.Table R captures information about physicians' participation in surveys by 
associating physicianID with survey name & wave number. This helps us to track the participation rate of individual 
physician in the panel. */", , ,"CREATE TABLE IF NOT EXISTS physicians (
  first_name VARCHAR(64) NOT NULL, 
  last_name VARCHAR(64) NOT NULL, 
  physicianID VARCHAR(16) PRIMARY KEY, 
  specialty VARCHAR(64) NOT NULL, 
  sector VARCHAR (16) NOT NULL, 
  email VARCHAR(64) UNIQUE NOT NULL, 
  organization VARCHAR(64) NOT NULL, 
  experience_since DATE NOT NULL
);
CREATE TABLE IF NOT EXISTS surveys (
  survey_name VARCHAR(64) NOT NULL, 
  wave INT NOT NULL CHECK (wave > 0), 
  client_name VARCHAR(128) NOT NULL, 
  therapy_area VARCHAR (64) NOT NULL, 
  revenue NUMERIC NOT NULL CHECK (revenue > 0), 
  status VARCHAR (10) CONSTRAINT status CHECK (
    status = 'ongoing' 
    OR status = 'completed'
  ), 
  PRIMARY KEY (survey_name, wave)
);
CREATE TABLE participation(
  physicianID VARCHAR(16) REFERENCES physicians(physicianID) ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED, 
  survey_name VARCHAR(64), 
  wave INT, 
  PRIMARY KEY (physicianID, survey_name, wave), 
  FOREIGN KEY (survey_name, wave) REFERENCES surveys(survey_name, wave) ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED
);", , ,"Populate the physicians table ****************************/ insert into physicians (first_name, last_name, physicianID, specialty, sector, organization, email, experience_since) values ('Natassia', 'Stuckford', 'nstuckford0', 'Radiologist', 'Private', 'Koss LLC hospital', 'nstuckford0@fc2.com', '2008/11/10');
insert into physicians (first_name, last_name, physicianID, specialty, sector, organization, email, experience_since) values ('Warner', 'O''Brollachain', 'wobrollachain1', 'Dermatologist', 'Public', 'Langworth LLC hospital', 'wobrollachain1@4shared.com', '1994/10/06');
insert into physicians (first_name, last_name, physicianID, specialty, sector, organization, email, experience_since) values ('Lorie', 'Stitfall', 'lstitfall2', 'Family physician/General practioner', 'Public', 'Breitenberg, Murray and Quitzon hospital', 'lstitfall2@accuweather.com', '2009/08/31');
 
/***************************   Populate the surveys table ****************************/ insert into surveys (survey_name, wave, client_name, therapy_area, revenue, status) values ('Tampflex study', 19, 'Gilead Sciences, Inc.', 'Hematology', 360369.95, 'ongoing');
insert into surveys (survey_name, wave, client_name, therapy_area, revenue, status) values ('Pannier study', 4, 'Preferred Pharmaceuticals, Inc', 'Rheumatology', 360932.22, 'ongoing');
insert into surveys (survey_name, wave, client_name, therapy_area, revenue, status) values ('Vagram study', 10, 'Insight Pharmaceuticals', 'Rheumatology', 297936.52, 'ongoing');", , ,"INSERT INTO participation
SELECT physicianID, survey_name, wave FROM physicians, surveys ORDER BY RANDOM() LIMIT 1000;", , ,,,
A0231849X,/* The code is written for PostgreSQL */,"/*My example is about the covid-19 patients path tracing. One of the entity is the Patients infected by covid-19 in UK.
Another entity is the different place location in UK. So, the relationship is where the patients have been in UK.
Because in reality, once someone get infected by covid-19, people around him/her may be infected too. To trace the track of
these patients can help to find the people with higher potiential risk of being infected. At first we should find where and when
the patients have been. And then we can check who have also been to these place at the same time as the patients. So, my example
is about tracing the patients path.
And because from the mockaroo.com I found the NHS number, which is a identification number of people in UK, this content is set
to be in UK and the NHS number can be a primary key. For the patient, I have to specify its infected date. For the palce in UK,
I have to list the 
The following questions are written for PostgreSQL.
*/", , ,"Create table if not exists covid19_patients(NHS_number varchar(64) PRIMARY KEY,
											first_name  varchar(64),
											last_name  varchar(64),
											gender  varchar(64), 
											contact_number  varchar(64), 
											email  varchar(64), 
											Infected_date  date);
Create table if not exists UK_place(Country varchar(64),
								City varchar(64), 
								Street_name varchar(64), 
								Street_number varchar(64), 
								Postal_code varchar(64),
								Place_contact_number varchar(64) Primary Key);
Create table if not exists Patient_Path(NHS_number Varchar(64) REFERENCES covid19_patients (NHS_number),
										Place_contact_number varchar(64) References UK_place (Place_contact_number),
										Path_date date
									   );", , ,"insert into covid19_patients (NHS_number, first_name, last_name, gender, contact_number, email, Infected_date) values ('8657855623', 'Olly', 'Sheavills', 'Non-binary', '+358 (867) 746-5921', 'osheavills0@amazon.co.uk', '8/20/2021');
insert into covid19_patients (NHS_number, first_name, last_name, gender, contact_number, email, Infected_date) values ('7045221711', 'Marshall', 'Stone', 'Genderfluid', '+389 (947) 504-1909', 'mstone1@fc2.com', '8/15/2021');
insert into covid19_patients (NHS_number, first_name, last_name, gender, contact_number, email, Infected_date) values ('5943943382', 'Holly', 'Kmicicki', 'Male', '+7 (824) 140-8829', 'hkmicicki2@boston.com', '8/17/2021');
 
insert into UK_place (Country, City, Street_name, Street_number, Postal_code, Place_contact_number) values ('United Kingdom', 'Swindon', 'Namekagon', '54708', 'SN1', '+44 (928) 910-3195');
insert into UK_place (Country, City, Street_name, Street_number, Postal_code, Place_contact_number) values ('United Kingdom', 'Edinburgh', 'Lunder', '3', 'EH9', '+44 (128) 910-2930');
insert into UK_place (Country, City, Street_name, Street_number, Postal_code, Place_contact_number) values ('United Kingdom', 'Sheffield', 'David', '3679', 'S33', '+44 (837) 796-7864');", , ,"do $$
declare 
   counter integer := 0;
begin
	while counter < 1000 loop
		insert into Patient_Path values(
		(SELECT NHS_number FROM covid19_patients ORDER BY random() LIMIT 1),
		(SELECT Place_contact_number FROM UK_place ORDER BY random() LIMIT 1),
		(SELECT current_date - floor((random() * 30))::int rand_date));
		counter := counter + 1;
	end loop;
end$$;", , ,,,
A0231850M,/* The code is written for PostgreSQL */,"/* I choose the entity set E1 to be person, the entity set	E2 to be movie,
and the relation set R to be watched. E1 has three attributes, full_name,
email, and gender. E2 has five attributes, movie_id, title, director, genre and release_time.
R associating the emails of persons to the id of the movie they have watched.
*/", , ,"CREATE TABLE person (
	full_name VARCHAR(64),
	email VARCHAR(64) PRIMARY KEY,
	gender VARCHAR(32));
CREATE TABLE movie (
	movie_id VARCHAR(32) PRIMARY KEY,
	title VARCHAR(255) NOT NULL,
	director VARCHAR(64),
	genre VARCHAR(64),
	release_time VARCHAR(32));
CREATE TABLE watched (
	email VARCHAR(64) REFERENCES person (email),
	movie_id VARCHAR(32) REFERENCES movie (movie_id));", , ,"insert into person (full_name, email, gender) values ('Ida Talbot', 'italbot0@shop-pro.jp', 'Male');
insert into person (full_name, email, gender) values ('Binny Gallyon', 'bgallyon1@google.it', 'Male');
insert into person (full_name, email, gender) values ('Rutger Stapford', 'rstapford2@de.vu', 'Female');
 
insert into movie (movie_id, title, director, genre, release_time) values (1, 'Trigun: Badlands Rumble', 'Zola Gobat', 'Action|Animation|Sci-Fi|Western', '3/13/2016');
insert into movie (movie_id, title, director, genre, release_time) values (2, 'Die, Monster, Die!', 'Sher Rattrie', 'Horror|Mystery|Sci-Fi', '2/21/1996');
insert into movie (movie_id, title, director, genre, release_time) values (3, 'Bellissima', 'Olag O''Halleghane', 'Drama', '10/31/1998');", , ,"INSERT INTO watched
SELECT email, movie_id FROM person, movie ORDER BY RANDOM() LIMIT 1000;", , ,,,
A0231851L,/* The code is written for PostgreSQL */,"/*The first table is called Membership, used to record information of members of a club store such as Sam's Club. 
	It includes ID, name, phone, email, address, gender, dob, and reward points in total.
The second table is called Items, containing details of items in the store,
	including No, name, expiration date, price and reward points.
The third table is called Buy, giving information that someone bought something.
	This kind of table may be useful at the cashier.
Written for Postgre SQL 13
*/", , ,"create table membership (
	membership_id VARCHAR(50) PRIMARY KEY,
	first_name VARCHAR(50) NOT NULL,
	last_name VARCHAR(50) NOT NULL,
	gender VARCHAR(10),
	dob DATE NOT NULL,
	email VARCHAR(50),
	phone VARCHAR(50) NOT NULL,
	address VARCHAR(50),
	reward_points FLOAT DEFAULT 0 CHECK(Reward_Points>=0)
);
create table Items (
	Item_No VARCHAR(50) PRIMARY KEY,
	Item_Name VARCHAR(50) NOT NULL,
	Expiration_Date DATE NOT NULL,
	Price FLOAT NOT NULL CHECK(Price>0),
	Reward_Points FLOAT
);
create table Buy(
	someone VARCHAR(50) REFERENCES Membership(Membership_ID),
	something VARCHAR(50) REFERENCES Items(Item_No)
);", , ,"insert into membership (membership_id, first_name, last_name, gender, dob, email, phone, address) values ('021-769-041', 'Morrie', 'Gouch', 'Female', '1967-09-23', 'mgouch0@marriott.com', '(231) 6847130', '2747 Harbort Circle');
insert into Membership (membership_id, first_name, last_name, gender, dob, email, phone, address) values ('669-899-343', 'Lorens', 'Novakovic', 'Female', '1970-11-26', 'lnovakovic1@blinklist.com', '(439) 7692121', '804 Beilfuss Parkway');
insert into Membership (membership_id, first_name, last_name, gender, dob, email, phone, address) values ('514-131-834', 'Paulita', 'Brunsdon', 'Female', '1995-04-10', 'pbrunsdon2@weibo.com', '(247) 5638702', '33778 Susan Center');
 
insert into Items (item_no, item_name, expiration_date, price, reward_points) values ('24-8646', 'Fork - Plastic', '2021-09-01', 4.4, 0.044);
insert into Items (item_no, item_name, expiration_date, price, reward_points) values ('05-2660', 'Easy Off Oven Cleaner', '2021-09-13', 10.0, 0.1);
insert into Items (item_no, item_name, expiration_date, price, reward_points) values ('18-6627', 'Mushroom - Portebello', '2021-08-25', 11.3, 0.113);", , ,"create view view1 as select membership_id from membership;
create view view2 as select Item_No from Items;
insert into Buy(someone, something)
select * from view1 cross join view2 order by random() limit 1000;
select * from buy
/*I tried to add a function that everytime a member check out, his/her reward points changes accordingly. 
But I didn't figure out how to make it. So columns such as Reward Points may seem redundant.*/", , ,,,
A0231854E,/* The code is written for PostgreSQL. */,"/* The content of the three tables is first, a buyers table (entity set E1), containing 
buyer information such as buyer ID, gender, e-mail, and their credit card type (if 
they used credit card when making the purchase). The other table, cars (entity set E2),
is a table containing car purchased information related information including model, 
color, and price. The many-to-many relationship set R, table name preferences, associates 
the buyers' ID with their purchased car model and color. This table seems like it could 
be used in attempt to examine buyers' preferences in terms of car models and colors.

The following questions are written for PostgreSQL.
*/", , ,"CREATE TABLE IF NOT EXISTS buyers (
	buyerid VARCHAR(64) PRIMARY KEY,
	gender VARCHAR(16) NOT NULL,
	email VARCHAR(64) UNIQUE NOT NULL,
	card VARCHAR(50) 
);
CREATE TABLE IF NOT EXISTS cars (
	model VARCHAR(64) NOT NULL,
	color VARCHAR(64) NOT NULL,
	price VARCHAR(64) NOT NULL,
	primary key (model, color)
);
CREATE TABLE IF NOT EXISTS preferences (
	buyerid VARCHAR(64) REFERENCES buyers(buyerid),
	model VARCHAR(64),
	color VARCHAR(64),
	PRIMARY KEY (buyerid, model, color),
	FOREIGN KEY (model, color) REFERENCES cars(model, color)
);", , ,"/*POPULATE THE NAMES TABLE*/ insert into buyers (buyerid, gender, email, card) values ('tkeig0', 'Agender', 'abothen0@ucoz.com', null);
insert into buyers (buyerid, gender, email, card) values ('fsigg1', 'Bigender', 'cscotchford1@gravatar.com', 'americanexpress');
insert into buyers (buyerid, gender, email, card) values ('hglavis2', 'Female', 'gollivierre2@answers.com', null);
 
insert into cars (model, color, price) values ('Azera', 'Goldenrod', '$99432.10');
insert into cars (model, color, price) values ('F250', 'Teal', '$65845.94');
insert into cars (model, color, price) values ('Explorer Sport Trac', 'Blue', '$156460.44');", , ,"INSERT INTO preferences
SELECT a.buyerid, b.model, b.color
FROM buyers a, cars b
order by random()
limit 1000;", , ,,,
A0231856B,/* The code is written for PostgreSQL */,"/*In recent days, telecom fraud is rampant globally. One of the police offices have
gathered recent data of telecom fraud, especially from victims who always fall into the scam trap.
1)We got the first table to store victims' information, including their phone number,
name, ID number, country, date of birth, etc. The primary key is ID number,
which means this table only stores unique victims' information.
2)The second table is for the suspects, including their real phone number,
fake phone number, name, country, whether a recidivist or not, etc. Most suspects
won't confess, therefore we don't have much personal information. So the
primary key is a combination of their fake phone numbers and real phone numbers.
3)The relation of these two tables is captured by every scam, we could see from the table
""mapping"", which actually acts as a big map of victims' and suspects' phone numbers,
that some victims repeatedly received fraudulent calls, and some suspects made calls
to many different victims. Through this mapping, we are able to extract clues about
whether a suspect is a perpetrator or not, also the severity of telecom fraud of
these victims.
*The codes are written for PostgreSQL
*/", , ,"CREATE TABLE IF NOT EXISTS victims (
 first_name VARCHAR(64) NOT NULL,
 last_name VARCHAR(64) NOT NULL,
 phone VARCHAR(64) UNIQUE NOT NULL,
 id VARCHAR(64) PRIMARY KEY NOT NULL,
 dob DATE NOT NULL,
 country VARCHAR(64) NOT NULL,
 card VARCHAR(64) NOT NULL
);
CREATE TABLE IF NOT EXISTS suspects(
 first_name VARCHAR(64) NOT NULL,
 last_name VARCHAR(64) NOT NULL,
 fake_phone VARCHAR(64) NOT NULL,
 real_phone VARCHAR(64) NOT NULL,
 country VARCHAR(64) NOT NULL,
 recidivist BOOLEAN NOT NULL,
 PRIMARY KEY (fake_phone, real_phone));
 CREATE TABLE mapping(
 victim_phone VARCHAR(64) REFERENCES victims(phone) ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
 suspect_f_phone VARCHAR(64),
 suspect_r_phone VARCHAR(64),
 PRIMARY KEY (victim_phone, suspect_f_phone, suspect_r_phone),
 FOREIGN KEY (suspect_f_phone, suspect_r_phone) REFERENCES suspects(fake_phone, real_phone) ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED);", , ,"insert into public.victims (first_name, last_name, phone, id, dob, country, card) values ('Gawain', 'McInulty', '5278984023', '793-38-4675', '1967-09-22', 'Czech Republic', 'jcb');
insert into public.victims (first_name, last_name, phone, id, dob, country, card) values ('Farrand', 'Felgat', '4403198473', '521-72-6636', '1949-09-26', 'Pakistan', 'mastercard');
insert into public.victims (first_name, last_name, phone, id, dob, country, card) values ('Carissa', 'Demangeot', '4068617319', '862-33-3679', '1985-07-20', 'Syria', 'visa-electron');
 
insert into public.suspects (first_name, last_name, fake_phone, real_phone, country, recidivist) values ('Sidonia', 'Cadagan', '4562750872', '5049123661', 'Sri Lanka', false);
insert into public.suspects (first_name, last_name, fake_phone, real_phone, country, recidivist) values ('Hilda', 'Linscott', '3799793620', '1309302282', 'Nicaragua', true);
insert into public.suspects (first_name, last_name, fake_phone, real_phone, country, recidivist) values ('Vachel', 'Cuddehay', '1062981517', '4969777597', 'China', false);", , ,"INSERT INTO public.mapping (victim_phone, suspect_f_phone, suspect_r_phone)
select a.phone, b.fake_phone, b.real_phone from
public.victims as a
cross join public.suspects as b
order by random()
limit 1000
", , ,,,
A0231857Y,/* The code is written for PostgreSQL */,"/* Based on Marvel Comics, S.H.I.E.L.D is a fictional espionage and law	*/
/* enforcement agency, tasked to maintain world peace and order. 		*/
/* The organisation has a wide range of highly skilled and specialiased */
/* agents, scattered all over the world, doing critical, top-secret 	*/
/* missions. 															*/				
/* In this assignment, the database instance is S.H.I.E.L.D's mission 	*/
/* tracking system that records information about agents, their 		*/
/* assigned missions and their mission progress. 						*/		
/*																		*/
/* There will be three tables in this database instance: 				*/
/*																		*/
/* 1. Entity 1 (agent): The database records the name, base, status and */
/* skill of each agent. Each agent is identified in the system by 		*/
/* his/her ID. The database also records the date at which the agent is */
/* activated. 															*/
/*																		*/
/* 2. Entity 2 (mission): The database records the name, country, 		*/
/* threat level (10 being the highest) and status of each mission. Each */
/* mission is identified by its ID.	The start and completion target     */
/* date are also included in the table.									*/
/*							 											*/
/* 3. Relationship Table (progress): The database records the agent 	*/
/* involved in every mission along with the id, name, status and start  */
/* date of the mission.													*/", , ,"CREATE TABLE IF NOT EXISTS agent (
    first_name VARCHAR(75) NOT NULL,
    last_name VARCHAR(75) NOT NULL,
    base VARCHAR(50) NOT NULL,
    status VARCHAR(10) CHECK (status = 'active' OR status = 'dormant' OR status = 'retired'),
    activation_date DATE,
    top_skill VARCHAR(25),
    id BIGINT PRIMARY KEY
);
CREATE TABLE IF NOT EXISTS mission (
    name VARCHAR(256) NOT NULL UNIQUE,
    country VARCHAR(75),
    status VARCHAR(10) NOT NULL CHECK (status = 'ongoing' OR status = 'completed' OR status = 'aborted'),
    threat_level INT CHECK (threat_level <= 10),
    start_date DATE NOT NULL DEFAULT CURRENT_DATE,
    completion_target_date DATE NOT NULL,
    id BIGINT PRIMARY KEY,
    CHECK (completion_target_date > start_date)
);
CREATE TABLE IF NOT EXISTS progress (
    mission_id BIGINT,
    mission_name VARCHAR(256) REFERENCES mission(name) DEFERRABLE,
    mission_status VARCHAR(10),
    agent_id BIGINT,
    start_date DATE NOT NULL DEFAULT CURRENT_DATE,
    FOREIGN KEY (mission_id) REFERENCES mission(id) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE,
    FOREIGN KEY (agent_id) REFERENCES agent(id) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE,
    PRIMARY KEY (mission_id, agent_id)
);", , ,"/* SQL DML for agent Table: */ insert into agent (id, first_name, last_name, base, status, activation_date, top_skill) values ('405508720', 'Bernardine', 'Gowanson', 'BR', 'retired', '2016-07-23', 'Investigation');
insert into agent (id, first_name, last_name, base, status, activation_date, top_skill) values ('888131227', 'Evita', 'Dunbar', 'JP', 'active', '1976-09-02', 'Diplomacy');
insert into agent (id, first_name, last_name, base, status, activation_date, top_skill) values ('968464673', 'Loralee', 'Enders', 'CN', 'retired', '1976-02-22', 'Diplomacy');
 
/* SQL DML for mission Table */ insert into mission (id, name, country, status, threat_level, start_date, completion_target_date) values ('944506857', 'Zoolab 174', 'CN', 'aborted', 8, '2020-04-09', '2024-01-08');
insert into mission (id, name, country, status, threat_level, start_date, completion_target_date) values ('972387674', 'Y-Solowarm 778', 'PT', 'aborted', 5, '1973-09-08', '1978-11-02');
insert into mission (id, name, country, status, threat_level, start_date, completion_target_date) values ('301995076', 'Hatity 398', 'ES', 'aborted', 1, '1994-08-19', '2004-10-30');", , ,"INSERT INTO progress (mission_id, mission_name, mission_status, agent_id, start_date)
SELECT mission.id, mission.name, mission.status, agent.id, start_date
FROM agent, mission
ORDER BY random()
LIMIT 1000;", , ,,,
A0231863E,/* The code is written for PostgreSQL */,"/* 
The code is written for PostgreSQL
This database stores check-in records of university personnel into location or an establishment in a university for contact tracing and compliance checking purposes.
The relationship is many-to-many relationship, i.e. one personnel can visit more than one location, and one location can be visited by more than one personnel.
personnel (entity) - A sample record of students and staff in the university
Columns include:
	-Email (primary key),
	-Personnel ID,
	-First name, 
	-Last name;
	-Gender, 
	-Faculty,
	-Student/staff
location (entity) - Buildings and establishments in the university with check-in capability
Columns include:
	-Location ID (primary key),
	-Location name,
	-Latitude, (latitude and logitude for contact tracing purpose)
	-Longitude,
	-Type of location,
visited (relationship) - Check-in records of the personnel who visited the location in the university between Jan 2021 to June 2021. 
Columns include:
	-Visitor's email,
	-Location ID,
	-Check-in time (between Jan 1 to June 31 2021)
	Primary key: Visitor's email + Location ID
*/", , ,"CREATE TABLE IF NOT EXISTS personnel (
	personnel_id CHAR(8) NOT NULL UNIQUE,
	email VARCHAR(256) PRIMARY KEY,
	first_name VARCHAR(256) NOT NULL,
	last_name VARCHAR(256) NOT NULL,
	gender VARCHAR(6) NOT NULL CONSTRAINT gender CHECK(gender = 'Male' OR gender='Female'),
	faculty VARCHAR(62) NOT NULL,
	type VARCHAR(7) NOT NULL
);
CREATE TABLE IF NOT EXISTS location (
	location_id VARCHAR(5) PRIMARY KEY,
	name VARCHAR(256) NOT NULL,
	type VARCHAR(50) NOT NULL,
	lat VARCHAR(10) NOT NULL,
	long VARCHAR(10) NOT NULL
);
CREATE TABLE IF NOT EXISTS visited (
	visitor VARCHAR(256) REFERENCES personnel(email),
	location_id VARCHAR(5) REFERENCES location(location_id),
	check_in_time TIMESTAMP NOT NULL,
	PRIMARY KEY (visitor, location_id)
);", , ,"INSERT INTO personnel (personnel_id, email, first_name, last_name, gender, faculty, type) VALUES ('r9199555', 'r9199555@mus.edu', 'Lucia', 'Gater', 'Male', 'Faculty of Medicine', 'Student');
INSERT INTO personnel (personnel_id, email, first_name, last_name, gender, faculty, type) VALUES ('n7585954', 'n7585954@mus.edu', 'Ediva', 'Waberer', 'Female', 'Faculty of Law', 'Staff');
INSERT INTO personnel (personnel_id, email, first_name, last_name, gender, faculty, type) VALUES ('t2298166', 't2298166@mus.edu', 'Bryna', 'Abethell', 'Female', 'Faculty of Law', 'Student');
 
INSERT INTO personnel (personnel_id, email, first_name, last_name, gender, faculty, type) VALUES ('r1413378', 'r1413378@mus.edu', 'Neale', 'Shilburne', 'Female', 'School of Computing', 'Student');
INSERT INTO personnel (personnel_id, email, first_name, last_name, gender, faculty, type) VALUES ('y1016399', 'y1016399@mus.edu', 'Kleon', 'Matevushev', 'Female', 'School of Business', 'Staff');
INSERT INTO personnel (personnel_id, email, first_name, last_name, gender, faculty, type) VALUES ('l2962141', 'l2962141@mus.edu', 'Elsinore', 'Farndon', 'Female', 'Faculty of Law', 'Student');", , ,"/* Perform cross join between both entity tables to get approximately 10% of possible combination. Also added a random timestamp between 2021-01-01 to 2021-07-01 as check-in time */
INSERT INTO visited (
  SELECT 
    personnel.email, 
    location.location_id, 
    timestamp '2021-01-01 20:00:00' + random() * (
      timestamp '2021-07-01 00:00:00' - timestamp '2021-01-01 00:00:00'
    ) 
  from 
    personnel, 
    location 
  where 
    random()<= 0.1
);", , ,,,
A0231867X,/* The code is written for PostgreSQL */,"/*Three tables have been created, for they are client, medicine and prescription respectively.
I assume that the entity set E1 to be client, the entity set E2 to be medicine, 
and the optional many-to-many relationship set R to be prescription.
The client table include the patient's id, first name, last name, email adress and phone number.
The medicine table include the drug's fda_code, name and the company.
The prescription table include the client's id and the code of drug they bought.
Once again, the code is written for PostgreSQL.  
*/", , ,"create table client (
  id VARCHAR(50) primary key, 
  first_name VARCHAR(50) not null, 
  last_name VARCHAR(50), 
  email VARCHAR(50), 
  phone VARCHAR(50) not null
);
create table medicine (
  fda_code VARCHAR(50) primary key, 
  drug_name VARCHAR(100) not null, 
  drug_company VARCHAR(100)
);
create table PRESCRIPTION (
  client_id VARCHAR(50) not null references client(id), 
  drug_id VARCHAR(50) not null references medicine(fda_code)
);", , ,"/* populate table client */ insert into client (id, first_name, last_name, email, phone) values ('91-5502630', 'Catlaina', 'Messum', 'cmessum0@narod.ru', '329-535-2060');
insert into client (id, first_name, last_name, email, phone) values ('00-3869245', 'Stefa', 'Lovatt', 'slovatt1@plala.or.jp', '972-880-0793');
insert into client (id, first_name, last_name, email, phone) values ('60-2485799', 'Angelico', 'Cotmore', 'acotmore2@amazonaws.com', '373-923-0554');
 
insert into client (id, first_name, last_name, email, phone) values ('48-3665861', 'Petr', 'Czajka', 'pczajka2s@vk.com', '216-698-1158');
insert into client (id, first_name, last_name, email, phone) values ('39-0354044', 'Deny', 'Hegley', 'dhegley2t@ucla.edu', '810-663-3873');
insert into client (id, first_name, last_name, email, phone) values ('76-4259827', 'Minnaminnie', 'Fancy', 'mfancy2u@yahoo.com', '693-506-4349');", , ,"/* populate table prescription   */
insert into
   PRESCRIPTION(client_id, drug_id) 
   SELECT
      * 
   FROM
      (
         SELECT
            * 
         FROM
            (
               SELECT
                  client.id AS a_id,
                  medicine.fda_code AS b_id 
               FROM
                  client 
                  CROSS JOIN
                     medicine 
               ORDER BY
                  random() 
            )
            AS s0 LIMIT 1000 
      )
      AS s1 
   ORDER BY
      a_id,
      b_id;
/* The end of ZENG JIAQI's work */", , ,,,
A0231868W,/* The code is written for SQLite */,"/*First of all, the following codes are written for SQLite.
Introduction:
Suppose that in the near future, a global basketball league has been established
around the world. Players from all countries can join basketball clubs all over
the world and then participate in basketball games.
An important part of this event is the university student player draft, that is,
university rookies from all over the world participate in the player draft,so as
to join basketball clubs all over the world.
Based on this background, we assume E1 is the rookie table(named draft_rookies),
which contains the name, age, nationality, university, height and weight of 100 rookies;
Suppose E2 is the club table(named draft_clubs), including the name of 100 draft clubs
and their countries and cities;
Suppose R is the contract table(named contracts), indicating which club(s) each rookie
received a contract from, including the name of the rookie and the interested club.
*/", , ,"CREATE TABLE IF NOT EXISTS draft_rookies (
	rookie_id INT,
	name VARCHAR(50) PRIMARY KEY,
	age INT NOT NULL,
	nationality VARCHAR(50) NOT NULL,
	university VARCHAR(50) NOT NULL,
	height_cm INT NOT NULL,
	weight_kg DECIMAL(4,1) NOT NULL
);
CREATE TABLE IF NOT EXISTS draft_clubs (
	club_id INT,
	club_name VARCHAR(50) PRIMARY KEY,
	country VARCHAR(50) NOT NULL,
	city VARCHAR(50) NOT NULL
);
CREATE TABLE contracts (
  rookie_name VARCHAR(50) REFERENCES draft_rookies(name)
    ON UPDATE CASCADE
		ON DELETE CASCADE
    DEFERRABLE INITIALLY DEFERRED,
  club_name VARCHAR(50) REFERENCES draft_clubs(club_name)
    ON UPDATE CASCADE
		ON DELETE CASCADE
    DEFERRABLE INITIALLY DEFERRED,
  PRIMARY KEY (rookie_name, club_name)
);", , ,"insert into draft_rookies (rookie_id, name, age, nationality, university, height_cm, weight_kg) values (1, 'Shanna Nealey', 18, 'Sweden', 'Kalmar University College', 228, 125.9);
insert into draft_rookies (rookie_id, name, age, nationality, university, height_cm, weight_kg) values (2, 'Nikaniki Pearton', 22, 'Vietnam', 'Vietnam National University Hanoi', 198, 149.7);
insert into draft_rookies (rookie_id, name, age, nationality, university, height_cm, weight_kg) values (3, 'Abagail Gavaran', 23, 'Finland', 'University of Jyväskylä', 225, 64.0);
 
insert into draft_clubs (club_id, club_name, country, city) values (1, 'Batz-Tromp', 'Poland', 'Frydrychowice');
insert into draft_clubs (club_id, club_name, country, city) values (2, 'Dooley, Klein and Mosciski', 'Portugal', 'Aldeia de Além');
insert into draft_clubs (club_id, club_name, country, city) values (3, 'Schmeler-Rath', 'Russia', 'Voloshka');", , ,"INSERT INTO contracts
SELECT r.name, c.club_name
FROM draft_rookies r, draft_clubs c
ORDER BY random()
LIMIT 1000;", , ,,,
A0231869U,/* The code is written for PostgreSQL */,"/* There are thousands of movie websites on the internet. These websites all should have a database that keeps their users' information and their watching history, */
/* so that they can know which movie is more popular or keep records of the website acticity. Suppose I'm asked to build and maintain this database. */
/* I choose the entity set E1 to be users， storing the users' attributes including names, emails, gender, DOB, country and userid as the primary key. These columns should reflect the users' profile with the information that users provided during registration.*/
/* For entity set E2, I set it as movies, storing the movie names, types and publishing year. The combination of these three columns serves as the primary key, because these three columns should be sufficient to identify a movie. */
/* In the relation set, I keep the record of userid and the movie details (movie names, types and publishing year), retrieved by referencing E1 and E2. The combination of these four columns serves as the primary key. The code is written for PostgreSQL. */", , ,"CREATE TABLE IF NOT EXISTS users (
	first_name VARCHAR(128) NOT NULL,
	last_name VARCHAR(64) NOT NULL,
	email VARCHAR(64) UNIQUE NOT NULL,
	gender VARCHAR(2) NOT NULL,
	DOB DATE NOT NULL,
	country VARCHAR(64) NOT NULL,
	userid VARCHAR(64) PRIMARY KEY);
CREATE TABLE IF NOT EXISTS movies(
	name VARCHAR(128),
	type VARCHAR(128),
	year CHAR(4),
	PRIMARY KEY (name, type, year));
CREATE TABLE IF NOT EXISTS watch(
	userid VARCHAR(128) REFERENCES users(userid) ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
	name VARCHAR(128),
	type VARCHAR(128),
	year CHAR(4),
	PRIMARY KEY (userid, name, type, year),
	FOREIGN KEY (name, type, year) REFERENCES movies(name, type, year) ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED);", , ,"insert into users (first_name, last_name, email, gender, DOB, country, userid) values ('Kip', 'Gregan', 'kgregan0@alexa.com', 'F', '11/15/2011', 'Canada', 'kgregan0');
insert into users (first_name, last_name, email, gender, DOB, country, userid) values ('Sibylle', 'Crowcroft', 'scrowcroft1@ustream.tv', 'F', '06/18/2013', 'China', 'scrowcroft1');
insert into users (first_name, last_name, email, gender, DOB, country, userid) values ('Elke', 'Kaye', 'ekaye2@tmall.com', 'F', '02/05/2003', 'Togo', 'ekaye2');
 
insert into movies (name, type, year) values ('Dudley Do-Right', 'Children|Comedy', 2006);
insert into movies (name, type, year) values ('Let''s Not Keep in Touch!', 'Comedy', 2007);
insert into movies (name, type, year) values ('Alien Nation: Millennium', 'Sci-Fi', 2006);", , ,"INSERT INTO watch
SELECT u.userid, m.name, m.type, m.year
FROM users u, movies m
ORDER BY random()
LIMIT 1000;", , ,,,
A0231872E,/* The code is written for PostgreSQL */,"/*The three tables are named customers,drug and buyer respetively.Customers table contains first_name,last_name, customer_ip. Drug table contains drug_name, drug_company and drug_generic. Buyer indicates which customers ( by referencing ip_address )  bought what kind of drug (by referencing drug_company and drug_brand).
The code is written for PostgreSQL 
*/", , ,"create table if not exists customers(
first_name varchar(64) not null,
last_name varchar(64) not null,
customer_ip varchar(64) primary key);
create table if not exists drug(
drug_company VARCHAR(64) not null,
drug_name varchar(128) not null,
drug_generic VARCHAR(512) not null,
primary key(drug_company,drug_name));
create table buyer (
customer_ip varchar(64) references customers(customer_ip)
on update cascade on delete cascade
deferrable initially deferred,
drug_company VARCHAR(64),
drug_name varchar(128),
primary key(customer_ip,drug_company,drug_name),
foreign key(drug_company,drug_name) references drug(drug_company,drug_name)
on update cascade on delete cascade
deferrable initially deferred
);", , ,"delete from drug;
delete from customers;
insert into drug (drug_company, drug_name, drug_generic) values ('American Health Packaging', 'Gabapentin', 'Gabapentin');
 
insert into drug (drug_company, drug_name, drug_generic) values ('Amneal Pharmaceuticals', 'Cetirizine Hydrochloride', 'Cetirizine');
insert into drug (drug_company, drug_name, drug_generic) values ('The Pharma Network LLC', 'Thermazene', 'Silver Sulfadiazine');
insert into customers (first_name, last_name, customer_ip) values ('Ellette', 'McCreedy', '243.226.20.240/22');", , ,"insert into buyer
select c.customer_ip, d.drug_company,d.drug_name
from customers c, drug d
order by random()
limit 1000;", , ,,,
A0231875Y,/* The code is written for PostgreSQL */,"/* The first entity E1 is the customers table which contains the information that customers provide to make online transaction purchases.
   It has attributes like first name and last name of the customer, the type of credit card that the customer used, the credit card name, the currency of the purchase and the amount spent during the transaction. 
   The credit card number is an unique identifier tied to the cardholder name and hence it forms the primary key for the customer table. 
   The second entity E2 is the retail table which contains the information that a retail company (eg. Target) has about their customers. 
   It has attributes like the customer identification number, gender of the customer, country that the customer is located and the type of retail that the customer indicates interests. 
   The customer identification number created by the retail company is unique to each customer and hence it forms the primary key for the retail table. 
   The relationship set R is a transactions table which contain the information that the card associations (eg. Visa) have since card associations are between customer and retail store. 
   This transactions table can associate for example, the credit card number to customer identification number in the retail company (eg. Target). 
*/", , ,"/*To create a new database,*/
CREATE DATABASE assignmentone; 
/*To create the entity, E1*/
CREATE TABLE IF NOT EXISTS customers (
first_name VARCHAR(64) NOT NULL, 
last_name VARCHAR(64) NOT NULL,
credit_card_type VARCHAR(64) NOT NULL, 
credit_card_no VARCHAR(64) PRIMARY KEY,
currency VARCHAR(64) NOT NULL, 
amount_spent NUMERIC NOT NULL);
/*To create the entity, E2*/
CREATE TABLE IF NOT EXISTS retail (
customerid VARCHAR(16) NOT NULL,
gender VARCHAR(16) NOT NULL, 
country VARCHAR(64) NOT NULL,
retail_type VARCHAR(64) NOT NULL, 
PRIMARY KEY (customerid));
/*To create the relation, R*/
CREATE TABLE transactions (
credit_card_no VARCHAR(64) REFERENCES customers(credit_card_no)
	ON UPDATE CASCADE ON DELETE CASCADE
	DEFERRABLE INITIALLY DEFERRED,
customerid VARCHAR(16),
PRIMARY KEY (credit_card_no, customerid), 
FOREIGN KEY (customerid) REFERENCES retail(customerid)
	ON UPDATE CASCADE ON DELETE CASCADE
	DEFERRABLE INITIALLY DEFERRED);", , ,"/*To insert 100 rows of data for the customers table */ insert into customers (first_name, last_name, credit_card_type, credit_card_no, currency, amount_spent) values ('Kylynn', 'Attenbarrow', 'jcb', '3533519825742249', 'Real', '94537.37');
insert into customers (first_name, last_name, credit_card_type, credit_card_no, currency, amount_spent) values ('Alberta', 'Bayly', 'visa-electron', '4508800587461551', 'Denar', '78375.67');
insert into customers (first_name, last_name, credit_card_type, credit_card_no, currency, amount_spent) values ('Dorris', 'Pawling', 'jcb', '3564791101551428', 'Yuan Renminbi', '46517.10');
 
insert into customers (first_name, last_name, credit_card_type, credit_card_no, currency, amount_spent) values ('Faustine', 'Marchenko', 'jcb', '3529275820982803', 'Euro', '19108.39');
/*To insert 100 rows of data for the retail table */ insert into retail (customerid, gender, country, retail_type) values (1, 'Female', 'South Korea', 'Kids');
insert into retail (customerid, gender, country, retail_type) values (2, 'Female', 'Burundi', 'Computers');", , ,"/*To cross join the customers table and the retail table and store in a table called temporary 
  Then randomly select 1000 rows out of 10,000 rows of the credit card and customer identification information from the temporary table and insert them into the transaction table. */ 
INSERT INTO transactions
SELECT credit_card_no, customerid 
FROM 
	(SELECT c.credit_card_no, r.customerid
	FROM customers AS c 
	CROSS JOIN retail AS r) AS temporary
ORDER BY RANDOM ()
LIMIT 1000; 
", , ,,,
A0231880H,/* The code is written for PostgreSQL */,"/* The three tables are to record the (1) Staff information - 'staff' (2) Stock information - 'stock' (3) The stocks that the staff bought - 'holdings'.
There are 100 rows each in staff and stock, and 1000 relationships in holdings.
For the staff table, staff ID is the primary key. For the stock table, stock market and stock symbol are the primary keys. 
For holdings, no primary key is set but staff ID, stock market and stock symbol will be foreign keys to the other two tables.
The context here is that some professional firms require staff to report the investments or securities that they purchased and sold,
as this concerns independence with clients. Here assuming the firms do keep track of all the available securities in the market, by obtaining data from service provider.
To make it a bit more real, after populating the holdings table with staff and stock relationships, a random number of stock purchased and purchase date has been inserted.
*/", , ,"CREATE TABLE IF NOT EXISTS Staff (
staff_id VARCHAR(10) PRIMARY KEY,
first_name VARCHAR(32) NOT NULL,
last_name VARCHAR(32) NOT NULL,
department VARCHAR(64) NOT NULL,
job_title VARCHAR(64) NOT NULL,
social_sec_num VARCHAR(11) NOT NULL);
CREATE TABLE IF NOT EXISTS Stock (
stock_mkt VARCHAR(10) NOT NULL,
stock_symb VARCHAR(10) NOT NULL,
stock_name VARCHAR(80) NOT NULL,
stock_indt VARCHAR(80) NOT NULL,
stock_sect VARCHAR(32) NOT NULL,
PRIMARY KEY (stock_mkt, stock_symb));
CREATE TABLE IF NOT EXISTS Holdings (
staff_id VARCHAR(10) REFERENCES Staff(staff_id),
stock_mkt VARCHAR(10) NOT NULL,
stock_symb VARCHAR(10) NOT NULL,
shares_num NUMERIC,
stock_pur_date DATE,
stock_sell_date DATE,
FOREIGN KEY (stock_mkt, stock_symb) REFERENCES Stock(stock_mkt, stock_symb));", , ,"insert into staff (staff_id, first_name, last_name, department, job_title, social_sec_num) values ('84-7663363', 'Egon', 'Coniam', 'Sales', 'Web Developer III', '680-02-2846');
insert into staff (staff_id, first_name, last_name, department, job_title, social_sec_num) values ('05-3822493', 'Bernardina', 'Venners', 'Product Management', 'Biostatistician III', '209-19-1834');
insert into staff (staff_id, first_name, last_name, department, job_title, social_sec_num) values ('21-7345080', 'Munroe', 'Pengelley', 'Training', 'Financial Analyst', '719-47-6282');
 
insert into stock (stock_mkt, stock_symb, stock_name, stock_indt, stock_sect) values ('NASDAQ', 'WHLRD', 'Wheeler Real Estate Investment Trust, Inc.', 'Real Estate Investment Trusts', 'Consumer Services');
insert into stock (stock_mkt, stock_symb, stock_name, stock_indt, stock_sect) values ('NYSE', 'VGR', 'Vector Group Ltd.', 'Farming/Seeds/Milling', 'Consumer Non-Durables');
insert into stock (stock_mkt, stock_symb, stock_name, stock_indt, stock_sect) values ('NYSE', 'NCB', 'Nuveen California Municipal Value Fund 2', 'n/a', 'n/a');", , ,"INSERT INTO holdings (staff_id, stock_mkt, stock_symb)
SELECT staff_id s, stock_mkt t, stock_symb t
FROM staff s, stock t
ORDER BY random()
LIMIT 1000;
UPDATE holdings
SET shares_num = floor(random()*9900::int)+100;
UPDATE holdings
SET stock_pur_date = date( (current_date - '7 years'::interval) +
 trunc(random() * 365) * '1 day'::interval +
 trunc(random() * 6) * '1 year'::interval );", , ,,,
A0231884Y,/* The code is written for PostgreSQL */,"/* 
I design a used car online trading records database.
I set the entity set E1 to be used_cars, the entity set E2 to be users and the relationship set R to be orders.
Table used_cars records the used cars that have been sold at the online trading platform.
It contains 7 attributes:
carid is the primary key given by the platform to identify each used car,
quoted_price is the price offered by seller,
car_make is the brand of the used car,
car_model is the model of the used car,
bought_year is the time when the seller bought the car,
color is the color of the used car,
and seller_phone is the phone number of the seller that enables both the users and platform to contact with him to check the used car. 
Table users records all the registered users at the platform.
It contains 4 attributes:
username is the primary key,
fullname is the real identity information of the users which guarantees the authenticity of the transaction,
email and user_phone are unique attributes of the users that ensures one can only register with an email and a phone number once.
Table orders records the transaction orders completed at the platform.
It contains 2 foreign keys and 2 inner attributes:
carid is a foreign key referring to table used_cars’s carid and username is a foreign key referring to table users’s username.
They are both on update cascade because the trading platform and users are allowed to change their carid or username and alter the corresponding records in table orders so that the buyers and sellers can be traced.
Carid and username also constitute the primary key of table orders.
Besides, transaction_price is the end price of the sold used car,
and datetime is the date when the transaction completed.
*/", , ,"-- create table for entity used_cars:
CREATE TABLE IF NOT EXISTS used_cars (
	carid VARCHAR(64) NOT NULL PRIMARY KEY,
	quoted_price NUMERIC NOT NULL,
	car_make VARCHAR(64) NOT NULL,
	car_model VARCHAR(64) NOT NULL,
	bought_year VARCHAR(8) NOT NULL,
	color VARCHAR(16) NOT NULL,
	seller_phone VARCHAR(64) NOT NULL);
-- create table for entity users:
CREATE TABLE IF NOT EXISTS users(
	username VARCHAR(64) NOT NULL PRIMARY KEY,
	fullname VARCHAR(64) NOT NULL,
	email VARCHAR(64) UNIQUE NOT NULL,
	user_phone VARCHAR(64) UNIQUE NOT NULL);
-- create table for relationship orders:
CREATE TABLE IF NOT EXISTS orders(
	carid VARCHAR(64) REFERENCES used_cars(carid)
		ON UPDATE CASCADE
		DEFERRABLE INITIALLY DEFERRED,
	username VARCHAR(64) REFERENCES users(username)
		ON UPDATE CASCADE
		DEFERRABLE INITIALLY DEFERRED,
	PRIMARY KEY (carid, username),
	transaction_price NUMERIC NOT NULL,
	datetime DATE NOT NULL);", , ,"-- insert data into table used_cars: insert into used_cars (carid, quoted_price, car_make, car_model, bought_year, color, seller_phone) values ('3519001127', 310269, 'Pontiac', 'GTO', 1964, 'Aquamarine', '+48 680 580 4619');
insert into used_cars (carid, quoted_price, car_make, car_model, bought_year, color, seller_phone) values ('1668374866', 74979, 'Ford', 'E350', 2004, 'Indigo', '+86 837 988 0452');
insert into used_cars (carid, quoted_price, car_make, car_model, bought_year, color, seller_phone) values ('9542328771', 172208, 'BMW', 'X3', 2007, 'Turquoise', '+1 404 555 9101');
 
-- insert data into table users: insert into users (username, fullname, email, user_phone) values ('jlimon0', 'Jemmy Limon', 'jlimon0@bbb.org', '+62 806 212 4484');
insert into users (username, fullname, email, user_phone) values ('mvondrak1', 'Mollee Vondrak', 'mvondrak1@newsvine.com', '+1 770 764 7023');
insert into users (username, fullname, email, user_phone) values ('cchestnut2', 'Carlen Chestnut', 'cchestnut2@cargocollective.com', '+94 909 961 9041');", , ,"-- select foreign keys from table used_cars, users, and generate transaction_price and datetime randomly:
INSERT INTO orders
SELECT carid, username,
	ROUND(RANDOM()*100000 + 10000),
	(NOW() - '1000 day'::INTERVAL * ROUND(RANDOM() * 20))::date
FROM used_cars, users
ORDER BY RANDOM()
LIMIT 1000;", , ,,,
A0231885X,"/* The code is written for PostgreSQL */
/*","/* 
Table Audiences contains the information of audiences who have watched different
movies online. The information contains audiences' first_name, last_name, gender, 
nationality, and the ip_address, where they use to watch the movies. In this case,
since ip_address is unique, we use it as our primary key.
Table Movies contains the information of different movies. The information contains
the movies' title, genres, and director,which will be shown in full name. Since we 
cannot have two movies with same title and same director, we can use title and 
director as our primary key. 
Table Watched is the relationship between table Audience and table Movie. The table
Watched correspond the ip_address of Audience with the title and director of Movie 
to represent that such an audience has already watched the movie. Each movie can be 
watched by many audiences, and each audience can also watch a lot of movies.
*/", , ,"CREATE TABLE IF NOT EXISTS Audiences (
	first_name VARCHAR(64) NOT NULL,
	last_name VARCHAR(64) NOT NULL,
	gender VARCHAR(16),
	nationality VARCHAR(64),
	ip_address VARCHAR(256) PRIMARY KEY
	);
CREATE TABLE IF NOT EXISTS Movies (
	title VARCHAR(64) NOT NULL,
	genres VARCHAR(64),
	director VARCHAR(64) NOT NULL,
	PRIMARY KEY (title, director)
	);
CREATE TABLE Watched (
	ip_address VARCHAR(256) REFERENCES Audiences(ip_address),
	title VARCHAR(64),
	director VARCHAR(64),
	PRIMARY KEY (ip_address, title, director),
	FOREIGN KEY (title, director) REFERENCES Movies(title, director)
	);", , ,"insert into Audiences (first_name, last_name, gender, nationality, ip_address) values ('Humfrid', 'Avraam', 'Bigender', 'China', '64.56.251.33');
insert into Audiences (first_name, last_name, gender, nationality, ip_address) values ('Hillie', 'Wardlow', 'Female', 'Tanzania', '42.44.77.15');
insert into Audiences (first_name, last_name, gender, nationality, ip_address) values ('Elianora', 'Ivankovic', 'Agender', 'Indonesia', '201.193.228.252');
 
insert into Audiences (first_name, last_name, gender, nationality, ip_address) values ('Leonelle', 'Lancashire', 'Male', 'Russia', '45.10.131.193');
insert into Audiences (first_name, last_name, gender, nationality, ip_address) values ('Sascha', 'Brownrigg', 'Female', 'Indonesia', '85.50.34.72');
insert into Audiences (first_name, last_name, gender, nationality, ip_address) values ('Ulrich', 'Hauxley', 'Female', 'Switzerland', '174.241.41.189');", , ,"insert into Watched (ip_address, title, director)
select ip_address
from Audiences
select title, director
from Movies
order by random()
limit 1000;", , ,,,
A0231886W,/* The code is written for SQLite */,"/*My exmaple is from a zoo DBMS where data of zoo-keepers and animals are 
linked with `feed` relationship. The zoo-keepers' data are in `Employee` 
table, which contains basic infomation of employees in the zoo. The 
animals' data are kept in `Animal` table, which contains basic infomation 
of the animals. The feeding relationship is kept in `Feed` table, which 
contains the duties and details of zoo-keepers.
*/", , ,"create table Employee (
	EmployeeId VARCHAR(50) NOT NULL,
	Name VARCHAR(50) NOT NULL,
	Gender VARCHAR(50) NOT NULL,
	Age INT NOT NULL,
    PRIMARY KEY (EmployeeId)
);
create table Animal (
	AnimalId VARCHAR(50) NOT NULL,
	Name VARCHAR(50) NOT NULL,
	Gender VARCHAR(50) NOT NULL,
	Age INT NOT NULL,
	Carnivorous INT NOT NULL,
    PRIMARY KEY (AnimalId)
);
create table Feed (
	EmployeeId VARCHAR(50) NOT NULL,
	AnimalId VARCHAR(50) NOT NULL,
	Food VARCHAR(50) NOT NULL,
	Frequency INT NOT NULL,
    PRIMARY KEY (EmployeeId, AnimalId),
    FOREIGN KEY (EmployeeId) REFERENCES Employee(EmployeeId) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (AnimalId) REFERENCES Animal(AnimalId) ON DELETE CASCADE ON UPDATE CASCADE
);", , ,"insert into Employee (EmployeeId, Name, Gender, Age) values ('60-0845032', 'Aleece Collet', 'Male', 48);
insert into Employee (EmployeeId, Name, Gender, Age) values ('92-9930708', 'Pearline McAndie', 'Female', 48);
insert into Employee (EmployeeId, Name, Gender, Age) values ('99-8627071', 'Becca Pires', 'Male', 44);
 
insert into Animal (AnimalId, Name, Gender, Age, Carnivorous) values ('96-8024105', 'Tockus flavirostris', 'Male', 20, 1);
insert into Animal (AnimalId, Name, Gender, Age, Carnivorous) values ('87-4897901', 'Nyctea scandiaca', 'Male', 0, 0);
insert into Animal (AnimalId, Name, Gender, Age, Carnivorous) values ('71-9240411', 'Varanus sp.', 'Male', 13, 0);", , ,"insert into Feed (EmployeeId, AnimalId, Food, Frequency)
select
    a.EmployeeId
    , b.AnimalId
    , case when b.Carnivorous = 0 then 'Vegetable' else 'Meat' end
    , abs(random() % 5) + 1
from
    (
        select
            EmployeeId
            , row_number() over(order by random()) as seq
        from
            Employee
    ) a
    join (
        select
            AnimalId
            , Carnivorous
            , row_number() over(order by random()) as seq
        from
            Animal
    ) b
    on
        a.seq = b.seq
limit 1000 offset 0;", , ,,,
A0231887U,/* The code is written for PostgreSQL. */,"/*First of all, the code is written for PostgreSQL, and let me introduce my case.
My application case is about 'Jobs and Applicants'. 
So topic can be categorized into 'Human Resoure Management' or 'Recruiting', 
which is also my professional interest. 
Data Analytics in HR(so-called People Analytics or HR Analytics) deserves to be valued better!
In this case, applicants can apply to many different positions,
and I have presented this case with 2 entities named 'applicant' and 'position' 
along with 1 relation named 'apply'.
So we have 3 tables named 'applicant', 'position' and 'apply', 
and simple table descriptioins for each table are like below.
(FORMAT: column_name / type / description)
Table.1(Entity.1): 'applicant' 
 - applicant_id / integer / Represents applicant's unique id. Each applicant has unique applicant_id.
 - full_name / varchar(32) / Represents the name of the applicant.
 - gender / varchar(8) / Represents the gender and has 2 levels, 'Male' and 'Female'.
 - email / varchar(32) / Represents the email address of applicant.
 - country / varchar(32) / Represents the country which the applicant came from.
Table.2(Entity.2): 'position'
 - position_id / varchar(8) / Represents the unique id of each job title.
 - job_title / varchar(64) / Represents the name of the job.
 - main_skill / varchar(64) / Represents the skill that is required the most for the job.
 - avg_salary / integer / Represents the average salary of the job position.
Table.3(Relation): 'apply'
 - applicant_id / integer / Foreign key from the 'applicant' table
 - position_id / varchar(8) / Foreign key from the 'position' table
*/", , ,"-- Create Table.1(Entity.1): 'applicant' 
create table if not exists applicant (
	applicant_id integer primary key,  
	full_name varchar(32),	
	gender varchar(8),		
	email varchar(32),		
	country varchar(32)		
);
-- Create Table.2(Entity.2): 'position'
create table if not exists position (
	position_id varchar(8) primary key,
	job_title varchar(64),
	main_skill varchar(64),
	avg_salary integer
);
-- Create Table.3(Relation): 'apply'
create table if not exists apply (
	applicant_id integer not null, 
	position_id varchar(8) not null, 
	primary key (applicant_id, position_id),
	foreign key (applicant_id)
		references applicant (applicant_id),
	foreign key (position_id)
		references position(position_id)
);", , ,"-- Insert values into Table.1(Entity.1): 'applicant'  INSERT INTO applicant (applicant_id,full_name,gender,email,country) VALUES   (2817,'Bronson Simnett','Female','bsimnett0@go.com','Nicaragua'),  (7339,'Wendie Gabbott','Female','wgabbott1@yahoo.com','China'),  (3193,'Germain Matushevich','Female','gmatushevich2@hp.com','Russia'),  (9209,'Marcia Erickssen','Female','merickssen3@amazon.co.jp','Moldova'),  (4639,'Misha Luetkemeyer','Female','mluetkemeyer4@odnoklassniki.ru','Pakistan'),  (0009,'Lenard Seldon','Male','lseldon5@mashable.com','Argentina'),  (6531,'Fletcher Isson','Female','fisson6@sohu.com','China'),  (2393,'Kaia Bourgaize','Female','kbourgaize7@barnesandnoble.com','Japan'),  (6116,'Avram Huggens','Male','ahuggens8@samsung.com','China'),  (0181,'Boyce Pallatina','Male','bpallatina9@ftc.gov','Brazil'),  (4465,'Brooke Blown','Female','bblowna@amazonaws.com','France'),  (5740,'Cristionna Valiant','Female','cvaliantb@taobao.com','Poland'),  (4718,'Betsey Froschauer','Female','bfroschauerc@uiuc.edu','Russia'),  (2805,'Eimile Ondrusek','Male','eondrusekd@vinaora.com','Russia'),  (3992,'Noe Stonard','Female','nstonarde@spiegel.de','Portugal'),  (6440,'Margery Fray','Male','mfrayf@go.com','Ukraine'),  (5705,'Tarrance Reihm','Male','treihmg@unesco.org','China'),  (2086,'Alick Stobbes','Male','astobbesh@bizjournals.com','China'),  (5056,'Horacio Pottinger','Female','hpottingeri@etsy.com','Russia'),  (2400,'Ingamar Anyon','Female','ianyonj@artisteer.com','China'),  (7033,'Tobey Sansam','Male','tsansamk@creativecommons.org','Cuba'),  (6011,'Putnem Marchelli','Female','pmarchellil@sciencedaily.com','Argentina'),  (5720,'Addy Skelbeck','Male','askelbeckm@privacy.gov.au','China'),  (2659,'Eleonore Peirpoint','Female','epeirpointn@narod.ru','Poland'),  (8548,'Fleurette Cheves','Male','fcheveso@devhub.com','Brazil'),  (8632,'Samuel Worgen','Female','sworgenp@pinterest.com','Liberia'),  (5826,'Corrinne Wessel','Female','cwesselq@rambler.ru','Colombia'),  (2203,'Rik Barnes','Male','rbarnesr@microsoft.com','Indonesia'),  (0598,'Ronny Celli','Male','rcellis@joomla.org','Poland'),  (7174,'Fey Shaddick','Female','fshaddickt@fc2.com','Brazil'),  (7123,'Ruben Durrance','Male','rdurranceu@merriamwebster.com','China'),  (5723,'Ashli Snazel','Female','asnazelv@uol.com.br','China'),  (3624,'Isahella St. Hill','Female','istw@soup.io','Mexico'),  (6422,'Thorsten Purslow','Male','tpurslowx@newyorker.com','China'),  (2076,'Aldous Gethins','Female','agethinsy@cbsnews.com','Philippines'),  (5912,'Bryna Stolte','Male','bstoltez@g.co','Philippines'),  (1846,'Percy Merrell','Female','pmerrell10@scribd.com','China'),  (5563,'Prince Bainton','Female','pbainton11@blogs.com','Japan'),  (9801,'Rhodie Drinkwater','Female','rdrinkwater12@multiply.com','Poland'),  (8711,'Kari Buggs','Male','kbuggs13@sakura.ne.jp','Finland'),  (7476,'Renard Kilpin','Male','rkilpin14@theguardian.com','Yemen'),  (5680,'Arri Jansey','Male','ajansey15@homestead.com','Tonga'),  (5281,'Lydon Pigott','Female','lpigott16@webs.com','Yemen'),  (9102,'Josepha Brammer','Male','jbrammer17@php.net','Colombia'),  (0078,'Fawn Barstock','Male','fbarstock18@cnn.com','Armenia'),  (5177,'Nichol Dodding','Male','ndodding19@army.mil','China'),  (3223,'Marsh Honeyghan','Male','mhoneyghan1a@w3.org','Russia'),  (5777,'Eden Haselhurst','Female','ehaselhurst1b@uiuc.edu','Luxembourg'),  (7601,'Mathias Anthon','Male','manthon1c@parallels.com','Indonesia'),  (4786,'Carlin Carillo','Female','ccarillo1d@nydailynews.com','Philippines'),  (1334,'Ailey Roy','Male','aroy1e@state.tx.us','Argentina'),  (4197,'Cob Casale','Male','ccasale1f@mediafire.com','China'),  (2915,'Abeu De Giovanni','Male','ade1g@hhs.gov','France'),  (5775,'Annalee Lafranconi','Male','alafranconi1h@ca.gov','Vietnam'),  (2705,'Silvanus Jillings','Female','sjillings1i@youku.com','China'),  (0204,'Clarke Lober','Male','clober1j@discovery.com','Brazil'),  (8613,'Coriss Lewington','Male','clewington1k@flavors.me','China'),  (6064,'Mordecai Christophersen','Male','mchristophersen1l@storify.com','Poland'),  (2992,'Stearn Madill','Male','smadill1m@privacy.gov.au','Indonesia'),  (9043,'Eldin Akister','Male','eakister1n@bbc.co.uk','Serbia'),  (2706,'Almeta Juares','Female','ajuares1o@google.com','Brazil'),  (4134,'Lisbeth Grosvenor','Female','lgrosvenor1p@edublogs.org','Russia'),  (6855,'Peyton Bly','Male','pbly1q@alibaba.com','Croatia'),  (6834,'Irene Corck','Male','icorck1r@ucoz.com','Indonesia'),  (6188,'Wesley Lillico','Male','wlillico1s@deviantart.com','Belarus'),  (6871,'Simeon Tointon','Female','stointon1t@dell.com','Indonesia'),  (5906,'Willdon Bowen','Male','wbowen1u@odnoklassniki.ru','Slovakia'),  (6055,'Gradeigh Astbery','Male','gastbery1v@washington.edu','Indonesia'),  (9324,'Kimbra Kimberly','Male','kkimberly1w@abc.net.au','United States'),  (4472,'Ariela Pinching','Female','apinching1x@state.tx.us','Canada'),  (4689,'Dante Rakestraw','Male','drakestraw1y@slideshare.net','Indonesia'),  (7512,'Marilin Gretton','Female','mgretton1z@vimeo.com','China'),  (4135,'Merle Duffie','Female','mduffie20@wsj.com','Brazil'),  (5546,'Geralda Sibary','Female','gsibary21@fotki.com','Namibia'),  (6776,'Ada Heather','Male','aheather22@deliciousdays.com','Russia'),  (2991,'Raquel Bowle','Female','rbowle23@last.fm','Vietnam'),  (4245,'Carole Scuse','Male','cscuse24@google.cn','China'),  (3933,'Lebbie Winson','Male','lwinson25@e-recht24.de','China'),  (7325,'Stanford Rassmann','Male','srassmann26@stumbleupon.com','Colombia'),  (1365,'Sioux Ratley','Female','sratley27@spiegel.de','France'),  (8797,'Malina Durston','Female','mdurston28@overblog.com','Kazakhstan'),  (6213,'Kimberlee Menci','Male','kmenci29@addtoany.com','Sweden'),  (7889,'Gasper Siemantel','Male','gsiemantel2a@yahoo.com','Poland'),  (9059,'Brewster Rawlison','Male','brawlison2b@cnn.com','Philippines'),  (5794,'Arda Kelledy','Female','akelledy2c@time.com','Argentina'),  (2010,'Manya Windram','Male','mwindram2d@google.cn','South Sudan'),  (5847,'Alfy Shovel','Male','ashovel2e@theguardian.com','Russia'),  (8950,'Jaimie Undrell','Female','jundrell2f@columbia.edu','Russia'),  (1344,'Griff Conlaund','Female','gconlaund2g@google.com.au','Bosnia and Herzegovina'),  (4803,'Cindi Antoniazzi','Male','cantoniazzi2h@utexas.edu','China'),  (9539,'Terri-jo Norvell','Male','tnorvell2i@deviantart.com','Philippines'),  (8842,'Gail Karslake','Male','gkarslake2j@goodreads.com','United States'),  (5551,'Leandra Lodo','Female','llodo2k@eepurl.com','Colombia'),  (2428,'Octavia Mustill','Female','omustill2l@paginegialle.it','Sweden'),  (7485,'Claude Wyatt','Female','cwyatt2m@tamu.edu','Syria'),  (7318,'Phyllis Culross','Female','pculross2n@de.vu','Kenya'),  (9243,'Alameda Akast','Male','aakast2o@t-online.de','Guatemala'),  (3964,'Karin Pryor','Female','kpryor2p@desdev.cn','Peru'),  (7059,'Indira Bautiste','Male','ibautiste2q@fema.gov','China'),  (4359,'Micheil Brando','Female','mbrando2r@bandcamp.com','Malta');
-- Insert values into Table.2(Entity.2): 'position'  INSERT INTO position (position_id,job_title,main_skill,avg_salary) VALUES   ('iy22','Geological Engineer','Overseas Production',8751.40),  ('zw87','Health Coach II','Appeals',9973.20),  ('gi23','Office Assistant III','Active Directory',8435.22),  ('ff06','Account Representative II','Keyboards',10371.08),  ('hf02','Financial Analyst','RBAC',10149.73),  ('ox23','Office Assistant II','Qlogic',9465.05),  ('hl24','Tax Accountant','Aeroelasticity',17694.84),  ('ub43','Food Chemist','Oligonucleotides',7230.22),  ('lk61','Accountant IV','EHS',17997.62),  ('jg50','Senior Financial Analyst','RF Engineering',12742.07),  ('ta35','Legal Assistant','Volunteer Management',9052.44),  ('ri72','Director of Sales','Solvency II',13862.83),  ('di91','Accounting Assistant III','NIMS',16724.82),  ('oj24','Developer I','FFA',9796.48),  ('wj17','Senior Editor','JTAPI',17811.89),  ('rx71','VP Accounting','DSLAM',12247.57),  ('oi15','Administrative Officer','HTML Help Workshop',19386.76),  ('ct41','Analog Circuit Design manager','FP',10406.73),  ('kz43','Research Nurse','FI-AA',17721.14),  ('gg86','Business Systems Development Analyst','European Computer Driving Licence',16016.64),  ('cn83','Senior Cost Accountant','HAZOP Study',15309.74),  ('vr69','Internal Auditor','xPON',7708.40),  ('kv84','Payment Adjustment Coordinator','Art Direction',9195.72),  ('tm75','Software Consultant','SFP',12378.03),  ('vm75','Environmental Tech','Blood Pressure',16897.10),  ('sy08','Engineer III','NX-OS',19206.06),  ('pc04','Civil Engineer','Utility Construction',19384.58),  ('br35','Speech Pathologist','NX-OS',19325.51),  ('mx11','Physical Therapy Assistant','Dynamic Positioning',10973.93),  ('et28','Occupational Therapist','Asset Management',18192.25),  ('nb82','Financial Analyst','Insurance',15141.15),  ('td83','Physical Therapy Assistant','Young Adult Literature',18552.82),  ('en15','Nurse','XSI',7341.65),  ('iu56','Software Engineer I','Competitive Analysis',9307.65),  ('ty70','Community Outreach Specialist','FCNSP',16032.25),  ('qm51','Social Worker','VCI',8212.16),  ('zo79','Database Administrator III','RCMS',9776.32),  ('dj48','Financial Analyst','DNS Management',7341.35),  ('cu14','Librarian','ZBrush',14500.22),  ('to97','Social Worker','DMVPN',9598.63),  ('qq05','Speech Pathologist','Laptops',18095.49),  ('ep66','Account Coordinator','Zend Framework',14547.59),  ('sm32','Editor','Directing Others',19609.21),  ('ug77','Senior Financial Analyst','Whole House Renovations',18370.50),  ('yu73','Financial Advisor','Occupational Therapists',12972.87),  ('aq38','Financial Advisor','Back Office',17333.65),  ('sn65','Dental Hygienist','vCenter Server',12953.89),  ('af67','Assistant Media Planner','GCCS',8315.96),  ('kc93','Registered Nurse','Museum Collections',7037.35),  ('my11','Internal Auditor','Adult Education',16757.70),  ('vj13','Technical Writer','Call Centers',9249.26),  ('ho02','Geological Engineer','Functional Verification',17995.81),  ('ln01','Programmer I','CQ',8805.80),  ('fc98','Chief Design Engineer','DDM',19720.21),  ('wh41','VP Accounting','Tubing',12127.09),  ('pj87','Nuclear Power Engineer','Upstream',14148.06),  ('ae23','Project Manager','UB04',12545.40),  ('sn73','Statistician II','SAP BI',15807.07),  ('mo49','Teacher','Ductwork',19704.66),  ('au39','Chief Design Engineer','Athletic Administration',10569.65),  ('zq88','Business Systems Development Analyst','CQC',14116.06),  ('ju24','Recruiting Manager','Oil &amp;
Gas Industry',9618.78),  ('tz71','Quality Control Specialist','Valuation',7669.70),  ('zd42','Tax Accountant','FCAPS',17915.97),  ('bv77','Geological Engineer','Employer Branding',8377.44),  ('fm94','Developer I','BBP',19279.26),  ('th73','Project Manager','Kronos',12649.31),  ('oh61','Administrative Officer','WSGI',15138.84),  ('qm95','Teacher','Live Events',11940.72),  ('yf11','Executive Secretary','Git',10421.36),  ('vo65','Programmer IV','Manual Therapy',7356.92),  ('ki64','Executive Secretary','MC2',7641.43),  ('mh92','Nurse','Payments',15027.12),  ('mx34','Staff Scientist','Tutoring',16773.59),  ('nu97','Software Test Engineer III','UHF',19374.65),  ('wy52','Web Developer I','FFP',12907.84),  ('gl99','Executive Secretary','eBanking',17911.58),  ('ji73','Junior Executive','NMLS',14089.40),  ('re73','Editor','MPEG',11197.99),  ('cb52','Nuclear Power Engineer','Phase II Subsurface Investigations',13716.93),  ('nw64','Account Coordinator','Film Festivals',10599.39),  ('lm90','General Manager','Alternative Energy',10350.31),  ('zv33','Sales Associate','Presentation Skills',12564.96),  ('jg41','Junior Executive','Microsoft Project',17162.84),  ('mn17','Automation Specialist II','Operational Efficiency',11284.73),  ('pm19','VP Product Management','Dogs',14164.69),  ('ke13','Information Systems Manager','Professional Ethics',14809.25),  ('ab97','Senior Financial Analyst','PDMS Draft',7145.99),  ('tb10','Staff Scientist','System Deployment',16068.13),  ('rq40','Internal Auditor','Yardi Enterprise',17094.66),  ('ly86','Assistant Professor','CFOs',9350.76),  ('um64','Web Designer III','TWIC Card',15059.07),  ('ah34','Health Coach III','Python',11190.98),  ('rh14','Dental Hygienist','TMMi',7039.23),  ('rw76','Accounting Assistant III','DDE',9852.53),  ('fy55','Account Representative IV','Abstract Paintings',9091.63),  ('xb39','Environmental Tech','Employee Benefits',8888.93),  ('jd69','Research Nurse','DNA replication',18544.12),  ('pl60','Accounting Assistant III','Zen',13764.43),  ('gn60','Electrical Engineer','JCO',8253.40),  ('zo05','Research Assistant II','Creative Direction',15335.48),  ('dz07','Biostatistician III','Educational Leadership',7413.28),  ('jv67','Junior Executive','Knee',8516.09),  ('ho90','GIS Technical Architect','Group Policy',11775.55),  ('ui83','Occupational Therapist','Typo3',14739.62),  ('yi86','Senior Developer','International Economics',10421.96),  ('nm08','Chemical Engineer','Yacht Racing',7096.08),  ('ue63','Payment Adjustment Coordinator','Awesomeness',11631.66),  ('zv43','Geological Engineer','Medical Writing',17646.34),  ('sq07','Dental Hygienist','Amadeus',12937.65);
 ", , ,"-- Insert values into Table.3(Relation): 'apply' 
insert into apply (
	applicant_id,
	position_id
)
select a.applicant_id as applicant_id
     , b.position_id as position_id
from applicant as a
cross join position as b
where 1=1
limit (select FLOOR(RANDOM()*10)+1000)
;", , ,,,
A0231891A,/* The code is written for PostgreSQL */,"/*This database is a simplified version of a database for a job hunting platform. 
It has three tables - ""candidates"", ""jobs"" and ""application"" - to store the data of its individual and corporate users.
Table ""candidates"" stores each user's first_name, last_name, dob, skills, email and their 4-digit unique applicant identifier assigned by the platform. 
Table ""Jobs"" stores data regarding recuriting companies' name and city as well as their available jobs' title and salary. 
A company may have offices in different cities but the same company in the same city should has only one job title posted in the platform.
Last but not least, ""application"" table records the detailed information about the company, city and job title each candidate has applied for.
The code is written for PostgreSQL.
*/", , ,"CREATE TABLE IF NOT EXISTS CANDIDATES(
  applicant_id CHAR(16) PRIMARY KEY, 
  first_name VARCHAR(64) NOT NULL, 
  last_name VARCHAR(64) NOT NULL, 
  email VARCHAR(64) UNIQUE NOT NULL, 
  dob DATE NOT NULL, 
  skills VARCHAR(64) NOT NULL
);
CREATE TABLE IF NOT EXISTS JOBS(
  company VARCHAR(64) NOT NULL, 
  job_title VARCHAR(64) NOT NULL, 
  salary NUMERIC NOT NULL, 
  city VARCHAR(64) NOT NULL, 
  PRIMARY KEY (company, job_title,city)
);
CREATE TABLE application(
  applicant_id VARCHAR(16) REFERENCES CANDIDATES(applicant_id) ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED, 
  company VARCHAR(64), 
  job_title VARCHAR(64), 
  city VARCHAR(64),
  PRIMARY KEY (applicant_id, company, job_title,city), 
  FOREIGN KEY (company, job_title,city) REFERENCES JOBS(company, job_title,city) ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED
);", , ,"insert into CANDIDATES (Applicant_id, first_name, last_name, email, dob, skills) values (8727, 'Parrnell', 'Goodbarr', 'pgoodbarr0@shop-pro.jp', '1988-08-21', 'DC Circuits');
insert into CANDIDATES (Applicant_id, first_name, last_name, email, dob, skills) values (9613, 'Eustace', 'Hungerford', 'ehungerford1@foxnews.com', '1993-03-14', 'Corporate Real Estate');
insert into CANDIDATES (Applicant_id, first_name, last_name, email, dob, skills) values (3133, 'Tiffani', 'Hannigane', 'thannigane2@lulu.com', '1993-08-10', 'DVB-S');
 
insert into JOBS (company , job_title, salary, city) values ('Devbug', 'Biostatistician I', 20516, 'Ostankinskiy');
insert into JOBS (company , job_title, salary, city) values ('Skippad', 'Web Designer I', 12224, 'Kota Bharu');
insert into JOBS (company , job_title, salary, city) values ('Quamba', 'Human Resources Manager', 3462, 'Guanyao');", , ,"INSERT INTO application(applicant_id, company, job_title,city) 
select 
  applicant_id, 
  company, 
  job_title,
  city
from 
  candidates, 
  jobs 
order by 
  random() 
limit 
  1000;", , ,,,
A0231894X,/* The code is written for PostgreSQL */,"/* In my assignment, I create a set of tables, PEOPLE, LOCATION and VISIT, 
   which can help us find other people who may have close contact with the 
   COVID-19 patient through the places where the patient has arrived, 
   so as to avoid the further spread of the epidemic in time. 
   In the table PEOPLE, I record people's name, gender and email information. 
   In the table LOCATION, I record the places where people have been to. 
   Because I find that the specific location information of all cities around 
   the world can not be generated on mockaroo.com, I generate data only from 
   China, and I use longitude and latitude information to record the places 
   people have visited. Then, the table VISIT shows us who has been to which 
   places recently. With this method, once someone confirms COVID-19, we can 
   find out where he has been through the table, and find people who have been 
   to the same place with him. Then, we can test them in time to prevent the 
   spread of the epidemic. The following questions will be written for PostgreSQL. 
*/", , ,"CREATE TABLE IF NOT EXISTS PEOPLE (
	FIRST_NAME VARCHAR(50) NOT NULL,
	LAST_NAME VARCHAR(50) NOT NULL,
	GENDER VARCHAR(6) CHECK(GENDER = 'Male' OR GENDER = 'Female'),
	EMAIL VARCHAR(50) NOT NULL,
	PRIMARY KEY (FIRST_NAME, LAST_NAME, EMAIL)
);
CREATE TABLE IF NOT EXISTS LOCATION(
	COUNTRY VARCHAR(50),
	CITY VARCHAR(50),
	LONGITUDE VARCHAR(50),
	LATITUDE VARCHAR(50),
	PRIMARY KEY (LONGITUDE, LATITUDE)
);
CREATE TABLE IF NOT EXISTS VISIT(
	FIRST_NAME VARCHAR(50),
	LAST_NAME VARCHAR(50),
	EMAIL VARCHAR(50),
	FOREIGN KEY (FIRST_NAME, LAST_NAME, EMAIL) REFERENCES PEOPLE(FIRST_NAME, LAST_NAME, EMAIL) ON DELETE CASCADE DEFERRABLE,
	LONGITUDE VARCHAR(50),
	LATITUDE VARCHAR(50),
	FOREIGN KEY (LONGITUDE, LATITUDE) REFERENCES LOCATION(LONGITUDE, LATITUDE) ON DELETE CASCADE DEFERRABLE,
	PRIMARY KEY (FIRST_NAME, LAST_NAME, EMAIL, LONGITUDE, LATITUDE)
);", , ,"insert into PEOPLE (FIRST_NAME, LAST_NAME, GENDER, EMAIL) values ('Oralia', 'Vinnick', 'Female', 'ovinnick0@netvibes.com');
insert into PEOPLE (FIRST_NAME, LAST_NAME, GENDER, EMAIL) values ('Phebe', 'Ketts', 'Female', 'pketts1@comsenz.com');
insert into PEOPLE (FIRST_NAME, LAST_NAME, GENDER, EMAIL) values ('Fidel', 'Rivelon', 'Female', 'frivelon2@instagram.com');
 
insert into LOCATION (COUNTRY, CITY, LONGITUDE, LATITUDE) values ('China', 'Xiangyanglu', 111.6631302, 38.2792524);
insert into LOCATION (COUNTRY, CITY, LONGITUDE, LATITUDE) values ('China', 'Shanshi', 111.8568586, 37.2425649);
insert into LOCATION (COUNTRY, CITY, LONGITUDE, LATITUDE) values ('China', 'Tangjiakou', 114.886335, 40.767544);", , ,"INSERT INTO VISIT(FIRST_NAME, LAST_NAME, EMAIL, LONGITUDE, LATITUDE) 
SELECT PEOPLE.FIRST_NAME, PEOPLE.LAST_NAME, PEOPLE.EMAIL, LOCATION.LONGITUDE, LOCATION.LATITUDE
FROM PEOPLE, LOCATION ORDER BY RANDOM() LIMIT 1000;", , ,,,
A0231902R,/* The code is written for SQLite */,"/* 
 Based on real-life purchasing situations, this project is about to build a database of ""Car Market"", in terms of the ""Buyer"" table, the ""Car"" table and the ""Purchase"" table. Buyer table will contain the data of car-buyers, Car table will contain the data of all available cars, and Purchase table will contain the records of people purchasing cars.
 In the ""Buyer"" table, I will use ""buyer_id"", ""first_name"", ""last_name"", ""email"" and ""gender"" to characterize the buyers. In the ""Car"" table, the database will record information about the ""car_id"", ""car_model"", ""car_make"" and ""car_color"". In the ""Purchasing"" table, ""buyer_id"" will reference to the ""Buyer"" table, and ""car_id"" will reference to the ""Car"" table. Besides, there is also information about the number of cars purchased for each record and the price of the cars purchased.
I will build my database in SQLite3.
*/", , ,"CREATE TABLE IF NOT EXISTS Buyer (
 buyer_id VARCHAR(16) PRIMARY KEY,
 first_name VARCHAR(64) NOT NULL,
 last_name VARCHAR(64) NOT NULL,
 email VARCHAR(64) UNIQUE NOT NULL,
 gender VARCHAR(16) NOT NULL);
CREATE TABLE IF NOT EXISTS Car(
 car_id VARCHAR(16) PRIMARY KEY,
 car_model VARCHAR(64) NOT NULL,
 car_make VARCHAR(64) NOT NULL,
 car_color VARCHAR(16) NOT NULL);
CREATE TABLE IF NOT EXISTS Purchase(
 buyer_id VARCHAR(16) REFERENCES Buyer(buyer_id),
 car_id VARCHAR(16) REFERENCES Car(car_id),
 num NUMERIC NOT NULL,
 price NUMERIC NOT NULL);", , ,"/* Insert into Buyer Table*/ insert into Buyer (buyer_id, first_name, last_name, email, gender) values (10001, 'Darcie', 'Andryszczak', 'dandryszczak0@admin.ch', 'Male');
insert into Buyer (buyer_id, first_name, last_name, email, gender) values (10002, 'Denny', 'Puffett', 'dpuffett1@geocities.com', 'Non-binary');
insert into Buyer (buyer_id, first_name, last_name, email, gender) values (10003, 'Lenora', 'Ruggs', 'lruggs2@reuters.com', 'Bigender');
 
/* Insert into Car Table: */ insert into Car (car_id, car_model, car_make, car_color) values (30001, 'Silverado 3500', 'Chevrolet', 'Purple');
insert into Car (car_id, car_model, car_make, car_color) values (30002, '911', 'Porsche', 'Maroon');
insert into Car (car_id, car_model, car_make, car_color) values (30003, 'Camaro', 'Chevrolet', 'Khaki');", , ,"INSERT INTO Purchase
SELECT buyer_id, car_id, FLOOR(1+(RANDOM()+9223372036854775808)/2.0/9223372036854775808 * 44) AS num, FLOOR(100000+(RANDOM()+9223372036854775808)/2.0/9223372036854775808 * 200000) AS price
FROM
(SELECT FLOOR(1+(RANDOM()+9223372036854775808)/2.0/9223372036854775808 * 10) AS RndNum, buyer_id FROM Buyer) b, 
(SELECT FLOOR(1+(RANDOM()+9223372036854775808)/2.0/9223372036854775808 * 10) AS RndNum, car_id FROM Car) c
WHERE b.RndNum = c.RndNum;
SELECT * from Purchase ORDER BY RANDOM() LIMIT(10);", , ,,,
A0231904M,/* The code is written for PostgreSQL */,"/* 
There are 3 tables in this schema, alumni, car and own.
Entity 1
Table alumni contains 7 attibutes decribing the information of NUS's alumnus. 
I choose SSN as student_id, First name as first_name, Last name as last_name,
Email address as email address, Phone as phone_number, Gender(Binary) as gender,
Job title as job.
(using student_id as primary key)
Entity 2
Table car contains 4 attributes decribing the information of cars model.
I choose Car make as manufacturer, Car Model as model, 
Car Model Year as model_year, and Money as price.
(using composite of manufacture, model, model_year as primary key)
Relationship (many-to-many)
Table own describes the relationship between which alumni owns which model
of cars. Each alumni can owns more than 1 model of car, while each model
of cars can be owned by many alumnus.
(using composite of studentid, manufacture, model, model_year as primary key)
*/", , ,"CREATE TABLE IF NOT EXISTS alumni (
	student_id VARCHAR(50) PRIMARY KEY,
	first_name VARCHAR(50) NOT NULL,
	last_name VARCHAR(50) NOT NULL,
	email VARCHAR(50) UNIQUE NOT NULL,
	phone_number VARCHAR(50) UNIQUE NOT NULL,
	gender VARCHAR(50) NOT NULL,
	job VARCHAR(50) NOT NULL
);
CREATE TABLE IF NOT EXISTS car (
	manufacturer VARCHAR(50) NOT NULL,
	model VARCHAR(50) NOT NULL,
	model_year VARCHAR(50) NOT NULL,
	price VARCHAR(50) NOT NULL,
	PRIMARY KEY(manufacturer, model, model_year)
);
CREATE TABLE IF NOT EXISTS own(
	student_id VARCHAR(50) REFERENCES alumni(student_id)
	ON UPDATE CASCADE ON DELETE CASCADE
	DEFERRABLE INITIALLY DEFERRED,
	manufacturer VARCHAR(50),
	model VARCHAR(50),
	model_year VARCHAR(50),
	PRIMARY KEY (student_id , manufacturer, model, model_year),
	FOREIGN KEY (manufacturer, model, model_year) REFERENCES car(manufacturer, model, model_year)
		ON UPDATE CASCADE ON DELETE CASCADE
		DEFERRABLE INITIALLY DEFERRED);", , ,"insert into alumni (student_id, first_name, last_name, email, phone_number, gender, job) values ('620-05-2809', 'Skip', 'Bonnier', 'sbonnier0@nba.com', '921-701-3018', 'Female', 'Senior Developer');
insert into alumni (student_id, first_name, last_name, email, phone_number, gender, job) values ('384-93-3541', 'Kissee', 'Ayscough', 'kayscough1@go.com', '465-922-9919', 'Male', 'Help Desk Operator');
insert into alumni (student_id, first_name, last_name, email, phone_number, gender, job) values ('598-24-8470', 'Aime', 'Hasser', 'ahasser2@techcrunch.com', '254-347-6867', 'Male', 'Legal Assistant');
 
insert into car (manufacturer, model, model_year, price) values ('Infiniti', 'FX', 2004, '$112422.75');
insert into car (manufacturer, model, model_year, price) values ('Buick', 'Century', 1990, '$196647.96');
insert into car (manufacturer, model, model_year, price) values ('Mazda', 'B-Series', 2004, '$188054.16');", , ,"INSERT INTO own
SELECT student_id, manufacturer, model, model_year
FROM alumni, car
ORDER BY RANDOM() 
LIMIT 1000;", , ,,,
A0231905L,/* The code is written for PostgreSQL */,"/* 
   Over the past few months, people have found indoor activities to 
   entertain themselves. Along with the increase of activities like baking,
   making dalgona coffees and home workouts, reading has also increased. 
   Some MSBA students took the opportunity to create an online library so
   that people who are interested in reading but cannot travel to a library
   have the opportunity to borrow and read books online as per their 
   convenience. As you can see, it was very successful!
   Below there are three tables: library_members, books and loans. 
   library_members show us the details of the members of the library, books
   show us the details of the books and the loans table shows us who 
   borrowed what book.
*/", , ,"CREATE TABLE library_members (
  library_id INT PRIMARY KEY, 
  first_name VARCHAR(16) NOT NULL, 
  last_name VARCHAR(16) NOT NULL, 
  email VARCHAR(32) UNIQUE NOT NULL, 
  username VARCHAR(16) UNIQUE NOT NULL
);
CREATE TABLE books (
  isbn VARCHAR(16) PRIMARY KEY, 
  title VARCHAR(48) NOT NULL, 
  author VARCHAR(32) NOT NULL, 
  language VARCHAR(16) NOT NULL, 
  published VARCHAR(8) NOT NULL
);
CREATE TABLE loans (
  library_id INT NOT NULL REFERENCES library_members(library_id), 
  isbn VARCHAR (16) NOT NULL REFERENCES books(isbn)
);", , ,"insert into books (isbn, title, author, language, published) values ('064553402-1', 'iterate dynamic networks', 'Boonie Cutting', 'Persian', 2006);
insert into books (isbn, title, author, language, published) values ('980047431-5', 'implement 24/7 content', 'Carley Gaynesford', 'Kazakh', 1989);
insert into books (isbn, title, author, language, published) values ('247160983-X', 'synthesize B2B initiatives', 'Rosalie Middlewick', 'Montenegrin', 2005);
 
insert into library_members (library_id, first_name, last_name, email, username) values (43193975, 'Kendal', 'Speight', 'kspeight0@blog.com', 'kspeight0');
insert into library_members (library_id, first_name, last_name, email, username) values (98556647, 'Anthe', 'Groger', 'agroger1@senate.gov', 'agroger1');
insert into library_members (library_id, first_name, last_name, email, username) values (83109948, 'Batholomew', 'Benck', 'bbenck2@army.mil', 'bbenck2');", , ,"INSERT INTO loans 
SELECT 
  library_members.library_id, 
  books.isbn 
FROM 
  library_members, 
  books 
ORDER BY 
  random() 
LIMIT 
  1000;", , ,,,
A0231906J,/* The code is written for PostgreSQL */,"/* I have created three tables, including 'student', 'movie', and 'moviepreference',                         */
/* and use 'moviepreference' to linked up the other two tables.                                              */
/* The first table are informations of different students and I chose student's email to be the primary key  */
/* because every student has different email address.                                                        */
/* The second table: movie is a table that has a list of movie names, genre, movie language and ratings      */
/* and I chose the column 'movie', which stands for movie name, to be the primary key                        */
/* because the movie names in this table are all unique and not null.                                        */
/* The goal of this relational database is to see which students are into what kind of movie?                */
/* Therefore, the third table 'moviepreference' is to show the student's movie preference.                   */
/* The 'moviepreference' table contains two columns: emails of students(email) and movie names(movie).       */
/* The following codes is written for  PostgreSQL                                                            */", , ,"CREATE TABLE student (
	student_id VARCHAR(100),
	first_name VARCHAR(100)NOT NULL,
	last_name VARCHAR(100)NOT NULL,
	email VARCHAR(100)PRIMARY KEY,
	gender VARCHAR(50),
	Race VARCHAR(100),
	Department VARCHAR(100));
CREATE TABLE movie (
	movie VARCHAR(50)PRIMARY KEY,
	genres VARCHAR(50),
	language VARCHAR(50),
	country VARCHAR(50),
	ratings NUMERIC(2));
CREATE TABLE moviepreference (
	email VARCHAR(100),
	movie VARCHAR(100));", , ,"insert into student (student_id, first_name, last_name, email, gender, Race, Department) values ('26-520-1758', 'Winfield', 'Briar', 'wbriar0@gnu.org', 'Female', 'Latin American Indian', 'Legal');
insert into student (student_id, first_name, last_name, email, gender, Race, Department) values ('31-984-0310', 'Forester', 'Crop', 'fcrop1@webnode.com', 'Non-binary', 'Asian', 'Research and Development');
insert into student (student_id, first_name, last_name, email, gender, Race, Department) values ('16-759-1961', 'Phoebe', 'Brosh', 'pbrosh2@pcworld.com', 'Genderfluid', 'Latin American Indian', 'Marketing');
 
insert into movie (movie, genres, language, country, ratings) values ('Harley Davidson and the Marlboro Man', 'Action|Crime|Drama', 'Spanish', 'United States', 3);
insert into movie (movie, genres, language, country, ratings) values ('Paint Your Wagon', 'Comedy|Musical|Western', 'Finnish', 'China', 1);
insert into movie (movie, genres, language, country, ratings) values ('Blazing Saddles', 'Comedy|Western', 'Malayalam', 'China', 3);", , ,"INSERT INTO moviepreference
SELECT student.email, movie.movie FROM student, movie
ORDER BY RANDOM()
LIMIT 1000;", , ,,,
A0231907H,/* The code is written for PostgreSQL */,"/*Patients usually go to drugstores to buy common drugs. With stricter rules
issued by the state about management and control of drugs, XJZ Drugstore 
is  planning to build a database system to manage the their patients' drug 
purchase records to better monitor drug consumption and storage from 
1st Aug 2020 to 1st Aug 2021. The schema includes two entities and one 
relationship between them.
The first entity records information of patients, including some basic items
like the id one owns in the store, first name, last name, phone number and 
address. It also records the name and quantity which the patient buys, and 
the according purchase date.
The second entity records information of drugs, including durg id,drug
company and quantity of inventory in XJZ drugstore. It also includes drug's
production information like production date, production place, and expiration
date.
The relation is basically a many-to-many relationship linking the patient
and the drug the bought with particular patient_id and drug_id. To be more
straightforward and explicit it also includes the drug name and purchase date.
*/", , ,"CREATE TABLE IF NOT EXISTS patient (
	patient_id VARCHAR(64) NOT NULL,
	first_name VARCHAR(64) NOT NULL,
	last_name VARCHAR(64) NOT NULL,
	phone_number VARCHAR(64) UNIQUE NOT NULL,
	drug_name VARCHAR(200) NOT NULL,
	address VARCHAR(64) NOT NULL,
	quantity INT NOT NULL,
	purchase_date DATE NOT NULL,
	PRIMARY KEY (patient_id, drug_name, purchase_date));
CREATE TABLE IF NOT EXISTS drug (
	drug_id VARCHAR(64) PRIMARY KEY,
	drug_company VARCHAR(64) NOT NULL,
	production_date DATE NOT NULL,
	production_place VARCHAR(64) NOT NULL,
	expiration_date DATE NOT NULL,
	inventory INT NOT NULL);
CREATE TABLE IF NOT EXISTS purchase (
	drug_id VARCHAR(64) REFERENCES drug(drug_id)
	  ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE,
	patient_id VARCHAR(64) NOT NULL,
    drug_name VARCHAR(200) NOT NULL,
	purchase_date DATE NOT NULL,
	PRIMARY KEY (drug_id, patient_id, drug_name, purchase_date),
	FOREIGN KEY (patient_id, drug_name, purchase_date) REFERENCES
	  patient(patient_id, drug_name, purchase_date)
	  ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE);", , ,"BEGIN TRANSACTION;
SET CONSTRAINTS ALL DEFERRED;
insert into patient (patient_id, first_name, last_name, phone_number, address, drug_name, quantity, purchase_date) values ('6082451694', 'Norina', 'MacMenemy', '665-688-9487', '466 Clarendon Place', 'Grama Grass', 5, '2021-03-09');
insert into patient (patient_id, first_name, last_name, phone_number, address, drug_name, quantity, purchase_date) values ('4509209304', 'Christos', 'Witnall', '697-870-2169', '63 Acker Hill', 'SHISEIDO UV PROTECTIVE FOUNDATION', 4, '2020-12-26');
insert into patient (patient_id, first_name, last_name, phone_number, address, drug_name, quantity, purchase_date) values ('2097565557', 'Kassey', 'Osgood', '439-130-6469', '88971 Fair Oaks Way', 'Levora', 3, '2020-11-22'); 
insert into patient (patient_id, first_name, last_name, phone_number, address, drug_name, quantity, purchase_date) values ('5882975018', 'Jodee', 'Birtles', '605-205-0033', '903 Canary Junction', 'Morphine Sulfate', 4, '2021-05-03');
insert into patient (patient_id, first_name, last_name, phone_number, address, drug_name, quantity, purchase_date) values ('8046159689', 'Ebeneser', 'Smitheman', '612-232-5900', '68253 Eagan Hill', 'Lovastatin', 1, '2021-03-31');
END TRANSACTION;

BEGIN TRANSACTION;
SET CONSTRAINTS ALL DEFERRED;
insert into drug (drug_id, drug_company, production_date, production_place, expiration_date, inventory) values ('60-089-8331', 'Lake Erie Medical DBA Quality Care Products LLC', '2020-07-12', 'Cangzhou', '2023-12-21', 25);
insert into drug (drug_id, drug_company, production_date, production_place, expiration_date, inventory) values ('07-155-4168', 'Supervalu Inc', '2019-12-03', 'Bantay', '2022-09-06', 31);
insert into drug (drug_id, drug_company, production_date, production_place, expiration_date, inventory) values ('43-198-3516', 'Natural Health Supply', '2020-03-30', 'Energetik', '2023-10-10', 98);
END TRANSACTION;", , ,"BEGIN TRANSACTION;
SET CONSTRAINTS ALL DEFERRED;
INSERT INTO purchase (drug_id,patient_id, drug_name, purchase_date)
SELECT drug_id, patient_id, drug_name, purchase_date 
FROM (SELECT drug_id FROM drug) AS I1
CROSS JOIN (SELECT patient_id, drug_name, purchase_date FROM patient) AS I2
ORDER BY random() LIMIT 1000;
END TRANSACTION;", , ,,,
A0231908E,/* The code is written for PostgreSQL */,"/*I use these three table to describe the transactions of bitcoins. 
The first table contains the information about sellers while the second table contains the information about buyers.
The third table represents the transation of sellers and buyers.
Both of the first and the second table have four columns: Name, Bitcoin address, Email, Country. The bitcoin address
indicates the source or destination of payments. A person can have several bitcoin addresses while a bitcoin address can only belong to one person.
The third table records the buyers, seller, transaction date and transaction price.
*/", , ,"CREATE TABLE IF NOT EXISTS buyers(
	buyer_name VARCHAR(64) NOT NULL,
	bitcoin_address VARCHAR(64) PRIMARY KEY,
	email VARCHAR(64) UNIQUE NOT NULL,
	country VARCHAR(64) NOT NULL
);
CREATE TABLE IF NOT EXISTS sellers(
	seller_name VARCHAR(64) NOT NULL,
	bitcoin_address VARCHAR(64) PRIMARY KEY,
	email VARCHAR(64) UNIQUE NOT NULL,
	country VARCHAR(64) NOT NULL
);
CREATE TABLE IF NOT EXISTS transactions(
	buyer_address VARCHAR(64) REFERENCES buyers(bitcoin_address)
	ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
	seller_address VARCHAR(64) REFERENCES sellers(bitcoin_address)
	ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
	transaction_date DATE NOT NULL,
	transaction_price NUMERIC NOT NULL,
	PRIMARY KEY (buyer_address, seller_address, transaction_date)
);", , ,"insert into buyers (buyer_name, bitcoin_address, email, country) values ('smarchington0', '19HoJ9Ls1wbHFFYML5XWtrN9MKFXXdd61s', 'rbrecknock0@epa.gov', 'China');
insert into buyers (buyer_name, bitcoin_address, email, country) values ('kworrall1', '1LVk3ASyxHZW1KAxP1wfxNQi8u6vg2rNyg', 'afoottit1@ibm.com', 'Honduras');
insert into buyers (buyer_name, bitcoin_address, email, country) values ('lpeller2', '18xHQ8CF3SV7AAFuL8XXs3VmTbmqTEBuzg', 'lmerrett2@gravatar.com', 'Philippines');
 
insert into sellers (seller_name, bitcoin_address, email, country) values ('abarbara0', '12ANBtENvTq3ixzZC6Z4ZfzxdrCVrHTrbM', 'thirtzmann0@google.com.au', 'Philippines');
insert into sellers (seller_name, bitcoin_address, email, country) values ('mrafferty1', '1KK2tuYzPHpdXqKz2hZPqqmACmugN1jyxG', 'abarrick1@ox.ac.uk', 'Indonesia');
insert into sellers (seller_name, bitcoin_address, email, country) values ('gsawart2', '18NG22vCVAHsihLbFoxVca5CXKvvNzQk3S', 'cscargle2@exblog.jp', 'Brazil');", , ,"INSERT INTO transactions (
	select b.bitcoin_address, s.bitcoin_address, now() - ((random()*1000)::integer||' day')::interval, (random()*10000)::numeric(6,1) 
	from buyers as b,sellers as s order by random() limit 1000
);", , ,,,
A0231909A,/* The code is written for PostgreSQL */,"/*Table A describes personal information for individuals,
e.g.,id, first_name, last_name, email, gender, birthday.
Table C describes club information,
e.g.,id, club_name, email, address.
Table B describes whether individuals in Table A is a member of the clubs in Table B.
The code is written for PostgreSQL.
*/", , ,"create table person (
	id INT,
	first_name VARCHAR(50),
	last_name VARCHAR(50),
	email VARCHAR(50),
	gender VARCHAR(50),
	birthday DATE
);
create table club (
	id INT,
	club_name VARCHAR(50),
	email VARCHAR(50),
	address VARCHAR(50)
);
create table member_of (
	member_of VARCHAR(50)
);", , ,"insert into person (id, first_name, last_name, email, gender, birthday) values (1, 'Tobiah', 'Kacheller', 'tkacheller0@slideshare.net', 'Non-binary', '8/2/1981');
insert into person (id, first_name, last_name, email, gender, birthday) values (2, 'Flinn', 'Tuckett', 'ftuckett1@pcworld.com', 'Female', '12/25/1969');
insert into person (id, first_name, last_name, email, gender, birthday) values (3, 'Susann', 'Rodgier', 'srodgier2@sciencedaily.com', 'Genderfluid', '10/5/1955');
 
insert into club (id, club_name, email, address) values (1, 'Yvor', 'ypassey0@globo.com', '86776 Kensington Park');
insert into club (id, club_name, email, address) values (2, 'Emmalynn', 'ekenlin1@technorati.com', '647 Hauk Way');
insert into club (id, club_name, email, address) values (3, 'Erica', 'ecurry2@typepad.com', '4 Arrowood Place');", , ,"insert into member_of
select * from person, club order by random() limit 1000;", , ,,,
A0231912N,/* The code is written for PostgreSQL */,"/*The following case will be about customers purchasing items. The entity set E1 is ""customers"",
entity set E2 is ""drugs"", and the many-to-many relationship R would be ""orders"" which describes the relationship of customer buying drugs.
The codes are written for PostgresSQL.
*/
/* 
*/
/************************************************************************/
/* Write your answer in SQL below: */
DROP TABLE customers CASCADE;
CREATE TABLE IF NOT EXISTS customers (
	name VARCHAR(64) NOT NULL,
	email VARCHAR(64) PRIMARY KEY,
	race VARCHAR NOT NULL,
	medical_allergies BOOLEAN NOT NULL);
DROP table drugs CASCADE;
CREATE TABLE IF NOT EXISTS drugs(
	name VARCHAR NOT NULL,
	drug_id VARCHAR(32) PRIMARY KEY,
	price DECIMAL (5,2) NOT NULL CHECK (price>0),
	potential_allergies BOOLEAN NOT NULL);
DROP TABLE orders CASCADE;
CREATE TABLE IF NOT EXISTS orders(
	customer_email VARCHAR(64) REFERENCES customers(email),
	drug_id VARCHAR(32) REFERENCES drugs(drug_id));
/************************************************************************/
/* Question 1.d                                                         */
/*                                                                      */", , ,"DROP TABLE customers CASCADE;
CREATE TABLE IF NOT EXISTS customers (
	name VARCHAR(64) NOT NULL,
	email VARCHAR(64) PRIMARY KEY,
	race VARCHAR NOT NULL,
	medical_allergies BOOLEAN NOT NULL);

DROP table drugs CASCADE;
CREATE TABLE IF NOT EXISTS drugs(
	name VARCHAR NOT NULL,
	drug_id VARCHAR(32) PRIMARY KEY,
	price DECIMAL (5,2) NOT NULL CHECK (price>0),
	potential_allergies BOOLEAN NOT NULL);

DROP TABLE orders CASCADE;
CREATE TABLE IF NOT EXISTS orders(
	customer_email VARCHAR(64) REFERENCES customers(email),
	drug_id VARCHAR(32) REFERENCES drugs(drug_id));", , ,"insert into customers (name, email, race, medical_allergies) values ('Francesca Cleal', 'fcleal2p@blogspot.com', 'Peruvian', false);
insert into customers (name, email, race, medical_allergies) values ('Tait Bryden', 'tbryden2q@photobucket.com', 'Paraguayan', true);
insert into customers (name, email, race, medical_allergies) values ('Krissie Matkovic', 'kmatkovic2r@epa.gov', 'Malaysian', false);


insert into drugs (name, drug_id, price, potential_allergies) values ('Acetaminophen', '676479919', 11.13, false);
insert into drugs (name, drug_id, price, potential_allergies) values ('Dextromethorphan HBr and Guaifenesin', '650853380', 129.39, false);
insert into drugs (name, drug_id, price, potential_allergies) values ('TITANIUM DIOXIDE', '840172378', 131.51, false);", , ,"INSERT INTO orders(customer_email, drug_id)
	SELECT email, drug_id
	FROM customers, drugs
	ORDER BY RANDOM()
	LIMIT 1000;",,,,,
A0231915J,/* The code is written for PostgreSQL */,"/* the entity set E1 to be NETFLIX memberships, the entity set E2 to be 
NETFLIX online film and television works, and the relationship set R to be 
the record of which membership playing which video.
*/", , ,"CREATE TABLE IF NOT EXISTS memberships(
	fisrt_name VARCHAR(64) NOT NULL,
	last_name VARCHAR(64) NOT NULL,
	membership_id VARCHAR(16) PRIMARY KEY,
	email CHAR(64) UNIQUE NOT NULL);
CREATE TABLE IF NOT EXISTS film_and_television_works(
	work_name VARCHAR(128) PRIMARY KEY,
	work_id VARCHAR(16) UNIQUE NOT NULL,
	since DATE NOT NULL,
	rating DECIMAL(3,1) NOT NULL);
CREATE TABLE IF NOT EXISTS videos_play(
	membership_id VARCHAR(16)
	REFERENCES memberships(membership_id)
		ON UPDATE CASCADE
		ON DELETE CASCADE
		DEFERRABLE INITIALLY DEFERRED,
	video_name VARCHAR(128)
	REFERENCES film_and_television_works(work_name)
		ON UPDATE CASCADE
		ON DELETE CASCADE
		DEFERRABLE INITIALLY DEFERRED);", , ,"insert into memberships (fisrt_name, last_name, membership_id, email) values ('Dimitri', 'Granger', '23-106-7189', 'dgrangerl0@intel.com');
insert into memberships (fisrt_name, last_name, membership_id, email) values ('Aluino', 'Rubroe', '16-891-2685', 'arubroe1@storify.com');
insert into memberships (fisrt_name, last_name, membership_id, email) values ('Jaquelyn', 'McElory', '22-580-8446', 'jmcelory2@shinystat.com');
 
insert into film_and_television_works (work_name, work_id, since, rating) values ('Facing Windows (Finestra di fronte, La)', '7838164427', '2015-04-08', 8.6);
insert into film_and_television_works (work_name, work_id, since, rating) values ('Diary of a Shinjuku Thief (Shinjuku dorobo nikki)', '7749209948', '2019-03-27', 0.5);
insert into film_and_television_works (work_name, work_id, since, rating) values ('Captive, The (Prisonnière, La)', '2106937148', '2018-01-21', 7.7);", , ,"insert into videos_play
select memberships.membership_id,film_and_television_works.work_name 
from(select cast((random()*50)as int) as join_key,membership_id from memberships)
memberships inner join
(select cast((random()*50)as int) as join_key,work_name from film_and_television_works)
film_and_television_works
on memberships.join_key=film_and_television_works.join_key
limit 101;
select *
from videos_play;", , ,,,
A0231918A,/* The code is written for PostgreSQL. */,"/*The database contains three tables: People, Creditcard and Own.
People and Creditcard are two entity sets, while Own is the relationship set.
People contains three basic attributes of every person (first name, last name, email), with email being the primary key.
Creditcard also contains three attributes of a credit card (card number, card type, currency type), with card number being the primary key.
Own associates the emails of people to the credit card numbers that they have.
The code is written for PostgreSQL.
*/", , ,"CREATE TABLE people (
	first_name VARCHAR(50),
	last_name VARCHAR(50),
	email VARCHAR(50) PRIMARY KEY
);
CREATE TABLE creditcard (
	credit_card_no VARCHAR(50) PRIMARY KEY,
	credit_card_type VARCHAR(50),
	currency VARCHAR(50)
);
CREATE TABLE own(
	email VARCHAR(50) REFERENCES people(email),
	credit_card_no VARCHAR(50) REFERENCES creditcard(credit_card_no)
);", , ,"insert into creditcard (credit_card_no, credit_card_type, currency) values ('5336519348932487', 'mastercard', 'Yuan Renminbi');
insert into creditcard (credit_card_no, credit_card_type, currency) values ('201471471336735', 'diners-club-enroute', 'Peso');
insert into creditcard (credit_card_no, credit_card_type, currency) values ('675903410492897218', 'switch', 'Zloty');
 
insert into people (first_name, last_name, email) values ('Fran', 'Ebanks', 'febanks0@ezinearticles.com');
insert into people (first_name, last_name, email) values ('Sigismond', 'Dickins', 'sdickins1@slate.com');
insert into people (first_name, last_name, email) values ('Rance', 'Zoephel', 'rzoephel2@vinaora.com');", , ,"INSERT INTO own (email, credit_card_no)
SELECT email, credit_card_no FROM people, creditcard
ORDER BY random()
LIMIT 1000;", , ,,,
A0231919B,/* The code is written for PostgreSQL */,"/* My original example is used to record the feedback of (MSBA)students' performance 
from cooperated companies after the capstone projects. specifically, the companies must rate
the related students, one company might rate many students from different cohorts.
--1st table is Capstone_companies, description of the attributes are as follows:
name: the official name of the company; 
industry: the industry it belongs;
(name, industry): the composite key is the PK. According to the company law, 
companies in the same industry cannot have the same name, so it's unique;
since: the date when the company start to cooperate with MSBA program;
active: Boolean data. TRUE means the company is still maintaining a relationship with us, FALSE means it quits;
--2nd table is MSBA_students, description of the attributes are as follows:
first_name: the student's first name;
last_name: the student's last name;
email: the student's email address;
gender: M means male, F means female;
cohort: which cohort the student belongs, e.g. 2018;
dob: date of birth;
industry: the industry which the student most interested in;
student_id: the unique nusstu_id (use EIN as a substitute when generating fake data);
--3rd table is rating, description of the attributes are as follows:
name/industry: FK from Capstone_companies table
student_id: FK from MSBA_students table
(student_id, name, industry): PK, can uniquely define a rating record because 
one student can only participate one project for one time, and the company rates him/her only once;
score: specific rating (ranging from 0-10) from the company, invalid when less than 0; 
*/", , ,"CREATE TABLE Capstone_companies (
	name VARCHAR(64),
	industry VARCHAR(64),
	since DATE NOT NULL,
	active CHAR(5) NOT NULL,
	PRIMARY KEY (name, industry));
CREATE TABLE MSBA_students (
	first_name VARCHAR(64) NOT NULL,
	last_name VARCHAR(64) NOT NULL,
	email VARCHAR(64) UNIQUE NOT NULL,
	gender CHAR(1) NOT NULL,
	cohort INT NOT NULL,
	dob DATE NOT NULL,
	industry VARCHAR(64) NOT NULL,
	student_id VARCHAR(32) PRIMARY KEY);
CREATE TABLE Rating(
	student_id VARCHAR(32) REFERENCES MSBA_students(student_id),
	name VARCHAR(64),
	industry VARCHAR(64),
	FOREIGN KEY (name, industry) REFERENCES Capstone_companies(name, industry),
	PRIMARY KEY(student_id, name, industry),
	score int NOT NULL CHECK (score >= 0));", , ,"insert into Capstone_companies (name, industry, since, active) values ('Photolist', 'Office Equipment/Supplies/Services', '2018-05-01', true);
insert into Capstone_companies (name, industry, since, active) values ('Wordpedia', 'Industrial Machinery/Components', '2018-09-23', false);
insert into Capstone_companies (name, industry, since, active) values ('Devcast', 'Telecommunications Equipment', '2018-02-21', true);
 
insert into MSBA_students (student_id, first_name, last_name, email, gender, cohort, dob, industry) values ('30-6342202', 'Codie', 'Tinsley', 'ctinsley0@theatlantic.com', 'M', 2007, '1999-04-16', 'Business Services');
insert into MSBA_students (student_id, first_name, last_name, email, gender, cohort, dob, industry) values ('91-6083552', 'Kalvin', 'Emmison', 'kemmison1@typepad.com', 'M', 1995, '1999-02-23', 'Services-Misc. Amusement & Recreation');
insert into MSBA_students (student_id, first_name, last_name, email, gender, cohort, dob, industry) values ('67-6217275', 'Merill', 'Godmer', 'mgodmer2@tinyurl.com', 'M', 2010, '1995-07-25', 'Major Pharmaceuticals');", , ,"INSERT INTO Rating (student_id, name, industry, score) (
	SELECT s.student_id, c.name, c.industry, s.cohort FROM MSBA_students AS s, Capstone_companies AS c
	ORDER BY random() LIMIT 1000);
UPDATE Rating SET score = round(random()*10) 
FROM (SELECT round(random()*10) FROM generate_series(1,1000)) AS s;
/*since it's hard to directly insert the attribute score which is not in the two entities,
I choose to fill the domain using the attributecohort first(also int to follow the constraint),
and then update the column by generating a random data series ranging from 0-10 as the score */", , ,,,
A0231921N,"/* The code is written for PostgreSQL */
/*                                                                      */","/*                                                                      */
-- This application involves setting up 3 tables for a registry of
-- endangered animals linked to individuals who are licensed to foster them.
-- This is inspired by a federal white paper in USA which is considering 
-- issuing permits for applicants who want to help enhance breeding  
-- and survival of endangered animals.
/*                                                                      */
-- E1: The first table (animals) contains the animal details (4 columns). 
-- These are the scientific_name, common_name, endangered_status and 
-- license_needed columns. The primary key is the scientific_name of the 
-- animal which is unique to every species. 
-- There are 4 unique endangered_status (vulnerable, endangered, 
-- critically endangered and extinct in wild). License_needed is coded as 
-- true/false and only the vulnerable status does not require a license 
-- to own (i.e. false). This is enforced via CHECK constraints.
-- In addtion, endangered_status and license_needed have a NOT NULL constraint.
/*                                                                      */
-- E2: The second table (licensed_owners) contains details of licensed owners of 
-- endangered animals (7 columns). These are license_num, first_name, last_name,
-- email_address, address, us_city and us_state which are details that would be 
-- typically collected during a license application process. 
-- The primary key is the license_num as this is a unique number issued to 
-- all individuals who have been licensed. 
-- NOT NULL constraints are applied to email_address and first_name to ensure
-- that the table captures sufficient detail to reach out to owners.
/* 
-- R: Assuming the government has implemented mandatory registration each time 
-- owners want to foster more endangered animals (excluding the 'vulnerable'
-- status for which a license is not required), this table captures species 
-- registered to each license. Each entry represents the registration of 
-- 1 animal in that species (scientific_name) to each license holder (license_num).
-- Both fields (scientific_name and license_num) are foreign keys
-- to ensure that all registrations are for animals that exist in the
-- endangered animals table and that the registration applicant has a valid
-- license in the licensed_owners table.
*/", , ,"START TRANSACTION;
CREATE TABLE IF NOT EXISTS animals (
    scientific_name VARCHAR(256) PRIMARY KEY,
    common_name VARCHAR(256),
    endangered_status VARCHAR(64) NOT NULL, 
    license_needed VARCHAR(32) NOT NULL,
    CONSTRAINT status_restriction
        CHECK(endangered_status in ('vulnerable', 'endangered', 'critically endangered', 'extinct in wild')
        ),
    CONSTRAINT license_needed_if
        CHECK(
            (endangered_status = 'vulnerable' AND license_needed = 'False') OR
            (endangered_status != 'vulerable' AND license_needed = 'True')
        )
);
CREATE TABLE IF NOT EXISTS licensed_owners (
    license_num INT PRIMARY KEY,
    first_name VARCHAR(32) NOT NULL,
    last_name VARCHAR(32),
    email_address VARCHAR(256) NOT NULL,
    address VARCHAR(256),
    us_city VARCHAR(32),
    us_state VARCHAR(32)
);
CREATE TABLE IF NOT EXISTS register (
    scientific_name VARCHAR(256) REFERENCES animals(scientific_name) DEFERRABLE INITIALLY DEFERRED, 
    license_num INT REFERENCES licensed_owners(license_num) DEFERRABLE INITIALLY DEFERRED
);
COMMIT; 
/* do not cascade FK updates, don't want undetected deletions of data */", , ,"/* Populating the animals table */ START TRANSACTION;
INSERT INTO animals VALUES ('melursus ursinus','bear, sloth','endangered','True');
INSERT INTO animals VALUES ('amazona sp.','amazon parrot (unidentified)','extinct in wild','True');
 
INSERT INTO animals VALUES ('anas punctata','teal, hottentot','vulnerable','False');
/* Populating the licensed_owners table */ INSERT INTO licensed_owners VALUES (340349267,'Milt','Frain','mfrain7o@homestead.com','82 Mendota Junction','Washington','District of Columbia');
INSERT INTO licensed_owners VALUES (830306052,'Dottie','Ambresin','dambresinpc@networkadvertising.org','2 Waxwing Junction','Sacramento','California');", , ,"/* Populating the register table with 1 SQL INSERT statement with random() */
START TRANSACTION;
INSERT INTO register 
    SELECT an.scientific_name, lo.license_num
    FROM animals an , licensed_owners lo
    WHERE an.endangered_status != 'vulnerable' 
    ORDER BY random()
    LIMIT 1000;
COMMIT;", , ,,,
A0231922M,"/* The code is written for PostgreSQL */
/* A0231922M */","/*Senario: we are interested to know animals' ecological distribution, 2 tables are created, animals and thier habitat/locations respectively; A relationship ""lives in"" is used to map specific animal and the city it is in.
E1 is table ""animals"", with their common name, sicentific name(primary key), estimated life span, and wether or not a carnivore.
E2 is table ""locations"", with country, country code, and city name(primary key).
R is the relationship ""lives_in"", with 2 foreign keys animals(scientific name) and locations(city name).*/",,,"CREATE TABLE IF NOT EXISTS animals (
com_name VARCHAR(64) NOT NULL,
sci_name VARCHAR(64) PRIMARY KEY,
life_span NUMERIC NOT NULL,
carnivore BOOL NOT NULL,
CHECK (life_span > 0)
); 
CREATE TABLE IF NOT EXISTS locations (
country VARCHAR(64) NOT NULL,
code CHAR(2) NOT NULL,
city VARCHAR(32) PRIMARY KEY
); 
CREATE TABLE IF NOT EXISTS Lives_in (
animal_name VARCHAR(64) REFERENCES animals(sci_name),
place varchar(64) REFERENCES locations(city),
PRIMARY KEY(animal_name, place)
); 
/*DELETE FROM lives_in;
DELETE FROM animals;
DELETE FROM locations;*/", , ,"insert into animals (com_name, sci_name, carnivore, life_span) values ('Mississippi alligator', 'Alligator mississippiensis', false, 18.56);
insert into animals (com_name, sci_name, carnivore, life_span) values ('Snake-necked turtle', 'Chelodina longicollis', true, 25.31);
insert into animals (com_name, sci_name, carnivore, life_span) values ('Lesser flamingo', 'Phoeniconaias minor', false, 20.99);

insert into locations (country, code, city) values ('Cyprus', 'CY', 'Meneou');
insert into locations (country, code, city) values ('France', 'FR', 'Saint-Maixent-l''École');
insert into locations (country, code, city) values ('Indonesia', 'ID', 'Sadang Kulon');", , ,"insert into Lives_in (animal_name, place)
	SELECT animals.sci_name as random, locations.city as random
	FROM animals, locations
	ORDER BY random() limit 1000;",,,,,
A0231929Y,"/* The code is written for PostgreSQL 
/* The code is written for SQLite */","/*In this project, I plan to create a case about the usage of mobile applications. 
This example contains three tables: 'users', 'app', and 'usage'
The 'users' table and the 'app' table correspond to the two entity sets;
The 'usage' table is related to the relationship.
The content of these tables is following:
E1: users, attributes: name, phone, email, and job
'name' represents the name of each user, 
'phone' represents the phone number of each user,
'email' represents the email address of each user,
'job' represents the occupation of each user. 
Primary key is (name, phone)
E2: apps, attributes: app_name, app_id, version, and price
'app_name' represents the name of each application, 
'app_id' represents a specific ID of each application, 
'version' represents the version of each application, 
'price' represents the price of each application.
Primary key is (app_id, version)
R: usage, attributes: name, phone, app_id, version
'name' represents the name of each user, 
'phone' represents the phone number of each user,
'app_id' represents a specific ID of each application,
'version' represents the version of each application,
Primary key is (name, phone, app_id, version)
*/", , ,"## Table users
CREATE TABLE IF NOT EXISTS users (
name VARCHAR(64) NOT NULL, 
phone NUMERIC NOT NULL,
email VARCHAR(64) UNIQUE NOT NULL,
job VARCHAR(64) NOT NULL,
PRIMARY KEY (name, phone));
## Table apps
CREATE TABLE IF NOT EXISTS apps (
app_name VARCHAR(64) NOT NULL, 
app_id VARCHAR(50) NOT NULL,
version VARCHAR(50) NOT NULL,
price DECIMAL(2, 2),
PRIMARY KEY (app_id, version));
## Table usage
CREATE TABLE IF NOT EXISTS usage (
name VARCHAR(64) NOT NULL REFERENCES users(name),
phone NUMERIC NOT NULL REFERENCES users(phone),
app_id VARCHAR(50) NOT NULL,
version CHAR(3) NOT NULL,
PRIMARY KEY (name, phone, app_id, version),
FOREIGN KEY (app_id, version) REFERENCES apps (app_id, version));", , ,"## Populate table users INSERT INTO users (name, phone, email, job) values ('Fayette Bastin', '8258124107', 'fbastin0@mtv.com', 'Food Chemist');
INSERT INTO users (name, phone, email, job) values ('Mirabel Howford', '1196327573', 'mhowford1@phpbb.com', 'Staff Accountant IV');
INSERT INTO users (name, phone, email, job) values ('Lexy Walter', '7138606677', 'lwalter2@tumblr.com', 'Teacher');
 
## Populate table apps INSERT INTO apps (app_name, app_id, version, price) values ('Tempsoft', 'com.oakley.Bigtax', '0.88', '$9.81');
INSERT INTO apps (app_name, app_id, version, price) values ('Domainer', 'org.opensource.Redhold', '9.2.5', '$1.28');
INSERT INTO apps (app_name, app_id, version, price) values ('Bitwolf', 'com.wired.Holdlamis', '1.2.4', '$3.38');", , ,"## Populate table usage
INSERT INTO usage 
SELECT c.name, c.phone, p.app_id, p.version
FROM users c, apps p ORDER BY RANDOM()
LIMIT 1000;", , ,,,
A0231930N,/* The code is written for PostgreSQL */,"/* In this example, we have generated a relational database for a pharmaceutical
company, which consists of three tables:
a) drugs (E1)
Which includes data regarding the drug name,company, price, diagnoses code
We create this table by running drugs.sql on PostgresSQL
b) purchases (R)
Which includes data regarding the drug name,customer name, price, purchase date
We create this table by running purchase.sql on PostgresSQL
c) patient (E2)
Which includes data regarding the customer name, gender, location, drug name, diagnoses code
*/", , ,"create table IF NOT EXISTS drugs (
	drugs_id INT NOT NULL PRIMARY KEY,
	drug_company VARCHAR(100) NOT NULL,
	drug_name VARCHAR(100) NOT NULL,
	drug_price NUMERIC(10) NOT NULL CHECK(drug_price>0),
	diagnosis_code VARCHAR(50) NOT NULL
);
create table IF NOT EXISTS patient (
	customer_id INT NOT NULL PRIMARY KEY,
	customer_name VARCHAR (50) NOT NULL,
	customer_gender VARCHAR(5) NOT NULL,
	customer_location VARCHAR(100) NOT NULL
);
create table IF NOT EXISTS purchases (
	purchases_id INT NOT NULL PRIMARY KEY,
	drug_name VARCHAR(100) NOT NULL,
	drug_price NUMERIC(100) NOT NULL CHECK (drug_price>0),
	customer_name VARCHAR(50) NOT NULL,
	drugs_id INT NOT NULL REFERENCES drugs (drugs_id),
	customer_id INT NOT NULL REFERENCES patient (customer_id)
);
drop table patient
drop table purchases
drop table drugs",,,"insert into drugs (drugs_id, drug_company, drug_name, drug_price, diagnosis_code) values (1, 'Torrent Pharmaceuticals Limited', 'OLANZAPINE', 867.31, 'T63031A');
insert into drugs (drugs_id, drug_company, drug_name, drug_price, diagnosis_code) values (2, 'DIRECT RX', 'LORATADINE', 759.63, 'T83090');
insert into drugs (drugs_id, drug_company, drug_name, drug_price, diagnosis_code) values (3, 'F&CO Co., Ltd.', 'IT RADIANT MULTIPLE CC FOR MAN', 974.68, 'B967');

insert into patient (customer_id, customer_name, customer_gender, customer_location) values (1, 'Eustacia Brettoner', 'F', 'China');
insert into patient (customer_id, customer_name, customer_gender, customer_location) values (2, 'Gertie Mussen',  'F', 'Sweden');
insert into patient (customer_id, customer_name, customer_gender, customer_location) values (3, 'Penelopa Burchfield',  'F', 'Montenegro');", , ,"SELECT * FROM drugs, patient
ORDER BY RANDOM() LIMIT 1000;",,,,,
A0231931M,/* The code is written for PostgreSQL */,"/*My example is for students in a University. The first table is students 
and the content inside are first name, last name, email, date of birth, and student ID.
The second table is university and the content inside are university names and their rankings.
The third table is student and universtion relation and the content inside are 
student ID and university name
*/", , ,"CREATE TABLE students (
first_name VARCHAR(64),
last_name VARCHAR(64),
email VARCHAR(64) UNIQUE,
birthdate DATE NOT NULL,
studentid VARCHAR(16) PRIMARY KEY,
UNIQUE (first_name, last_name));
CREATE TABLE university (
university_name VARCHAR(100) PRIMARY KEY,
ranking INT NOT NULL);
CREATE TABLE relation (
studentid VARCHAR(16) REFERENCES students(studentid)
ON UPDATE CASCADE ON DELETE CASCADE
DEFERRABLE INITIALLY DEFERRED,
university_name VARCHAR(100) REFERENCES university(university_name)
ON UPDATE CASCADE ON DELETE CASCADE
DEFERRABLE INITIALLY DEFERRED,
PRIMARY KEY (studentid, university_name));", , ,"insert into students (first_name, last_name, email, birthdate, studentid) values ('Fee', 'Mabbot', 'fmabbot0@people.com.cn', '2/25/2019', 1);
insert into students (first_name, last_name, email, birthdate, studentid) values ('Jelene', 'Keig', 'jkeig1@imdb.com', '1/11/2020', 2);
insert into students (first_name, last_name, email, birthdate, studentid) values ('Jolene', 'McCartan', 'jmccartan2@clickbank.net', '7/12/2019', 3);
 
insert into university (university_name, ranking) values ('Sichuan Normal University', 1);
insert into university (university_name, ranking) values ('Naval Postgraduate School', 2);
insert into university (university_name, ranking) values ('Our Lady of the Lake University', 3);", , ,"INSERT INTO relation (studentid, university_name)
SELECT s.studentid, u.university_name
FROM students as s, university as u ORDER BY RANDOM() LIMIT 1000;", , ,,,
A0231933J,/* The code is written for PostgreSQL */,"/*In university A, the students are taught by several professors. Three tables are created for this many-to-many
relationship between students and professors. These three tables include table 'student', table 'professor' 
and table 'taughtby'. The table 'student' contains the information about 100 students' first name, last name 
and email and the students' email is the unique value. The table 'professor' contains 100 professors' id, 
first_name, last_name and gender and the professors' id is the unique value. The table 'taughtby' connects the
above two tables, which includes students' email from the table 'student' and professor id from the table 
'professor'. It contains the many-to-many relationship between the students and professors. This table has 
1000 relationships between the students and professors, which are random selected from the all the possible 
relationships. PostgreSQL is written for the following questions.
*/", , ,"CREATE TABLE student (
first_name VARCHAR(64) NOT NULL,
last_name VARCHAR(64) NOT NULL,
email VARCHAR(64) PRIMARY KEY
);
CREATE TABLE professor (
professor_id VARCHAR(64) PRIMARY KEY,
first_name VARCHAR(64) NOT NULL,
last_name VARCHAR(64) NOT NULL,
gender VARCHAR(64) NOT NULL
);
CREATE TABLE taughtby (
student_email VARCHAR(64) NOT NULL,
professor_id VARCHAR(64) NOT NULL,
foreign key(student_email) references student(email),
foreign key(professor_id) references professor(professor_id)
);", , ,"insert into student (first_name, last_name, email) values ('Robbie', 'Ratnage', 'rratnage0@sciencedirect.com');
insert into student (first_name, last_name, email) values ('Nana', 'Scholl', 'nscholl1@ning.com');
insert into student (first_name, last_name, email) values ('Cheryl', 'Izacenko', 'cizacenko2@youtu.be');
 
insert into professor (professor_id, first_name, last_name, gender) values (1, 'Meg', 'Snead', 'Female');
insert into professor (professor_id, first_name, last_name, gender) values (2, 'Nickey', 'Dillon', 'Bigender');
insert into professor (professor_id, first_name, last_name, gender) values (3, 'Norene', 'Machon', 'Non-binary');", , ,"insert into taughtby (student_email,professor_id)
SELECT  
    *
FROM
(
    SELECT
        *
    FROM
        (
        SELECT 
            student.email AS student_email, professor.professor_id AS professor_id
        FROM
            student CROSS JOIN professor
        ORDER BY
            random()
        ) AS s0
    LIMIT
        1000 
) AS s1
ORDER BY
    student_email, professor_id;", , ,,,
A0231936A,/* The code is written for PostgreSQL */,"/* I would make entity set E1 to be ""students,"" a list of NUS           */
/* students' student id, first name, last name, gender, and email.      */
/* The primary key of ""students"" table would be student_id.             */
/* Entity set E2 could be ""vaccines,"" a list of vaccines' name,         */
/* developer, and number of doses required. The primary key would be the*/
/* combination of vaccine name and developer.                           */
/* Relationship set R could be ""vaccination_choices,"" which links NUS   */
/* students' IDs to the WTO certified vaccines' names and developers,   */
/* giving the choices of vaccines that each NUS student have.           */
/* The 'vaccination records' table contains student id (referencing     */
/* ""students"" table), vaccine name, and developer (vaccine name and     */
/* developer as the foreign key referencing ""vaccines"" table's          */
/* primary key). The primary key for vaccination records table is the   */
/* composite of student id, vaccine name and developer.                 */
/* The code in the following questions is written for PostgreSQL.       */", , ,"DROP TABLE students CASCADE;
DROP TABLE vaccines CASCADE;
DROP TABLE IF EXISTS vaccination_choices;
CREATE TABLE students(
	student_id VARCHAR(16) PRIMARY KEY,
	first_name VARCHAR(64) NOT NULL,
	last_name VARCHAR(64) NOT NULL,
	gender VARCHAR(64),
	email VARCHAR(64) UNIQUE
	);
CREATE TABLE vaccines(
	vaccine_name VARCHAR(500),
	developer VARCHAR(500),
	number_of_doses NUMERIC CHECK (number_of_doses > 0 AND number_of_doses < 4),
	PRIMARY KEY(vaccine_name, developer)
	);
CREATE TABLE vaccination_choices(
	student_id VARCHAR(16) REFERENCES students(student_id),
	vaccine_name VARCHAR(500),
	developer VARCHAR(500),
	FOREIGN KEY (vaccine_name, developer) REFERENCES vaccines(vaccine_name, developer)
		ON UPDATE CASCADE ON DELETE CASCADE,
	PRIMARY KEY (student_id, vaccine_name, developer)
	);", , ,"DROP TABLE students CASCADE;
DROP TABLE vaccines CASCADE;
DROP TABLE IF EXISTS vaccination_choices;
 
INSERT INTO students VALUES('97','Hayden','Phillips','Male','Hayden_Phillips8669@deons.tech');
INSERT INTO students VALUES('98','Ema','Mason','Female','Ema_Mason1046@naiker.biz');
INSERT INTO students VALUES('99','Benny','Fowler','Male','Benny_Fowler929@ovock.tech');", , ,"CREATE TABLE vaccination_choices(
	student_id VARCHAR(16) REFERENCES students(student_id),
	vaccine_name VARCHAR(500),
	developer VARCHAR(500),
	FOREIGN KEY (vaccine_name, developer) REFERENCES vaccines(vaccine_name, developer)
		ON UPDATE CASCADE ON DELETE CASCADE,
	PRIMARY KEY (student_id, vaccine_name, developer)
	);
INSERT INTO vaccination_choices
SELECT s.student_id, v.vaccine_name, v.developer
FROM students s, vaccines v
ORDER BY random() limit 1000
", , ,,,
A0231941L,/* The code is written for PostgreSQL */,"/* This is a database to store online language modules registration records.
Define entity set E1 to be students, entity set E2 to be modules, 
many-to-many relationship set R to be registrations. 
For table students, it stores fields studentID, student name,
date of birth and email address.
For table modules, it stores fields moduleID, module name, credit unit for each module.
For table registrations, it stores fields studentID and moduleID
to associate each student to language modules they registered.
Code written for following questions is for PostgreSQL.
*/", , ,"CREATE TABLE IF NOT EXISTS students (
studentid VARCHAR (16) PRIMARY KEY,
student_name VARCHAR (64) NOT NULL,
dob DATE NOT NULL,
email VARCHAR(64) UNIQUE NOT NULL);
CREATE TABLE IF NOT EXISTS modules (
moduleid VARCHAR (16) PRIMARY KEY,
module_name VARCHAR (64) NOT NULL,
credit_unit INT NOT NULL);
CREATE TABLE registrations (
studentid VARCHAR(16),
moduleid VARCHAR(16),
FOREIGN KEY (studentid) REFERENCES students(studentid)
	ON UPDATE CASCADE,
FOREIGN KEY (moduleid) REFERENCES modules(moduleid)
	ON UPDATE CASCADE,
PRIMARY KEY(studentid, moduleid));", , ,"insert into students (studentid, student_name, dob, email) values ('v09555587t', 'Bucky Metzke', '10/30/1938', 'bmetzke0@google.it');
insert into students (studentid, student_name, dob, email) values ('i48155351w', 'Montague Andreev', '08/01/1914', 'mandreev1@java.com');
insert into students (studentid, student_name, dob, email) values ('q61136286h', 'Juan Greetland', '02/19/1992', 'jgreetland2@seattletimes.com');
 
insert into modules (moduleid, module_name, credit_unit) values ('qx2528', 'West Frisian', 4);
insert into modules (moduleid, module_name, credit_unit) values ('qb3588', 'Belarusian', 4);
insert into modules (moduleid, module_name, credit_unit) values ('ho1504', 'Estonian', 2);", , ,"INSERT INTO registrations
SELECT c.studentid, m.moduleid
from students c CROSS JOIN modules m
ORDER BY random() <= 0.1
LIMIT 1000;", , ,,,
A0231945A,/* The code is written for PostgreSQL */,"/*There tables are created to simulate stock trading database, recording the trading data, only the investment part.We don't take stock redemption into account。
First, create a table 'investors' for investor set.
Table 'investors' has four attributes:credit_card_id,first_name, last_name and person_stock_market.
Credit_card_id is also the primary key to identify the investors.
Second, create a table 'stocks' for stock set.
Table 'stocks' has four attributes:stock_symbol, stock_name,stock_market_cap and stock_market.
The stock symbol is chosen to be the primary key to identify the stocks.
Third, create a table investment associating investor's credit card number to stock symbol.
Table 'investment' has five attributes: credit_card_id, stock_symbol, stock_market, invest_date, invest_dollar.
'invest_dollar' is to record the amount of money invested by the investors(unit:dollar) and invest_date is to record the investment date.
This investment relationship constaints that investors only invest in the stock market they aim at, like NASDAQ.
(credit_card_id, stock_symbol, invest_date) was set as the primary key.
Table 'investors' and table 'stocks' are filled with 100 rows.
Table 'investment' provides 1000 rows of all the possible investment data, chosen randomly.
*/", , ,"DROP TABLE investors CASCADE;;
DROP TABLE stocks CASCADE;;
DROP TABLE investment;
CREATE TABLE IF NOT EXISTS investors(
	credit_card BIGINT PRIMARY KEY,
	first_name  CHAR(50)   NOT NULL,
	last_name   CHAR(50)   NOT NULL,
	person_stock_market CHAR(10) NOT NULL CONSTRAINT format 
	CHECK(person_stock_market = 'NASDAQ' OR person_stock_market ='NYSE')
);
CREATE TABLE IF NOT EXISTS stocks(
	stock_symbol CHAR(100) PRIMARY KEY,
	stock_name  CHAR(100) NOT NULL,
	stock_market_cap CHAR(100) NOT NULL,
	stock_market CHAR(10) NOT NULL
);
CREATE TABLE IF NOT EXISTS investment(
	credit_card_id   BIGINT,
	stock_symbol CHAR(100) NOT NULL,
	stock_market CHAR(10) NOT NULL,
	invest_date DATE NOT NULL,
	invest_dollar INT NOT NULL,	
	FOREIGN KEY (credit_card_id) REFERENCES investors(credit_card)
	ON UPDATE CASCADE ON DELETE CASCADE
	DEFERRABLE INITIALLY DEFERRED,
	FOREIGN KEY (stock_symbol) REFERENCES stocks(stock_symbol)
	ON UPDATE CASCADE ON DELETE CASCADE
	DEFERRABLE INITIALLY DEFERRED,
	PRIMARY KEY (credit_card_id, stock_symbol,invest_date)
);", , ,"insert into investors (credit_card, first_name, last_name, person_stock_market) values ('372301893209769', 'Matthaeus', 'Balffye', 'NYSE');
insert into investors (credit_card, first_name, last_name, person_stock_market) values ('490523761034289577', 'Matthew', 'Thying', 'NASDAQ');
insert into investors (credit_card, first_name, last_name, person_stock_market) values ('630421212805200629', 'Nicola', 'Bridell', 'NASDAQ');

insert into stocks (stock_name, stock_market_cap, stock_market, stock_symbol) values ('National CineMedia, Inc.', '$493.54M', 'NASDAQ', 'NCMI');
insert into stocks (stock_name, stock_market_cap, stock_market, stock_symbol) values ('Trinseo S.A.', '$2.86B', 'NYSE', 'TSE');
insert into stocks (stock_name, stock_market_cap, stock_market, stock_symbol) values ('National Research Corporation', '$672.9M', 'NASDAQ', 'NRCIA');", , ,"insert into investment(credit_card_id, stock_symbol, stock_market, invest_date, invest_dollar) 
SELECT investors.credit_card, stocks.stock_symbol, stocks.stock_market, 
(NOW() - '1 year'::INTERVAL * ROUND(RANDOM() * 100))::DATE , (random()*1000 +1000)
FROM investors,stocks
WHERE investors.person_stock_market = stocks.stock_market
ORDER BY random() 
LIMIT 1000;
SELECT * FROM investment",,,,,
A0231947Y,/* The code is written for PostgreSQL */,"/* I would like to develop an application for managing the data of my 
customers' stocks. The first entity set E1, 'users', shows several customers' 
information, and includes their userid, first name, last name, email, 
password and their country. The second entity set E2, 'stock', is used to 
manage the list of stocks and consists of stock market, stock symbol, 
stock name and its sector. Finally, the table 'portfolio' associates 
the userid of the customers with the stock symbol and stock name which 
the customers buy and own. The quantity of customers' stocks
can also be found in this table.
*/", , ,"CREATE TABLE IF NOT EXISTS users (
	userid VARCHAR(16) PRIMARY KEY,
	first_name VARCHAR(64) NOT NULL,
	last_name VARCHAR(64) NOT NULL,
	email VARCHAR(64) UNIQUE NOT NULL,
	password_no VARCHAR(16) NOT NULL,
	country VARCHAR(16) NOT NULL);
CREATE TABLE IF NOT EXISTS stock (
	stock_market VARCHAR(16) NOT NULL,
	stock_symbol VARCHAR(16),
	stock_name VARCHAR(64),
	stock_sector VARCHAR(32) NOT NULL,
	PRIMARY KEY(stock_symbol, stock_name));
CREATE TABLE portfolio(
	userid VARCHAR(16) REFERENCES users(userid)
	ON UPDATE CASCADE ON DELETE CASCADE
	DEFERRABLE INITIALLY DEFERRED,
	stock_symbol VARCHAR(16),
	stock_name VARCHAR(64),
	PRIMARY KEY(userid, stock_symbol, stock_name),
	FOREIGN KEY (stock_symbol, stock_name) REFERENCES stock (stock_symbol, stock_name)
	ON UPDATE CASCADE ON DELETE CASCADE
	DEFERRABLE INITIALLY DEFERRED,
	share_quantity INTEGER);", , ,"insert into users (userid, first_name, last_name, email, password_no, country) values ('jhuitt0', 'Jaine', 'Huitt', 'jhuitt0@answers.com', 'kmbwKN1en5yU', 'Hong Kong');
insert into users (userid, first_name, last_name, email, password_no, country) values ('mpridgeon1', 'Maia', 'Pridgeon', 'mpridgeon1@mysql.com', 'g2rRCf933', 'South Korea');
insert into users (userid, first_name, last_name, email, password_no, country) values ('robruen2', 'Ros', 'O''Bruen', 'robruen2@godaddy.com', 'epAo66BMT', 'Russia');
 
insert into stock (stock_market, stock_symbol, stock_name, stock_sector) values ('NYSE', 'DLR^H', 'Digital Realty Trust, Inc.', 'n/a');
insert into stock (stock_market, stock_symbol, stock_name, stock_sector) values ('NYSE', 'ASX', 'Advanced Semiconductor Engineering, Inc.', 'Technology');
insert into stock (stock_market, stock_symbol, stock_name, stock_sector) values ('NASDAQ', 'BIDU', 'Baidu, Inc.', 'Technology');", , ,"insert into portfolio SELECT users.userid, stock.stock_symbol, stock.stock_name, INT4(random()*1000+0.5) FROM users, stock order by random() limit 1000;", , ,,,
A0231952H,/* The code is written for PostgreSQL */,"/*I want to expolre whether the people will download their company's product more than others', in the internet industry. So I want to develop an application for managing the data of downloading app and compare products' company with conusmers' company. Therefore, I need information like consumer data and product data. 
Firstly, I choose the entity set E1 to be consumer. Creat a table consumer for people with attributes, such as first_name, last_name, email, company they work for and so on.
Secondly, choose the entity set E2 to be product. Creat a table product for product with their name, company they belong to, and so on.
Finally, consumers will download the products, so we need to know which consumer download which product. Then, we check their company data.
My code is written for PstgreSQL.
*/", , ,"CREATE TABLE consumer(
	consumerid VARCHAR(64) PRIMARY KEY,
	first_name VARCHAR(64) NOT NULL, 
	last_name VARCHAR(64) NOT NULL, 
	email VARCHAR(64) NOT NULL UNIQUE, 
	consumer_company VARCHAR(64) NOT NULL
);
CREATE TABLE product(
	product_name VARCHAR(64) NOT NULL, 
	product_company VARCHAR(64) NOT NULL,
	PRIMARY KEY (product_name, product_company)
);
CREATE TABLE downloads(
	consumerid VARCHAR(64) REFERENCES consumer(consumerid) 
		ON UPDATE CASCADE ON DELETE CASCADE
		DEFERRABLE INITIALLY DEFERRED,
	product_name VARCHAR(64),
	consumer_company VARCHAR(64),
	product_company VARCHAR(64),
	PRIMARY KEY(consumerid, product_name, product_company),
	FOREIGN KEY (product_name, product_company) REFERENCES product(product_name, product_company)
		ON UPDATE CASCADE ON DELETE CASCADE
		DEFERRABLE INITIALLY DEFERRED
);", , ,"insert into consumer (consumerid, first_name, last_name, email, consumer_company) values ('53a7f872-29a6-421d-bc17-f1923e7671fb', 'Burke', 'Coggins', 'bcoggins0@lulu.com', 'Jayo');
insert into consumer (consumerid, first_name, last_name, email, consumer_company) values ('04c2b927-789b-44c0-88aa-d282ca7b6b0b', 'Bobina', 'Meltetal', 'bmeltetal1@go.com', 'Jabbercube');
insert into consumer (consumerid, first_name, last_name, email, consumer_company) values ('601f561f-7570-4e51-82cd-29c52649151f', 'Linn', 'Grunbaum', 'lgrunbaum2@google.ca', 'Skimia');
 
insert into consumer (consumerid, first_name, last_name, email, consumer_company) values ('0ea72fe1-b535-45a0-89d2-5152ca2fd308', 'Frederigo', 'McClelland', 'fmcclelland2s@va.gov', 'Jazzy');
insert into consumer (consumerid, first_name, last_name, email, consumer_company) values ('be7c92bd-6e33-4223-bd6e-544593492ff2', 'Walden', 'Alfonsetto', 'walfonsetto2t@baidu.com', 'Meemm');
insert into consumer (consumerid, first_name, last_name, email, consumer_company) values ('b459b25f-8128-4303-a5e0-d8158a236ca8', 'Gregory', 'Cornish', 'gcornish2u@unc.edu', 'Tavu');", , ,"insert into downloads(consumerid, consumer_company, product_name, product_company) 
select consumerid, consumer_company, product_name, product_company from consumer, product 
ORDER BY random() limit 1000;", , ,,,
A0231953E,/* The code is written for SQLite*/,"/* The code is written for SQLite*/
/*This example is based on the Electronic Road Pricing System of Singapore, 
which is used to alleviate road congestions by charging owners of the 
vehicles according to their driving during specific time period on 
specific roads. Therefore, in order to store the data of the charging 
records, this database contains three tables: vehicle_ownershp,ERP and 
charging_records.*/
/*Vehicle_ownership table shows the detailed information of each vehicle 
and provides the link between each vehicle and its owner, by including 6 
attributes: license plate number, owner's identification number, vehicle 
identification number, car make, car model and car model year. Because 
what monitors only can get is the license plate number, the license_plate_no 
is chosen to be the primary key. Considering that someone could own more 
than one vehicles, the owner_id is not unique but is not null. In addition, 
since vehicle identification numbers can identify each car, the car_vin 
is unique and not null, while the other attributes could be null.*/
/*ERP table demonstrates the charging rules of the specific roads at specific
times, by including 5 attributes: period (weekdays or saturdays), time 
period number (from 1 to 93, divided each 30 minutes into 3 pieces from 
7:00am to 22:30pm), road name, road type (Orchard Cordon and Rest of CBD, 
Arterial Roads or Expressways) and ERP rate (the charging fee). Among all 
the attibutes, period, time period number, road name and ERP rate consist 
the primary key so that there will be only one charging rule for each 
situation.*/
/*Charging_records table is used to record the charging history of ERP System.
There are 8 attributes in this table. The first one is record number. The 
second is license plate number to show which vehicle should be charged 
referring to the one in vehicle_ownership table. The third to the sixth are 
the features in the primary key of ERP table. The seventh is a binary  
feature, driving, which will be 1 if the vehicle has driving on this road 
at the corresponding time period and will be 0 if not. The final is also a 
binary feature, unpaied, which shows the paying status. If the owner has 
already paied the bill, it will be 0. Otherwise, it will be 1. Since those 
who haven't driving on this road at this time don't need to pay, so the 
driving feature and unpaid feature should never be both 0. The license plate 
number, period, time period number and road name consist the primary key so 
that each record can link to only one vehicle's only one driving action.*/", , ,"/* Create vehicle_ownership table: */
CREATE TABLE vehicle_ownership (
license_plate_no CHAR(8) NOT NULL PRIMARY KEY,
owner_id CHAR(9) NOT NULL,
car_vin VARCHAR(17) UNIQUE NOT NULL,
car_make VARCHAR(32),
car_model VARCHAR(32),
car_year YEAR(4));
/* Create ERP table: */
CREATE TABLE ERP (
period VARCHAR(10) NOT NULL,
time_no INT(2) NOT NULL CHECK (time_no <= 93 and time_no > 0),
road_name VARCHAR(512) NOT NULL,
road_type VARCHAR(54) NOT NULL,
rate DECIMAL(4,2) NOT NULL DEFAULT 0.00,
PRIMARY KEY (period, time_no, road_name, rate));
/* Create charging_records table: */
CREATE TABLE charging_records (
record_no VARCHAR(24) NOT NULL,
license_plate_no CHAR(8) REFERENCES vehicle_ownership(license_plate_no)
    ON UPDATE CASCADE
    DEFERRABLE INITIALLY DEFERRED,
period VARCHAR(10),
time_no INT(2),
road_name VARCHAR(512),
rate DECIMAL(4,2),
driving BOOLEAN NOT NULL DEFAULT 1,
unpaid BOOLEAN NOT NULL DEFAULT 1 CHECK (driving + unpaid <> 0),
FOREIGN KEY (period, time_no, road_name, rate) REFERENCES ERP(period, time_no, road_name, rate)
    ON UPDATE CASCADE
    DEFERRABLE INITIALLY DEFERRED,
PRIMARY KEY (license_plate_no, period, time_no, road_name));", , ,"/* Insert into vehicle_ownership table: */ insert into vehicle_ownership (license_plate_no, owner_id, car_vin, car_make, car_model, car_year) values ('SBA7870I', 'S5706370J', '2C3CCAGG7CH636058', 'Lexus', 'HS', 2011);
insert into vehicle_ownership (license_plate_no, owner_id, car_vin, car_make, car_model, car_year) values ('SBA7306T', 'S4705238H', '1G4GG5E34DF403939', 'Toyota', 'Sienna', 1998);
insert into vehicle_ownership (license_plate_no, owner_id, car_vin, car_make, car_model, car_year) values ('SBA2170E', 'S1606966X', 'WBA3F9C54FK738918', 'Infiniti', 'QX56', 2009);
 
/* Insert into ERP table: */ insert into ERP (period, time_no, road_name, road_type, rate) values ('saturdays', 49, '6820 Wayridge Point', 'Expressways', 2.09);
insert into ERP (period, time_no, road_name, road_type, rate) values ('weekdays', 26, '4453 5th Plaza', 'Arterial Roads', 1.63);
insert into ERP (period, time_no, road_name, road_type, rate) values ('saturdays', 55, '8 Walton Avenue', 'Arterial Roads', 1.29);", , ,"/* Insert into charging_records: */
INSERT INTO charging_records (record_no, license_plate_no, period, time_no, road_name, rate, driving)
SELECT DISTINCT random() as record_no, license_plate_no, period, time_no, road_name, rate, abs(random()) % 2 as driving
FROM vehicle_ownership, ERP
ORDER BY random()
LIMIT 1000;", , ,,,
A0231956Y,/* The code is written for PostgreSQL */,"/*	The use case is for a resource request platform for change projects in our imaginary 
	firm, Digibank. It consists of three tables: 
	... The'resource' table contains particulars of change mgt personnel, specifically:
		1.1. first_name
		1.2. last_name
		1.3. job_func (PM for proj mgr, BA for biz analyst, DEV for developer)
		1.4. employee_number
		1.5. email (fixed domain digibank.com using formula)
	... Table 'project', on the other hand, contains business owner and billing details: 
		2.1. project_id (randomized for security purposes)
		2.2. lob (line of business - e.g RBWM for retail and wealth, MKTS for markets, etc.)
		2.3. cost_center (includes the lob ticker as prefix)
	... Table 'alloc_req' shows skill type and staff requests for each project, in particular:
		3.1 project_id
		3.2 role_need (specific skill set required)
		3.3 resource_req (email of specific staff requested)	
*/", , ,"CREATE TABLE IF NOT EXISTS resource(
	first_name VARCHAR(60) NOT NULL,
	last_name VARCHAR(60) NOT NULL,
	job_func VARCHAR(10) NOT NULL CHECK(job_func='PM'OR job_func='BA'OR job_func='DEV'),
	employee_number VARCHAR(13) PRIMARY KEY,
	email VARCHAR(100) NOT NULL UNIQUE);
CREATE TABLE IF NOT EXISTS project(
	project_id VARCHAR(16) PRIMARY KEY,
	lob VARCHAR(64) NOT NULL, CHECK(lob='RBWM' OR lob='COMMB'OR lob='MKTS' OR lob='DIGITAL' OR lob='REG'),
	cost_center VARCHAR(16) NOT NULL);
CREATE TABLE IF NOT EXISTS alloc_req(
	project_id VARCHAR(16) REFERENCES project(project_id),
	role_need VARCHAR(10) NOT NULL CHECK(role_need='PM' OR role_need='BA'OR role_need='DEV'),
	resource_req VARCHAR(100) REFERENCES resource(email),
	PRIMARY KEY(project_id,role_need,resource_req));", , ,"/* Populate resource table*/ insert into resource (first_name, last_name, job_func, employee_number, email) values ('Roberto', 'Bartolini', 'DEV', '348-6112-37-1', 'roberto.bartolini@digibank.com');
insert into resource (first_name, last_name, job_func, employee_number, email) values ('Con', 'Lincey', 'DEV', '710-4819-27-7', 'con.lincey@digibank.com');
insert into resource (first_name, last_name, job_func, employee_number, email) values ('Morgan', 'Polglaze', 'DEV', '419-1897-06-6', 'morgan.polglaze@digibank.com');
 
/* Populate project table*/ insert into project (project_id, lob, cost_center) values ('059-936e-11-6', 'DIGITAL', 'DIGITAL-1284-J6');
insert into project (project_id, lob, cost_center) values ('678-27En-70-7', 'REG', 'REG-6305-X1');
insert into project (project_id, lob, cost_center) values ('826-13Wr-36-1', 'MKTS', 'MKTS-6697-W9');", , ,"INSERT INTO alloc_req (project_id,role_need,resource_req)
SELECT project.project_id,
		resource.job_func,
		resource.email 
FROM project,resource
ORDER BY RANDOM()
LIMIT 1000;", , ,,,
A0231957X,"/* 
/* The code is written for PostgreSQL */","/* Suppose we want to manage the data of online food delivery service in Singapore for further 
route optimization. We store information of customers such as their name, gender, telephone 
number and address in the first table. In the second table, there are shop name, postcode 
and address,and we conbain shop name and postcode as identification. Then we have to remember 
which customer orders a meal in which shop. So we create the relationship set associating 
customer and the shop. The address information is important for later optimization, so it 
need to be inserted into the relationship table.
*/", , ,"CREATE TABLE customers (
    customerid VARCHAR(64) PRIMARY KEY,
	first_name VARCHAR(64) NOT NULL,
	last_name VARCHAR(64) NOT NULL,
	gender CHAR(1),
	telephone VARCHAR(64) UNIQUE NOT NULL,
	address VARCHAR(64) NOT NULL);
CREATE TABLE shops (
	name VARCHAR(32) NOT NULL,
	blk char(6) NOT NULL,
	shopaddress VARCHAR(64) NOT NULL,
	PRIMARY KEY (name,blk));
CREATE TABLE orders (
	customerid VARCHAR(64) REFERENCES customers(customerid),
	address VARCHAR(64) ,
	name VARCHAR(32) NOT NULL,
	blk char(6) NOT NULL,
	shopaddress VARCHAR(64) NOT NULL,
	FOREIGN KEY (name,blk) REFERENCES shops(name,blk),
	PRIMARY KEY(customerid, name, blk));", , ,"insert into customers (customerid, first_name, last_name, gender, telephone, address) values (1, 'Michel', 'Tumbridge', 'M', '152-371-0321', '63 Washington Way');
insert into customers (customerid, first_name, last_name, gender, telephone, address) values (2, 'Edyth', 'Blogg', 'F', '869-183-7411', '1 Crest Line Trail');
insert into customers (customerid, first_name, last_name, gender, telephone, address) values (3, 'Allsun', 'Sails', 'F', '628-501-8002', '3 Hoard Hill');
 
insert into shops (name, blk, shopaddress) values ('hbraybrooks0', 569417, '0607 Browning Street');
insert into shops (name, blk, shopaddress) values ('kallbrook1', 876989, '37767 Warrior Junction');
insert into shops (name, blk, shopaddress) values ('mabazi2', 893026, '6 Lunder Road');", , ,"INSERT INTO orders (customerid,address,name,blk,shopaddress) 
SELECT c.customerid, c.address, s.name, s.blk, s.shopaddress
FROM customers c, shops s
ORDER BY random()
limit 1000;", , ,,,
A0231958W,/* The code is written for PostgreSQL */,"/*I am a data analyst at a global stock exchange platform company.
To have a better understanding of our clients' interests in U.S stocks,
I wanted to see which U.S stocks were invested in at what price by our clients
during the regular trading hours on the previous day.  
I prepared 3 tables: client, stock, invest
Table 1. client 
This table provides our clients' personal information.
(first name, last name, email, customer_id, country)
Table 2. stock
This table provides details on U.S stocks listed in NYSE and NASDAQ.
(stock_market, stock_sector, stock_symbol, stock_name, stock_market_cap)
Table 3. invest
This table provides information on the list of our clients and the summary of their investments in U.S stocks on the previous day. 
(customer_id, stock_symbol, stock_price)
PostgreSQL is used to answer the questions below.
*/", , ,"CREATE TABLE client (
	first_name VARCHAR(64) NOT NULL,
	last_name VARCHAR(64) NOT NULL, 
	email VARCHAR(64) NOT NULL UNIQUE,
	customer_id VARCHAR(64) PRIMARY KEY,
	country VARCHAR(64) NOT NULL);
CREATE TABLE stock(
	stock_market varchar(64) NOT NULL,
	stock_sector VARCHAR(64) NOT NULL,
	stock_symbol VARCHAR(64) NOT NULL PRIMARY KEY,
	stock_name VARCHAR(64) NOT NULL,
	stock_market_cap VARCHAR(64) NOT NULL);
CREATE TABLE invest (
	customer_id VARCHAR(64) REFERENCES client(customer_id)
		ON UPDATE CASCADE ON DELETE CASCADE
		DEFERRABLE INITIALLY DEFERRED,
	stock_symbol VARCHAR(64),
	stock_price VARCHAR(64),
	PRIMARY KEY(customer_id, stock_symbol, stock_price),
	FOREIGN KEY (stock_symbol) REFERENCES stock(stock_symbol)
		ON UPDATE CASCADE ON DELETE CASCADE
		DEFERRABLE INITIALLY DEFERRED);", , ,"INSERT INTO stock (stock_market, stock_sector, stock_symbol, stock_name, stock_market_cap) VALUES ('NYSE', 'Public Utilities', 'ENBL', 'Enable Midstream Partners, LP', '$6.43B');
INSERT INTO stock (stock_market, stock_sector, stock_symbol, stock_name, stock_market_cap) VALUES ('NYSE', 'Technology', 'KFY', 'Korn/Ferry International', '$1.88B');
INSERT INTO stock (stock_market, stock_sector, stock_symbol, stock_name, stock_market_cap) VALUES ('NASDAQ', 'Miscellaneous', 'HPJ', 'Highpower International Inc', '$61.17M');
 
INSERT INTO client (first_name, last_name, email, customer_id, country) VALUES ('Elroy', 'Garfit', 'egarfit0@huffingtonpost.com', 'egarfit0', 'Indonesia');
INSERT INTO client (first_name, last_name, email, customer_id, country) VALUES ('Any', 'Pidgin', 'apidgin1@taobao.com', 'apidgin1', 'Philippines');
INSERT INTO client (first_name, last_name, email, customer_id, country) VALUES ('Brenda', 'Tripney', 'btripney2@spotify.com', 'btripney2', 'China');", , ,"insert into invest(customer_id, stock_symbol, stock_price)
select *, round(CAST (random()*(500-10)+10 AS numeric), 2) as price from (
select client.customer_id, stock.stock_symbol 
from client, stock order by random() limit 1000
) data;", , ,,,
A0231971E,/* The code is written for SQLite */,"/*This example is to develop an application for managing the prescription data 
of an elite private clinic offering premium medical services for high-end clients
from all over the world. 
I have chosen the entity set E1 to be clients, the entity set E2 to be drugs, and 
the relationship set R to be prescriptions. The table clients is created for clients 
with their first names, last names, date of birth, visiting date, country, passport 
number and client ID. The table drugs is created for drugs prescribed for clients, 
with drug names, drug companies and price. The table prescriptions associates the client
ID of the clients with the names and companies of the drugs specifically prescribed 
for clients.
*/", , ,"CREATE TABLE IF NOT EXISTS clients (
 first_name VARCHAR(64) NOT NULL,
 last_name VARCHAR(64) NOT NULL,
 dob DATE NOT NULL,
 visit_d DATE NOT NULL,
 country VARCHAR(16) NOT NULL,
 passportno VARCHAR(9) UNIQUE NOT NULL,
 clientid VARCHAR(8) PRIMARY KEY);
CREATE TABLE IF NOT EXISTS drugs(
 name VARCHAR(32),
 company CHAR(32),
 price NUMERIC NOT NULL,
 PRIMARY KEY (name, company));
 CREATE TABLE prescriptions(
 clientid VARCHAR(16) REFERENCES clients(clientid) ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
 name VARCHAR(32),
 company CHAR(32),
 PRIMARY KEY (clientid, name, company),
 FOREIGN KEY (name, company) REFERENCES drugs(name, company) ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED);", , ,"INSERT into clients (first_name, last_name, dob, visit_d, country, passportno, clientid) values ('Brigitte', 'Holliar', '2/2/1980', '11/16/2020', 'Vietnam', 'Y35087444', '14926953');
INSERT into clients (first_name, last_name, dob, visit_d, country, passportno, clientid) values ('Rosie', 'Caslake', '3/31/1961', '11/5/2020', 'China', 'F24013214', '88472451');
INSERT into clients (first_name, last_name, dob, visit_d, country, passportno, clientid) values ('Sergent', 'Bebis', '10/17/1969', '5/4/2021', 'Poland', 'B19855683', '38080369');
 
INSERT into drugs (name, company, price) values ('Doxazosin', 'Jakubowski LLC', 26308.47);
INSERT into drugs (name, company, price) values ('Titanium Dioxide and Zinc Oxide', 'Bernier-Conn', 2963.1);
INSERT into drugs (name, company, price) values ('Fluoxetine hydrochloride', 'Boyer, Collier and Dooley', 44412.31);", , ,"INSERT INTO prescriptions (clientid, name, company)
SELECT clientid, name, company 
FROM clients, drugs
ORDER BY random()	
LIMIT 1000;", , ,,,
A0231973B,/* The code is written for PostgreSQL */,"/* Imagine you work at Spotify and you want to know what songs of your platform people listen to in each country.
We choose the entity set E_1 to be ""client"", the entity set E_2 to be ""song"", and the many-to-many relationship set R to be ""listensto"".
The attributes of ""client"" are:
 client_id, the identification number of the client
 pseudo, the pseudoname of the client, which has to be unique
 first_name
 last_name
 email
 country, for the nationality of the client
The attributes of ""song"" are:
 title_id
 title
 artist
 country
The attributes of ""listensto"" are:
 client_id
 title_id
There is no need to add other features to the table ""listensto"" from the other tables, as they can be deduced from client_id or title_id. */",,,"CREATE TABLE IF NOT EXISTS client ( 
    client_id VARCHAR(16) PRIMARY KEY,
    pseudo VARCHAR(64) UNIQUE NOT NULL, 
    first_name VARCHAR(64) NOT NULL, 
    last_name VARCHAR(64) NOT NULL, 
    email VARCHAR(64) UNIQUE NOT NULL, 
    country VARCHAR(64) NOT NULL 
);

CREATE TABLE IF NOT EXISTS song ( 
    title_id VARCHAR(16) PRIMARY KEY, 
    title VARCHAR(64) NOT NULL, 
    artist VARCHAR(64) NOT NULL, 
    country VARCHAR(64) NOT NULL 
);

CREATE TABLE IF NOT EXISTS listensto ( 
    client_id VARCHAR(64) REFERENCES client(client_id)
        ON UPDATE CASCADE ON DELETE CASCADE
        DEFERRABLE INITIALLY DEFERRED, 
    title_id VARCHAR(16), 
    PRIMARY KEY(client_id, title_id),
    FOREIGN KEY (title_id) REFERENCES song(title_id)
        ON UPDATE CASCADE ON DELETE CASCADE
        DEFERRABLE INITIALLY DEFERRED
);", , ,"INSERT INTO     client (client_id, pseudo, first_name, last_name, email, country)  VALUES     (         1, 'ediiorio0', 'Estel', 'Di Iorio', 'ediiorio0@yellowbook.com', 'Thailand'     );
INSERT INTO     client (client_id, pseudo, first_name, last_name, email, country)  VALUES     (         2, 'hdarlington1', 'Hollie', 'Darlington', 'hdarlington1@census.gov', 'Russia'     );
INSERT INTO     client (client_id, pseudo, first_name, last_name, email, country)  VALUES     (         3, 'ssimkovitz2', 'Simone', 'Simkovitz', 'ssimkovitz2@studiopress.com', 'China'     );
 
INSERT INTO     song (title_id, title, artist, country)  VALUES     (         1, 'venenatis tristique fusce', 'Doralyn', 'China'     );
INSERT INTO     song (title_id, title, artist, country)  VALUES     (         2, 'quisque arcu', 'Berni', 'Philippines'     );
INSERT INTO     song (title_id, title, artist, country)  VALUES     (         3, 'etiam vel', 'Datha', 'Brazil'     );", , ,"INSERT INTO
    listensto (client_id, title_id) 
    SELECT
        c.client_id,
        s.title_id 
    FROM
        client c,
        song s 
    ORDER BY
        RANDOM() LIMIT 1000 ;",,,,,
A0231974Y,The code is written for PostgreSQL,"The CUSTOMER table records the user ID (unique identifier), user name, and user gender, including male and female. The record ID of the product table is the unique identifier of the product. The product name is a string. The orders table records user purchases of products, identifying which products a customer purchased, where OID is the ID of the Orders table for non-repeat primary key.", , ,"create table customer 
(
CID INT PRIMARY KEY,
first_name VARCHAR(30),
last_name VARCHAR(30),
gender VARCHAR(4)
);

create table product 
(
PID int primary key,
Pname VARCHAR(30)
);

create table orders 
(
OID INT PRIMARY KEY,
CID INT , foreign key(CID) references customer(CID),
PID INT ,foreign key(PID) references product(PID)
);", , ,"insert into customer (CID, first_name, last_name, gender) values (1, 'Salomi', 'Weekly', 'Female');
insert into customer (CID, first_name, last_name, gender) values (2, 'Ches', 'Courtier', 'Male');
insert into customer (CID, first_name, last_name, gender) values (3, 'Deeyn', 'Stannas', 'Female');

insert into product (Pid, pname) values (1, 'Melon - Watermelon Yellow');
insert into product (Pid, pname) values (2, 'Onions - White');
insert into product (Pid, pname) values (3, 'Cheese - Brick With Pepper');", , ,"insert into orders
select rank() over(order by cid,pid),cid,pid from customer,product
 ORDER BY random() LIMIT 1000;", , ,,,
A0231975X,/* The code is written for PostgreSQL */,"/* I will design three tables. 
   The first table is student, which contains rows of first_name, last_name, studentid and email. The first_name and last_name are not null. The primary key is studentid. And use a unique constraint on email.
   The second table is club, which contains rows of club_name, club_email, and establish_time. The pramary key is the combination of club_name and club_email.
   The third table is attendence, which contains rows of studentid, club_name and club_email. The studentid in this table must correspond to an existing studentid in the student table. The club_name and club_email in this table must correspond to the club_name and club_email in the club table.
*/", , ,"CREATE TABLE student(
    first_name VARCHAR(64) NOT NULL,
    last_name VARCHAR(64) NOT NULL,
    studentid VARCHAR(64) PRIMARY KEY,
    email VARCHAR(64));
CREATE TABLE club(
    club_name VARCHAR(64),
    club_email VARCHAR(64),
    establish_time DATE,
    PRIMARY KEY(club_name, club_email));
CREATE TABLE attendence(
    studentid VARCHAR(64) REFERENCES student(studentid)
          ON UPDATE CASCADE
          ON DELETE CASCADE,
    club_name VARCHAR(64),
    club_email VARCHAR(64),
    FOREIGN KEY (club_name, club_email) REFERENCES club(club_name, club_email)
          ON UPDATE CASCADE
          ON DELETE CASCADE);", , ,"insert into student (first_name, last_name, studentid, email) values ('Nolana', 'Badrock', '4624994515', 'nbadrock0@stanford.edu');
insert into student (first_name, last_name, studentid, email) values ('Richard', 'Yockley', '4114508147', 'ryockley1@eepurl.com');
insert into student (first_name, last_name, studentid, email) values ('Gifford', 'Dunabie', '8352378791', 'gdunabie2@symantec.com');

insert into club (club_name, club_email, establish_time) values ('Johnston-O''Conner', 'mthuillier0@networksolutions.com', '2021-03-20');
insert into club (club_name, club_email, establish_time) values ('Muller-Thiel', 'yclubb1@nih.gov', '2021-04-11');
insert into club (club_name, club_email, establish_time) values ('Donnelly, Osinski and Nikolaus', 'eronayne2@tuttocitta.it', '2021-08-03');", , ,"insert into attendence
select t.studentid, c.club_name, c.club_email
from student t, club c
order by random()
limit 1000;", , ,,,
A0231979N,/* The code is written for PostgreSQL */,"/*	The case is about what different bakers bake (many-to-many relationship). For instance it will help users know if the product wanted is available at a specific bakery shop
	Therefore, the entity set E1 is baker, R is defined as a many-to-many relationship 'bake'.
	The entity set E2 represents the different products  usually found in bakery.
	The first table (entity E1) will comprise an id, first name, family name, gender, country, address of the baker, postal code
	The second table (R relation) will comprise the id of the baker and the id of the product
	The third table (entity E2) will comprise the id, name of the product
*/", , ,"CREATE TABLE bakers (
	baker_id serial PRIMARY KEY,
	first_name VARCHAR ( 50 )  NOT NULL,
	last_name VARCHAR ( 50 )  NOT NULL,
	gender VARCHAR ( 50 )  NOT NULL,
	country VARCHAR ( 255 )  NOT NULL,
	address VARCHAR ( 255 )  NOT NULL,
	postal_code VARCHAR(50) 
);
CREATE TABLE bake (
	baker_id serial NOT NULL,
	product_id serial NOT NULL,
	CONSTRAINT relation PRIMARY KEY (baker_id,product_id)
);
CREATE TABLE products (
	product_id serial PRIMARY KEY,
	product_name VARCHAR ( 255 )  NOT NULL
);", , ,"insert into bakers (baker_id, first_name, last_name, gender, country, address, postal_code) values (1, 'Gail', 'Varndell', 'Genderfluid', 'Nigeria', '30 Maryland Junction', null);
insert into bakers (baker_id, first_name, last_name, gender, country, address, postal_code) values (2, 'Tiebold', 'Abrey', 'Non-binary', 'Serbia', '09 Dennis Court', null);
insert into bakers (baker_id, first_name, last_name, gender, country, address, postal_code) values (3, 'Sharl', 'Poulett', 'Bigender', 'China', '38 Stephen Crossing', null);
 
insert into products (product_id, product_name) values (1, 'Scandinavian');
insert into products (product_id, product_name) values (2, 'Hot chocolate');
insert into products (product_id, product_name) values (3, 'Jam');", , ,"insert into bake (baker_id, product_id) 
SELECT DISTINCT round(1+random()*99), round(1+random()*99) from generate_series(1,1000);", , ,,,
A0231982B,/* The code is written for PostgreSQL */,"/*This case is generalized based on real world experiences. Luckily I got
admitted by NUS. :D
Table Students contains the information for students who applied for different
universities. It contains basic information of each applicant, applicant_id
is the primary key since it's unique. For realistic reason, this table has more
rows than table Universities.
Table Universities contains the information for each univerisity, I hope I
can also include country, city, etc. but randomly generalized data will 
make it less realistic. The primary key is school_name, which is also unique.
The relationship is table Admitted. It associates the applicant_id
of the students to the names of the universities for which they have been 
admitted. It's clearly a many-to-many relationship, because one applicant 
can be admitted by more than one university, hopefully; and one university
can admit hundreds of applicants. 
*/", , ,"drop table Students;
drop table Universities;
drop table Admitted;
create table Students (
	applicant_id INT,
	first_name VARCHAR(50),
	last_name VARCHAR(50),
	gender VARCHAR(50),
	email VARCHAR(50),
	nationality VARCHAR(50),
	primary key(applicant_id)
);
create table Universities (
	school_name VARCHAR(80),
	application_received INT,
	primary key(school_name)
);
create table Admitted (
	applicant_id INT,
	school_name VARCHAR(80)
);", , ,"insert into Students (applicant_id, first_name, last_name, gender, email, nationality) values (415133, 'Kaitlyn', 'Asbury', 'Bigender', 'kasbury0@columbia.edu', 'Iran');
insert into Students (applicant_id, first_name, last_name, gender, email, nationality) values (319918, 'Cicely', 'Antoszczyk', 'Male', 'cantoszczyk1@facebook.com', 'Philippines');
insert into Students (applicant_id, first_name, last_name, gender, email, nationality) values (316259, 'Sigismund', 'Gligorijevic', 'Polygender', 'sgligorijevic2@privacy.gov.au', 'France');
 
insert into Students (applicant_id, first_name, last_name, gender, email, nationality) values (933876, 'Britteny', 'Sheach', 'Female', 'bsheach2s@netlog.com', 'Thailand');
insert into Students (applicant_id, first_name, last_name, gender, email, nationality) values (218731, 'Caryl', 'Fresson', 'Genderqueer', 'cfresson2t@google.com.au', 'Portugal');
insert into Students (applicant_id, first_name, last_name, gender, email, nationality) values (768365, 'Vladamir', 'Kurth', 'Polygender', 'vkurth2u@meetup.com', 'Albania');", , ,"insert into Admitted (applicant_id, school_name)
select applicant_id , school_name
from Students, Universities
order by random()
limit 1000;", , ,,,
A0231989M,/* The code is written for PostgreSQL */,"/*It's 2030, and Singapore needs help as there appears to be more hackers identifying 
security flaws in companies in Singapore. These hackers in Singapore are no white hat hackers
as they typically find these flaws in order to steal bitcoin from the company. At this point, 
Singapore is entirely run on bitcoin, so the hackers are stealing and sending bitcoin to an address. 
We need to create a database for the Singapore government to help them organize the data effectively
to catch and punish the malicious hackers.
The entity set E1 will be 'hacker' which represents a table of bitcoin hackers in Singapore. This table
includes their personal information like first name, last name, email, bitcoin address,
and social security number. In this case, the social security number (SSN) of the hacker is the primary key
as it uniquely identifies each hacker.
Entity set E2 will be 'company' which is a table of companies in Singapore that have been hacked.
The attributes of this entity includes the company name and company ip address v4.
The ip address v4 is the primary key as each ip address for each company must be unique.
The relationship R will be named 'hacked' as the hackers stole bitcoin from companies. This
relationship will have SSN and domain name as the composite primary keys. This relationship
is a many-to-many relationship as a hacker could have hacked multiple companies, and a company
could be hacked by multiple hackers. There is one attribute for this relationship which
is the amount of money (BTC) stolen by the hacker.
I will be using PostgreSQL for my code. 
*/", , ,"CREATE TABLE IF NOT EXISTS hacker (
	first_name VARCHAR(64) NOT NULL,
	last_name VARCHAR(64) NOT NULL,
	email VARCHAR(64) NOT NULL UNIQUE,
	bitcoin_address VARCHAR(34) NOT NULL UNIQUE,
	ssn VARCHAR(11) PRIMARY KEY
);
CREATE TABLE IF NOT EXISTS company (
	c_name VARCHAR(64) NOT NULL,
	ip_address VARCHAR(20) PRIMARY KEY
);
CREATE TABLE IF NOT EXISTS hacked (
	ssn VARCHAR(11) REFERENCES hacker(ssn),
	ip_address VARCHAR(20) REFERENCES company(ip_address),
	btc DECIMAL (6,2) NOT NULL CHECK (btc > 0.0),
	PRIMARY KEY (ip_address,ssn)
);", , ,"insert into hacker (first_name, last_name, email, bitcoin_address, ssn) values ('Miller', 'Summerfield', 'msummerfield0@blogs.com', '12THidsTaJMC2Ghym5ysQWr3hfzvxdhPLZ', '487-80-2336');
insert into hacker (first_name, last_name, email, bitcoin_address, ssn) values ('Sandie', 'Chitham', 'schitham1@blinklist.com', '1NSnXsz2CTpuS8hA2EXAbRHhXFn8r3tfYi', '378-63-6010');
insert into hacker (first_name, last_name, email, bitcoin_address, ssn) values ('Sibeal', 'Bartoszinski', 'sbartoszinski2@blogtalkradio.com', '1DsthWt5XPoVmmx6NgWhxdxH4WcfxXieAs', '749-63-7616');
 
insert into company (c_name, ip_address) values ('Edgepulse', '246.46.83.135');
insert into company (c_name, ip_address) values ('Rhybox', '76.48.42.148');
insert into company (c_name, ip_address) values ('Mudo', '15.141.209.239');", , ,"INSERT INTO hacked(ip_address,ssn,btc)
(SELECT ip_address, ssn, random()*(1000-1)+1
FROM company, hacker
ORDER BY random()
LIMIT 1000);", , ,,,
A0231990A,/* The code is written for PostgreSQL */,"/*Student ID: A0231990A
Written for PostgreSQL 13
This example is for a streaming platform that is interested in looking at the list of movies which
their users have watched on the platform. 
The first table, 'customer', contains personal particulars of each user on the streaming platform. 
This includes their username, name, email, gender, contact number and date of birth.
The second table, 'movie', contains the list of movies currently available on the platform. This 
would include details such as the movie title, year of release, genre, duration and director.
The third table, 'watched', contains the list of movies that each user has watched on the platform.
Such information would be helpful to the streaming platform in understanding the types of movies 
their user base is interested in, which can help with planning for future content.
*/", , ,"CREATE TABLE customer (
	username VARCHAR(16) PRIMARY KEY,
	first_name VARCHAR(64) NOT NULL,
	last_name VARCHAR(64) NOT NULL,
	email VARCHAR(64) UNIQUE NOT NULL,
	gender CHAR(1) NOT NULL,
	dob DATE NOT NULL,
	contact_no CHAR(13) NOT NULL
);
CREATE TABLE movie (
	movie_name VARCHAR(64),
	year_released SMALLINT,
	movie_genre VARCHAR(64) NOT NULL,
	duration_mins SMALLINT NOT NULL,
	director VARCHAR(64) NOT NULL,
	PRIMARY KEY (movie_name, year_released)
);
CREATE TABLE watched (
	username VARCHAR(16) REFERENCES customer(username)
		ON UPDATE CASCADE ON DELETE CASCADE
		DEFERRABLE INITIALLY DEFERRED,
	movie_name VARCHAR(64),
	year_released SMALLINT,
	PRIMARY KEY (username, movie_name, year_released),
	FOREIGN KEY (movie_name, year_released) REFERENCES movie(movie_name, year_released)
		ON UPDATE CASCADE ON DELETE CASCADE
		DEFERRABLE INITIALLY DEFERRED
);", , ,"INSERT INTO customer (  username,   first_name,   last_name,   email,   gender,   dob,   contact_no )  VALUES   ('akinnar0', 'Aldric', 'Kinnar', 'akinnar0@de.vu', 'M', '1971-09-20', '+65 8314 2661'),  ('smoyce1', 'Shel', 'Moyce', 'smoyce1@google.de', 'F', '1954-04-20', '+65 8291 9198'),  ('ibrittlebank2', 'Ive', 'Brittlebank', 'ibrittlebank2@craigslist.org', 'M', '1998-12-30', '+65 9614 1563'),  ('hgilogly3', 'Haskel', 'Gilogly', 'hgilogly3@github.com', 'M', '1964-10-07', '+65 9872 1688'),  ('dlabin4', 'Dana', 'Labin', 'dlabin4@jimdo.com', 'M', '1990-08-30', '+65 8967 4984'),  ('wfipp5', 'Wanids', 'Fipp', 'wfipp5@dell.com', 'F', '1960-04-15', '+65 9062 7956'),  ('kroskeilly6', 'Kahlil', 'Roskeilly', 'kroskeilly6@sun.com', 'M', '1995-07-03', '+65 8920 8754'),  ('jplan7', 'Jessamyn', 'Plan', 'jplan7@ucsd.edu', 'F', '1980-10-01', '+65 9396 5215'),  ('djehan8', 'Desdemona', 'Jehan', 'djehan8@nytimes.com', 'F', '1978-07-07', '+65 9122 2626'),  ('mpammenter9', 'Mariann', 'Pammenter', 'mpammenter9@com.com', 'F', '1966-01-29', '+65 8392 5281'),  ('mmckeaneya', 'Mayne', 'McKeaney', 'mmckeaneya@bloomberg.com', 'M', '1961-09-14', '+65 8915 9111'),  ('bfronczakb', 'Bordie', 'Fronczak', 'bfronczakb@myspace.com', 'M', '1999-02-28', '+65 8127 2417'),  ('dlevingtonc', 'Davin', 'Levington', 'dlevingtonc@exblog.jp', 'M', '1993-08-14', '+65 9504 3493'),  ('cseamond', 'Cris', 'Seamon', 'cseamond@dailymail.co.uk', 'M', '1990-05-27', '+65 8695 3383'),  ('bfreezore', 'Benjamin', 'Freezor', 'bfreezore@home.pl', 'M', '1983-07-29', '+65 8140 3831'),  ('aeustanchf', 'Alexis', 'Eustanch', 'aeustanchf@last.fm', 'M', '1987-12-18', '+65 9658 3001'),  ('bcreekg', 'Binny', 'Creek', 'bcreekg@unc.edu', 'F', '1956-02-27', '+65 8272 4972'),  ('blightollerh', 'Brooke', 'Lightoller', 'blightollerh@usatoday.com', 'M', '1994-06-30', '+65 8516 7416'),  ('egooderei', 'Erich', 'Goodere', 'egooderei@arstechnica.com', 'M', '2002-02-01', '+65 8224 4729'),  ('sbasillj', 'Sibby', 'Basill', 'sbasillj@ted.com', 'F', '2001-03-11', '+65 8872 6283'),  ('igiacopettik', 'Ike', 'Giacopetti', 'igiacopettik@dailymotion.com', 'M', '1990-04-25', '+65 9814 7485'),  ('swolstencroftl', 'Shanta', 'Wolstencroft', 'swolstencroftl@accuweather.com', 'F', '1981-12-11', '+65 8953 1624'),  ('zsnedenm', 'Zahara', 'Sneden', 'zsnedenm@dropbox.com', 'F', '1981-07-13', '+65 8640 4799'),  ('asheehann', 'Arch', 'Sheehan', 'asheehann@un.org', 'M', '1968-10-04', '+65 9833 4320'),  ('npendergrasto', 'Nichole', 'Pendergrast', 'npendergrasto@who.int', 'M', '1990-04-08', '+65 8445 9579'),  ('myemmp', 'Maryellen', 'Yemm', 'myemmp@smh.com.au', 'F', '1990-12-19', '+65 8902 6357'),  ('duridgeq', 'Denver', 'Uridge', 'duridgeq@friendfeed.com', 'M', '1988-12-03', '+65 9936 8383'),  ('edaymentr', 'Ellswerth', 'Dayment', 'edaymentr@house.gov', 'M', '2003-06-26', '+65 9765 3173'),  ('gwaldies', 'Gardner', 'Waldie', 'gwaldies@woothemes.com', 'M', '1998-04-13', '+65 9818 0940'),  ('djerokt', 'Dona', 'Jerok', 'djerokt@bluehost.com', 'F', '1985-08-16', '+65 8161 6784'),  ('dfuchsu', 'Donall', 'Fuchs', 'dfuchsu@tamu.edu', 'M', '1989-11-04', '+65 8667 0473'),  ('mmeasev', 'Mandi', 'Mease', 'mmeasev@de.vu', 'F', '1961-03-23', '+65 9077 1179'),  ('ggudemanw', 'Gilda', 'Gudeman', 'ggudemanw@usnews.com', 'F', '1979-04-22', '+65 8628 4905'),  ('khylandsx', 'Katee', 'Hylands', 'khylandsx@shinystat.com', 'F', '1953-03-13', '+65 8119 5252'),  ('tskipy', 'Tarrah', 'Skip', 'tskipy@chron.com', 'F', '1975-02-21', '+65 8330 7088'),  ('lblantz', 'Lin', 'Blant', 'lblantz@google.pl', 'M', '2000-10-04', '+65 8806 0504'),  ('qmacfarlan10', 'Quincy', 'MacFarlan', 'qmacfarlan10@elpais.com', 'M', '1992-11-06', '+65 8369 6553'),  ('sivankin11', 'Sheff', 'Ivankin', 'sivankin11@hugedomains.com', 'M', '1975-01-05', '+65 8535 6800'),  ('dsibborn12', 'Dale', 'Sibborn', 'dsibborn12@si.edu', 'M', '1980-08-19', '+65 9656 3783'),  ('schina13', 'Selby', 'China', 'schina13@stanford.edu', 'M', '1992-07-05', '+65 9577 2932'),  ('bpeniman14', 'Baily', 'Peniman', 'bpeniman14@behance.net', 'M', '2003-03-27', '+65 8183 6949'),  ('mfoskew15', 'Madlin', 'Foskew', 'mfoskew15@deviantart.com', 'F', '1988-05-31', '+65 8116 6807'),  ('phanretty16', 'Pippo', 'Hanretty', 'phanretty16@time.com', 'M', '1977-12-29', '+65 8066 9785'),  ('tpummell17', 'Tarrance', 'Pummell', 'tpummell17@imageshack.us', 'M', '1976-03-02', '+65 8239 3794'),  ('ggeertz18', 'Granthem', 'Geertz', 'ggeertz18@technorati.com', 'M', '2002-12-21', '+65 8151 3019'),  ('dpudden19', 'Daisy', 'Pudden', 'dpudden19@godaddy.com', 'F', '1965-08-24', '+65 8640 1665'),  ('mmedway1a', 'Malinda', 'Medway', 'mmedway1a@squarespace.com', 'F', '1995-06-19', '+65 8342 4172'),  ('kstpaul1b', 'Kathryn', 'St. Paul', 'kstpaul1b@vkontakte.ru', 'F', '1999-05-03', '+65 9568 9033'),  ('athorley1c', 'Alejandro', 'Thorley', 'athorley1c@rediff.com', 'M', '1988-07-31', '+65 9032 7243'),  ('lbassilashvili1d', 'Laura', 'Bassilashvili', 'lbassilashvili1d@wikispaces.com', 'F', '1968-11-12', '+65 8045 6515'),  ('dheadingham1e', 'Dare', 'Headingham', 'dheadingham1e@parallels.com', 'M', '1963-11-14', '+65 8137 7942'),  ('gpolleye1f', 'Grant', 'Polleye', 'gpolleye1f@phpbb.com', 'M', '1992-05-15', '+65 8127 9876'),  ('bpierpoint1g', 'Birk', 'Pierpoint', 'bpierpoint1g@indiegogo.com', 'M', '1999-03-11', '+65 9513 8979'),  ('nnewsham1h', 'Nicky', 'Newsham', 'nnewsham1h@stanford.edu', 'F', '1994-01-30', '+65 8628 8072'),  ('pabsalom1i', 'Padgett', 'Absalom', 'pabsalom1i@gmpg.org', 'M', '1969-11-27', '+65 9025 1125'),  ('ddodding1j', 'Dieter', 'Dodding', 'ddodding1j@mozilla.com', 'M', '1953-05-11', '+65 8768 8466'),  ('rgarfoot1k', 'Rosina', 'Garfoot', 'rgarfoot1k@eventbrite.com', 'F', '1971-10-19', '+65 9511 7126'),  ('mmeasey1l', 'Maybelle', 'Measey', 'mmeasey1l@artisteer.com', 'F', '1953-01-29', '+65 8549 9444'),  ('ebroinlich1m', 'Elisabeth', 'Broinlich', 'ebroinlich1m@virginia.edu', 'F', '1968-11-26', '+65 9947 0760'),  ('ntutin1n', 'Nathanael', 'Tutin', 'ntutin1n@mail.ru', 'M', '1979-01-17', '+65 8582 2066'),  ('tbenne1o', 'Tarrah', 'Benne', 'tbenne1o@newsvine.com', 'F', '2003-07-05', '+65 9059 5132'),  ('wjoost1p', 'Warren', 'Joost', 'wjoost1p@acquirethisname.com', 'M', '1954-09-04', '+65 9243 1234'),  ('pburner1q', 'Perry', 'Burner', 'pburner1q@drupal.org', 'F', '1969-02-06', '+65 8355 0609'),  ('dsarney1r', 'Dante', 'Sarney', 'dsarney1r@baidu.com', 'M', '1988-11-12', '+65 9402 7910'),  ('mfarans1s', 'Maryanne', 'Farans', 'mfarans1s@odnoklassniki.ru', 'F', '1986-06-23', '+65 9749 4916'),  ('astothard1t', 'Abbott', 'Stothard', 'astothard1t@nba.com', 'M', '1967-01-13', '+65 9683 3821'),  ('mleverette1u', 'Matteo', 'Leverette', 'mleverette1u@biblegateway.com', 'M', '1990-05-08', '+65 9896 2934'),  ('pacory1v', 'Pieter', 'Acory', 'pacory1v@slate.com', 'M', '1957-12-04', '+65 8888 2900'),  ('cmealing1w', 'Candis', 'Mealing', 'cmealing1w@cdc.gov', 'F', '1954-08-10', '+65 9881 6940'),  ('bvernazza1x', 'Billi', 'Vernazza', 'bvernazza1x@homestead.com', 'F', '1979-05-22', '+65 8488 4579'),  ('hplayhill1y', 'Hillel', 'Playhill', 'hplayhill1y@nature.com', 'M', '1982-03-02', '+65 8960 4681'),  ('mspreag1z', 'Mathilde', 'Spreag', 'mspreag1z@cisco.com', 'F', '1951-09-04', '+65 9101 1372'),  ('bemmanuele20', 'Bastien', 'Emmanuele', 'bemmanuele20@independent.co.uk', 'M', '2000-01-03', '+65 9931 4288'),  ('amathie21', 'Alyssa', 'Mathie', 'amathie21@mapquest.com', 'F', '1968-09-02', '+65 9727 3012'),  ('sdurno22', 'Sven', 'Durno', 'sdurno22@who.int', 'M', '1967-10-01', '+65 8649 8798'),  ('bdurrant23', 'Bianka', 'Durrant', 'bdurrant23@angelfire.com', 'F', '1952-04-13', '+65 9894 0583'),  ('ntoffoletto24', 'Nicko', 'Toffoletto', 'ntoffoletto24@ebay.co.uk', 'M', '1963-06-20', '+65 9652 5980'),  ('vligerton25', 'Vlad', 'Ligerton', 'vligerton25@va.gov', 'M', '1958-06-30', '+65 9382 9076'),  ('agirod26', 'Artur', 'Girod', 'agirod26@sohu.com', 'M', '1982-05-15', '+65 9983 5163'),  ('cvedeniktov27', 'Cleopatra', 'Vedeniktov', 'cvedeniktov27@omniture.com', 'F', '1959-05-09', '+65 8494 8253'),  ('cirnis28', 'Corny', 'Irnis', 'cirnis28@home.pl', 'F', '1991-12-26', '+65 8644 6884'),  ('ehutchinges29', 'Erna', 'Hutchinges', 'ehutchinges29@fotki.com', 'F', '1953-11-18', '+65 9030 4639'),  ('revenett2a', 'Rubin', 'Evenett', 'revenett2a@tiny.cc', 'M', '1971-06-03', '+65 8248 5331'),  ('sshippam2b', 'Stormi', 'Shippam', 'sshippam2b@icq.com', 'F', '1993-11-07', '+65 9143 4534'),  ('jbradley2c', 'Jess', 'Bradley', 'jbradley2c@nps.gov', 'F', '1967-12-03', '+65 8580 8194'),  ('erosie2d', 'Englebert', 'Rosie', 'erosie2d@uiuc.edu', 'M', '1970-11-27', '+65 8569 4173'),  ('ghearon2e', 'Gabriele', 'Hearon', 'ghearon2e@blogger.com', 'M', '1997-07-29', '+65 9513 4417'),  ('gcoldman2f', 'Godfrey', 'Coldman', 'gcoldman2f@surveymonkey.com', 'M', '1957-10-31', '+65 9692 9869'),  ('ktetford2g', 'Katlin', 'Tetford', 'ktetford2g@virginia.edu', 'F', '1989-11-19', '+65 8880 1175'),  ('dsimner2h', 'Dawna', 'Simner', 'dsimner2h@delicious.com', 'F', '1994-04-29', '+65 9324 0916'),  ('cmccahey2i', 'Conni', 'McCahey', 'cmccahey2i@squidoo.com', 'F', '1997-02-09', '+65 9665 8068'),  ('oebenezer2j', 'Ossie', 'Ebenezer', 'oebenezer2j@cpanel.net', 'M', '1956-08-16', '+65 8040 0864'),  ('gsimoneton2k', 'Gay', 'Simoneton', 'gsimoneton2k@parallels.com', 'M', '1978-02-25', '+65 9164 7756'),  ('pconnechie2l', 'Paulo', 'Connechie', 'pconnechie2l@t.co', 'M', '1968-12-30', '+65 8429 1838'),  ('skleint2m', 'Saleem', 'Kleint', 'skleint2m@instagram.com', 'M', '1995-04-14', '+65 9256 5173'),  ('ksturridge2n', 'Kalindi', 'Sturridge', 'ksturridge2n@fema.gov', 'F', '1983-12-12', '+65 8000 5436'),  ('wsuddell2o', 'Winthrop', 'Suddell', 'wsuddell2o@jiathis.com', 'M', '1971-12-03', '+65 9372 9557'),  ('wmeugens2p', 'Waldo', 'Meugens', 'wmeugens2p@irs.gov', 'M', '1953-10-24', '+65 8534 7620'),  ('ddannel2q', 'Damara', 'Dannel', 'ddannel2q@cam.ac.uk', 'F', '1952-11-07', '+65 9193 6178'),  ('ogoricke2r', 'Onofredo', 'Goricke', 'ogoricke2r@timesonline.co.uk', 'M', '1993-08-19', '+65 8927 9710');
INSERT INTO movie (  movie_name,   year_released,   movie_genre,   duration_mins,   director )  VALUES   ('Reeker', 1994, 'Horror|Mystery', 106, 'Sybila Kobisch'),  ('Cremator, The', 2005, 'Comedy|Drama|Horror|Thriller', 164, 'Shayla Brotherick'),  ('Man from London, The', 2003, 'Crime|Drama|Mystery', 79, 'Alaine Lamplough'),  ('Pearls of the Deep', 1990, 'Comedy', 72, 'Doroteya Iannazzi'),  ('Unintentional Kidnapping of Mrs. Elfriede Ott, The', 2004, 'Comedy', 89, 'Shirley Gilston'),  ('Rosemary''s Baby', 2010, 'Horror|Thriller', 143, 'Kyle Szwandt'),  ('Torpedo Run', 2001, 'Drama|War', 164, 'Fern Noddle'),  ('Assembly', 1999, 'Action|Drama|War', 92, 'Dyna Rendall'),  ('The Brave Little Toaster Goes to Mars', 1992, 'Animation|Children', 105, 'Rae Ros'),  ('Ice Age 2: The Meltdown', 2010, 'Adventure|Animation|Children|Comedy', 77, 'Mychal Burborough'),  ('Where the Boys Are ''84', 1993, 'Comedy', 103, 'Lisabeth Stelljes'),  ('Ex-Girlfriends', 2006, 'Comedy|Drama', 115, 'Ruperto Piotrkowski'),  ('Oklahoma Crude', 1989, 'Comedy|Drama|Western', 115, 'Marshal Hallums'),  ('Tarzan and His Mate', 1968, 'Action|Adventure', 122, 'Nicoli Scarce'),  ('Wrong Turn 4', 1984, 'Action|Horror|Thriller', 155, 'Jolee Baglin'),  ('Sinbad and the Eye of the Tiger', 1996, 'Adventure|Fantasy', 92, 'Baldwin Crofthwaite'),  ('Watch the Birdie', 2007, 'Comedy|Crime|Romance', 94, 'Merilee Longmaid'),  ('Tom Sawyer', 2010, 'Adventure|Children|Musical', 163, 'Rustie Panyer'),  ('Dawn Patrol, The', 2002, 'Drama|War', 102, 'Cyb Mateos'),  ('Katt Williams: Priceless: Afterlife', 2004, 'Comedy', 90, 'Flora Mapp'),  ('Batman', 2000, 'Action|Crime|Thriller', 155, 'Glennis Scotchmore'),  ('Paradise', 2008, 'Romance', 116, 'Editha Scolli'),  ('To Be or Not to Be', 2008, 'Comedy|Romance|War', 88, 'Morten Lorait'),  ('Die Another Day', 1988, 'Action|Adventure|Thriller', 168, 'Artemus Gerb'),  ('Golem', 2004, 'Drama|Mystery|Sci-Fi', 147, 'Mirabella Mowbury'),  ('Passenger, The (Professione: reporter)', 2003, 'Drama', 126, 'Wilt Brighouse'),  ('Big Boys Gone Bananas!*', 1987, 'Documentary', 79, 'Angie Robart'),  ('Jackass 2.5', 1993, 'Comedy|Documentary', 153, 'Kinnie Airs'),  ('Scalphunters, The', 1999, 'Comedy|Western', 94, 'Blithe MacFadzean'),  ('House of Fools', 2004, 'Drama|Romance|War', 110, 'Bobbye Bazley'),  ('East Meets West (Dung sing sai tsau 2011)', 1999, 'Comedy', 96, 'Georgine Duckering'),  ('Joe Somebody', 1967, 'Comedy|Drama|Romance', 84, 'Giselbert Eadington'),  ('Austenland', 2011, 'Comedy|Romance', 164, 'Daven Baltzar'),  ('Today You Die', 1991, 'Action|Crime', 163, 'Caldwell Nassau'),  ('Sun on the Horizon', 2010, 'Documentary', 98, 'Margery Grimsdale'),  ('Only the Strong Survive - A Celebration of Soul', 1999, 'Documentary|Musical', 126, 'Kai Musla'),  ('Hole, The', 1995, 'Crime|Drama|Horror|Mystery|Thriller', 100, 'Hillery Klampk'),  ('Apple, The (Sib)', 2006, 'Drama', 97, 'Remington Mattusevich'),  ('Hulk Vs.', 1998, 'Animation', 114, 'Alon Hanks'),  ('Bride Flight', 1995, 'Drama', 152, 'Alvy Strelitzer'),  ('Psycho', 2012, 'Crime|Horror', 136, 'Rosita Holehouse'),  ('Brighton Rock', 2008, 'Crime|Drama|Thriller', 106, 'Mignonne Nurny'),  ('Nothing''s All Bad', 1998, 'Drama', 81, 'Arv Legerton'),  ('Oh, Woe Is Me', 1990, 'Comedy|Drama', 157, 'Murvyn Mathen'),  ('Joshua', 2006, 'Drama', 151, 'Livia Aleksandrikin'),  ('Anne of Green Gables', 1985, 'Children|Drama', 98, 'Regan Kelson'),  ('Soft Fruit', 2006, 'Comedy|Drama', 93, 'Lissy Gascoyen'),  ('As You Like It', 2005, 'Comedy', 139, 'Walker Morris'),  ('Brewster''s Millions', 2001, 'Comedy', 166, 'Brenden Deinert'),  ('Blue Smoke', 2010, 'Drama|Romance|Thriller', 156, 'Obed Simkins'),  ('Private', 1993, 'Drama|War', 158, 'Winna Pauling'),  ('Dragons Forever', 1999, 'Action|Comedy|Romance', 135, 'Xenia Ziehm'),  ('Tarnation', 2004, 'Documentary', 144, 'Karrah Boseley'),  ('Baarìa', 2006, 'Comedy|Drama|War', 105, 'Lazare Warry'),  ('Salomè', 1990, 'Drama', 118, 'Hollie Geockle'),  ('Pool Without Water, A (Mizu no nai puuru)', 1992, 'Crime|Drama', 168, 'Rowney Lincey'),  ('New York Minute', 1994, 'Action|Adventure|Comedy', 163, 'Waylan Piechnik'),  ('Wake in Providence, A', 2004, 'Comedy', 85, 'Farrel Cocking'),  ('Smokin'' Aces', 1995, 'Action|Crime|Drama|Thriller', 158, 'Gerald Seth'),  ('Lonely Place to Die, A', 2008, 'Adventure|Crime|Thriller', 76, 'Wiley Faulkener'),  ('Dark Tide', 1992, 'Adventure|Drama|Thriller', 168, 'Sarena Kelling'),  ('How to Make an American Quilt', 2003, 'Drama|Romance', 137, 'Erskine Gillmore'),  ('She-Wolf of London', 1995, 'Action|Drama|Horror|Mystery', 97, 'Salome Cootes'),  ('Mystery Train', 2004, 'Comedy|Drama', 111, 'Nicoli Hamer'),  ('Huey P. Newton Story, A', 2009, 'Documentary', 89, 'Ofella Bradfield'),  ('Living and the Dead, The', 2006, 'Drama|Horror|Mystery', 130, 'Glenn Lamey'),  ('Pelicanman (Pelikaanimies)', 2006, 'Adventure|Children|Fantasy', 73, 'Reinhard Lomond'),  ('Memories of Me', 1993, 'Comedy|Drama', 122, 'Nicol Greser'),  ('Substance of Fire, The', 2003, 'Drama', 85, 'Tiphani Wogden'),  ('Summer Magic', 1999, 'Children|Comedy|Musical', 78, 'Bethena Hammon'),  ('Under Siege 2: Dark Territory', 2011, 'Action', 161, 'Midge Reagan'),  ('Designated Mourner, The', 1985, 'Drama', 152, 'Sibylla Crosio'),  ('Real McCoy, The', 1992, 'Action|Crime|Drama|Thriller', 89, 'Orel Learmonth'),  ('My Week with Marilyn', 2000, 'Drama', 133, 'Klaus Coney'),  ('King Kong Lives', 1996, 'Adventure|Sci-Fi', 113, 'Ashlee Cashin'),  ('Slaughterhouse', 2013, 'Comedy|Horror', 164, 'Kamillah Pretor'),  ('Wind Across the Everglades', 2006, 'Drama|Romance', 96, 'Prudy Bachmann'),  ('The Merry Widow', 2005, 'Comedy|Drama', 102, 'Cecilio Middiff'),  ('Musikanten', 1986, '(no genres listed)', 134, 'Massimiliano Van De Cappelle'),  ('Bulworth', 1991, 'Comedy|Drama|Romance', 153, 'Brunhilda Lenglet'),  ('The Uncommon Making of Petulia', 1990, 'Documentary', 101, 'Wittie Tayt'),  ('New Jack City', 1996, 'Action|Crime|Drama', 94, 'Gusta Konrad'),  ('E Ai... Comeu?', 1988, 'Comedy', 85, 'Kenton Colleymore'),  ('Panic in the Streets', 2010, 'Crime|Drama|Film-Noir|Thriller', 82, 'Venus Beavington'),  ('Bright Victory', 2006, 'Drama', 150, 'Saw Tarbin'),  ('36 Quai des Orfevres (Department 36)', 1998, 'Action|Crime|Drama|Thriller', 84, 'Dare Mocher'),  ('Good Vibrations', 2002, 'Drama|Musical', 106, 'Kent Bodemeaid'),  ('For the Bible Tells Me So', 2012, 'Documentary', 88, 'Rogers Andreou'),  ('Tartuffe (Herr Tartüff)', 2006, 'Drama', 118, 'Neron Kreutzer'),  ('13th Letter, The', 2006, 'Film-Noir', 81, 'Bryna Vasyatkin'),  ('Descendants, The', 1988, 'Comedy|Drama', 95, 'Bernadine McCrostie'),  ('Down and Out in Beverly Hills', 2000, 'Comedy', 146, 'Darby Bonhomme'),  ('WW III: World War III (Der 3. Weltkrieg)', 1999, 'Documentary|War', 153, 'Svend Vsanelli'),  ('One Small Hitch', 1998, 'Comedy|Romance', 164, 'Lu Bissiker'),  ('The Uncommon Making of Petulia', 2006, 'Documentary', 148, 'Lindy Risdall'),  ('Drunks', 2007, 'Drama', 112, 'Brock Aust'),  ('Goofy Movie, A', 2006, 'Animation|Children|Comedy|Romance', 91, 'Aleksandr Bacop'),  ('We Are Legion: The Story of the Hacktivists', 2003, 'Documentary', 81, 'Elle MacQuaker'),  ('Just Between Friends', 2007, 'Drama', 131, 'Pace Pikett'),  ('Torrid Zone', 1986, 'Action|Adventure|Comedy', 79, 'Teodora Piggens');
;
 ", , ,"INSERT INTO watched (
	username, 
	movie_name, 
	year_released
)
	SELECT 
		c.username, 
		m.movie_name, 
		m.year_released
	FROM 
		customer as c, 
		movie as m
	ORDER BY random()
	LIMIT 1000;", , ,,,
A0231993X,/* The code is written for PostgreSQL */,"/* 
In this project, we have 3 tables: movies, watches, and customers. The 
entity sets are movies and customers, and the relationship is the watches,
which links the two entities.
The table 'movies' list all the movies we have on offer on our movies streaming
website, and contains the fields 'name', 'genre', 'language', 'year', which 
are respectively the name of the movie, genre of movie,the language of the 
movie, and the year that the movie was produced. Together, the name, language,
and year make up the primary key of a movie to uniquely identify it.
The 'customers' table list all the information of the customers that we have
on our streaming services. So, 'first_name', 'last_name' correspond to the
customers' names, 'email' corresponds to their email address, 'dob' is their
date of birth (we may want to offer special discounts for this date), 'since'
tells us when the customer joined our website, 'country' says where the 
customers are located, and 'customerid' is the unique customer identification
number. 'customerid' is set to be the primary key.
The table 'watches' tells us which movies a customer has watched. It 
references 'customerid' from the table 'customers', and the unique movie
identifier, which is a foreign key, (name, language,year) identifying
a unique movie.
*/", , ,"CREATE TABLE customers (
first_name VARCHAR(64), 
last_name VARCHAR(64),
email VARCHAR(64),
dob DATE,
since DATE,
customerid VARCHAR(16) PRIMARY KEY,
country VARCHAR(32));
CREATE TABLE movies(
name VARCHAR(120),
genre VARCHAR(50),
language VARCHAR(50),
year DATE,
PRIMARY KEY (name, language,year) );
CREATE TABLE watches (
customerid VARCHAR(16) REFERENCES customers (customerid),
name VARCHAR(120),
language CHAR(50),
year DATE,
FOREIGN KEY (name,language,year) REFERENCES movies(name,language,year));", , ,"insert into CUSTOMERS (first_name, last_name, email, dob, since, customerid, country) values ('Itch', 'Bradburn', 'ibradburn0@slate.com', '14/10/1961', '16/06/2002', 'Wr4894243', 'China');
insert into CUSTOMERS (first_name, last_name, email, dob, since, customerid, country) values ('Cornelle', 'Goodding', 'cgoodding1@google.com.au', '26/07/1962', '21/07/2006', 'Xj4891842', 'Indonesia');
insert into CUSTOMERS (first_name, last_name, email, dob, since, customerid, country) values ('Iggie', 'Donoghue', 'idonoghue2@twitter.com', '04/05/2000', '18/12/2013', 'Nc6086290', 'Luxembourg');
 
insert into movies (name, genre, language, year) values ('Boxtrolls, The', 'Adventure|Animation|Children|Comedy|Fantasy', 'Tajik', '31/10/2005');
insert into movies (name, genre, language, year) values ('Game, The', 'Drama|Mystery|Thriller', 'Swedish', '20/06/1993');
insert into movies (name, genre, language, year) values ('Triad Underworld (Gong wu) (Jiang Hu)', 'Action|Crime|Drama', 'Kazakh', '11/11/1997');", , ,"INSERT INTO watches (customerid, name,language,year)
SELECT customerid, name, language, year from customers,movies
ORDER BY RANDOM()
LIMIT 1000 ;
SELECT * from watches;", , ,,,
A0231994W,/* The code is written for PostgreSQL */,"/*In this case, university students are choosing sessions of modules 
for the new semester. So here we get “student” and “modulesession” 
 with the relationship of “moduleselection”.
*/", , ,"CREATE TABLE student(
	studentid VARCHAR(32) PRIMARY KEY,
	stufirstname VARCHAR(32),
	stulastname VARCHAR(32),
	major VARCHAR(32)
);
CREATE TABLE modulesession(
	modulename VARCHAR(64) UNIQUE,
	belongeddepartment VARCHAR(64),
	sessionid VARCHAR(32),
	PRIMARY KEY(belongeddepartment, sessionid),
	proffirstname VARCHAR(32),
	proflastname VARCHAR(32),
	profemail VARCHAR(64) UNIQUE
);
CREATE TABLE moduleselection(
	studentid VARCHAR(32) REFERENCES student(studentid)
		ON UPDATE CASCADE
		ON DELETE CASCADE,
	belongeddepartment VARCHAR(64),
	sessionid VARCHAR(32),
	PRIMARY KEY (studentid,belongeddepartment,sessionid),
	FOREIGN KEY(belongeddepartment, sessionid) REFERENCES modulesession(belongeddepartment, sessionid)
		ON UPDATE CASCADE
		ON DELETE CASCADE
);", , ,"COPY student(studentid,stufirstname,stulastname,major)  FROM '/Users/abby/Desktop/StudentInfo.csv'  DELIMITER ',';
COPY modulesession(modulename,belongeddepartment,sessionid,        proffirstname,proflastname,profemail)  FROM '/Users/abby/Desktop/ModulesessionInfo.csv'  DELIMITER ',';
;
 ", , ,"INSERT INTO moduleselection SELECT studentid,belongeddepartment,sessionid
FROM student, modulesession ORDER BY RANDOM() LIMIT 100 ;", , ,,,
A0231996R,/* The code is written for PostgreSQL */,"/* The first table 'resident' has 4 attributes: id, name, vaccination and test_result.
id is the primary key in this table, as an identifier of a unique resident.
name indicates the full name of a resident. 
For the vaccination attribute, True means Vaccinated, False means not Vaccinated.
test_result attribute showes the most recent covid-19 test result of a resident. True means Positive, False means Negative.
The second table 'locations' has 4 attributes: address, contact, lo and la.
address is the primary key in this table, as an identifier of a unique street address that the residence has visited.
contact is the phone number of that address to contact (if available).
la and lo respectively indicate the latitude and the longtitude of the street address.
The third table travel_history collects id information from the table resident
and shows the name, test_result, vaccination and address visited of the corresponding resident.
A foreign key constraint enforces referential integrity. (All foreign key constraints can be declared as table constraints.)
In this table, id and address as recorded in the travel_history table must respectively corresponding to 
an existing id (primary key) in the resident table and an existing address (primary key) in the locations table.
*/", , ,"create table resident (
	id VARCHAR(50) PRIMARY KEY,
	name VARCHAR(50),
	vaccination VARCHAR(50),
	test_result VARCHAR(50)
);
create table locations (
	address VARCHAR(50) PRIMARY KEY ,
	contact VARCHAR(50),
	lo VARCHAR(50),
	la VARCHAR(50)
);
create table travel_history (
	id VARCHAR(50) REFERENCES resident (id),
	name VARCHAR(50),
	test_result VARCHAR(50),
	vaccination VARCHAR(50),
	address VARCHAR(50),
	FOREIGN KEY (address) REFERENCES locations(address)
);", , ,"insert into resident (id, name, vaccination, test_result) values ('10-0452207', 'Kat Kenna', true, false);
insert into resident (id, name, vaccination, test_result) values ('59-7874710', 'Doug Mitton', true, true);
insert into resident (id, name, vaccination, test_result) values ('77-2381540', 'Bran Humpatch', false, true);
 
insert into locations (address, contact, lo, la) values ('8909 Morningstar Place', null, 84.17916, 44.35542);
insert into locations (address, contact, lo, la) values ('7837 Mcbride Street', '822-568-5875', -42.5264409, -19.4746347);
insert into locations (address, contact, lo, la) values ('4 Fisk Alley', '602-318-5776', 109.326383, 28.138525);", , ,"INSERT INTO travel_history
SELECT id,name, test_result, vaccination, address 
FROM resident
CROSS JOIN locations
ORDER BY random()
LIMIT 1000;", , ,,,
A0231999L,"/* The code is written for PostgreSQL */
/","/*Introduction: these three tables are an example in Postgresql of how a database could be structured, containing the personal medical information of the patients and the drugs available in the market as a treatment.
Table 1 (med_report): is a table that contains the medical reports issued in a given red of hospitals.
Attribute 1 (e_med_report): The primary key is an encrypted identification number that allows for tracking the different reports associated with a given patient
Attribute 2 (code_illness): Diagnosed illness code. This column allows us to identify the illness every patient was diagnosed with.
Attribute 3: (death_risk (Boolean)): this attribute reports if a given illness may have a death risk.
Attribute 4: City of diagnosis (city): reports the town where a given patient was diagnosed
Attribute 5: Address of the hospital (hosp_address): provides the address of the hospital that issued the report
Primary key (e_med_report, code_illness): Given that any patient could have many diagnoses, this primary key combine the illness code and the encrypted identification number of the patient
Table 2: (drug_diagnosed): contains the description of the drug diagnosed in a red of hospitals.
Attribute 1: (drug_name): This column contains the name of the drug diagnosed
Attribute 2: (cost_drug_USD):  Reports the cost for each drug in USD
Attribute 3: (freq): this attribute details the frequency for each treatment.
Attribute 4: (drug_comp): this attribute reports the company that produced the drug      
Attribute 5: (stock_symbol): this attribute shows the stock symbol of each company that makes a given drug
Attribute 6: (plant_used): this column identifies the plant used as a central component for the medicine
Primary key (drug_name, plant_used):  Since a plant could produce many drugs, the primary key specifies the drug name and the plant.
Table 3: drug_diagnosed: contains 10% of the possible combinations of illness diagnosed for a specific patient and drugs made of a given plant.
*/", , ,"CREATE TABLE med_report(
  e_med_report VARCHAR(64), 
  code_illness VARCHAR(64) NOT NULL, 
  death_risk BOOL NOT NULL, 
  city VARCHAR(64) NOT NULL, 
  hosp_address VARCHAR(64) NOT NULL, 
  PRIMARY KEY (e_med_report, code_illness)
);
CREATE TABLE drug_diagnosed(
  drug_name VARCHAR(300), 
  cost_drug_USD INT NOT NULL CHECK(cost_drug_USD > 0), 
  freq VARCHAR(300) NOT NULL, 
  drug_comp VARCHAR(200) NOT NULL, 
  stock_symbol VARCHAR(200) NOT NULL, 
  plant_used VARCHAR(200) NOT NULL, 
  PRIMARY KEY(drug_name, plant_used)
);
CREATE TABLE diagnosis_treatment(
  drug_name VARCHAR(300), 
  plant_used VARCHAR(100), 
  FOREIGN KEY (drug_name, plant_used) REFERENCES drug_diagnosed(drug_name, plant_used) ON UPDATE CASCADE ON DELETE CASCADE, 
  e_med_report VARCHAR(64), 
  code_illness VARCHAR(64), 
  FOREIGN KEY (e_med_report, code_illness) REFERENCES med_report(e_med_report, code_illness) ON UPDATE CASCADE ON DELETE CASCADE
);", , ,"insert into drug_diagnosed (   drug_name, cost_drug_USD, freq, drug_comp,    stock_symbol, plant_used )  values    (     'Benzocaine', 895, 'Yearly', 'Bauch, Hagenes and Armstrong',      'SAIC', 'Schistostega pennata (Hedw.) F. Weber & D. Mohr.'   );
insert into drug_diagnosed (   drug_name, cost_drug_USD, freq, drug_comp,    stock_symbol, plant_used )  values    (     'fluocinonide', 143, 'Often', 'McGlynn-Shanahan',      'LTXB', 'Verbesina alternifolia (L.) Britton ex Kearney'   );
insert into drug_diagnosed (   drug_name, cost_drug_USD, freq, drug_comp,    stock_symbol, plant_used )  values    (     'Magnesium Oxide', 711, 'Seldom',      'Dooley, Hirthe and Johns', 'JSYNR',      'Helianthus praetermissus E.E. Watson'   );
 
insert into med_report (   e_med_report, code_illness, death_risk,    city, hosp_address )  values    (     '9a50e4b182ac0ed27955b9643e27a4216e7bbed5',      'S72345J', true, 'Bromma', '472 Graedel Center'   );
insert into med_report (   e_med_report, code_illness, death_risk,    city, hosp_address )  values    (     '9a50e4b182ac0ed27955b9643e27a4216e7bbed5',      'C8474', true, 'Blatnica', '49429 Sunfield Street'   );
insert into med_report (   e_med_report, code_illness, death_risk,    city, hosp_address )  values    (     '9a50e4b182ac0ed27955b9643e27a4216e7bbed5',      'M89229', true, 'Hamburg', '69226 6th Pass'   );", , ,"SELECT 
  drug_diagnosed.drug_name, 
  drug_diagnosed.plant_used, 
  med_report.e_med_report, 
  med_report.code_illness 
FROM 
  drug_diagnosed, 
  med_report 
ORDER BY 
  random() 
LIMIT 
  1000;", , ,,,
A0232000L,/* The code is written for PostgreSQL */,"/*Entity set E1 is set to be customer, while E2 is product from a certain 
grocery store.
Table E1 contains information about the customers, which include the following 
attributes: customer id, first name, last name, email, phone_number, membership
(whether the customer has membership or not).
Table E2 contains information about the products in the store, namely product 
name, country of origin and price.
Table R contains information about the purchase history of each customer, it will 
have attributes of customer id, product name and purchased quantity.
PostgreSQL will be used.
*/", , ,"CREATE TABLE IF NOT EXISTS customer(
	customer_id VARCHAR(36) PRIMARY KEY,
	first_name VARCHAR(64) NOT NULL,
	last_name VARCHAR(64) NOT NULL,
	email VARCHAR(64) UNIQUE NOT NULL,
	phone_number VARCHAR(18) UNIQUE NOT NULL,
	is_member BOOLEAN NOT NULL);
CREATE TABLE IF NOT EXISTS product(
	product_name VARCHAR(36) PRIMARY KEY,
	country_of_origin VARCHAR(16) NOT NULL,
	price VARCHAR(12) NOT NULL);
CREATE TABLE purchase(
	customer_id VARCHAR(36) REFERENCES customer(customer_id)
		ON UPDATE CASCADE ON DELETE CASCADE
		DEFERRABLE INITIALLY DEFERRED,
	product_name VARCHAR(36) REFERENCES product(product_name)
		ON UPDATE CASCADE ON DELETE CASCADE
		DEFERRABLE INITIALLY DEFERRED,
	quantity INTEGER NOT NULL,
	PRIMARY KEY (customer_id, product_name));", , ,"insert into customer (customer_id, first_name, last_name, email, phone_number, is_member) values ('5aacfca5-ed5f-45e4-b447-16358eea8414', 'Kalila', 'Crookes', 'kcrookes0@apple.com', '408-120-8501', true);
insert into customer (customer_id, first_name, last_name, email, phone_number, is_member) values ('f05563cc-732f-4673-9eb3-5d303406abfd', 'Jewel', 'Flaune', 'jflaune1@bbc.co.uk', '472-991-0840', false);
insert into customer (customer_id, first_name, last_name, email, phone_number, is_member) values ('c8dace7a-db79-4d4c-a3c3-454a4a2a1ca2', 'Mickie', 'Dunckley', 'mdunckley2@blinklist.com', '617-283-6606', false);
 
insert into product (product_name, country_of_origin, price) values ('Remy Red', 'China', '$19.34');
insert into product (product_name, country_of_origin, price) values ('Squash - Guords', 'Indonesia', '$40.05');
insert into product (product_name, country_of_origin, price) values ('Carbonated Water - Blackberry', 'China', '$5.11');", , ,"INSERT INTO purchase(
  customer_id, product_name, quantity
) 
SELECT 
  customer_id, 
  product_name, 
  0 
FROM 
  (
    SELECT 
      DISTINCT c.customer_id, 
      p.product_name 
    FROM 
      customer c, 
      product p
  ) combined 
ORDER BY 
  random() 
LIMIT 
  1000;
UPDATE 
  purchase 
SET 
  quantity = floor(
    random() * 50 + 1
  )", , ,,,
A0232004A,/* The code is written for PostgreSQL */,"/*This is the relationship between students and University they went to. 
The Student Table has the following information of students: id, first name, last name and email.
student_id is primary key and email is unique.
The University Table has the name and location of the University.
university_name is primary key.
The Enrollment Table has the information of university of every student.
The code is written for PostgreSQL.
*/", , ,"CREATE TABLE Student (
	student_id VARCHAR(16) PRIMARY KEY,
	first_name VARCHAR(64),
	last_name VARCHAR(64),
	email VARCHAR(64) UNIQUE
);
CREATE TABLE University (
	university_name  VARCHAR(128) PRIMARY KEY,
	locations VARCHAR(128)
);
CREATE TABLE Enrollment (
	student_id VARCHAR(16) REFERENCES Student (student_id),
	university_name VARCHAR(128) REFERENCES University (university_name)
);", , ,"insert into Student (student_id, first_name, last_name, email) values (1, 'Jim', 'Philpot', 'jphilpot0@flickr.com');
insert into Student (student_id, first_name, last_name, email) values (2, 'Ardis', 'Eyam', 'aeyam1@marketwatch.com');
insert into Student (student_id, first_name, last_name, email) values (3, 'Aharon', 'Mothersole', 'amothersole2@clickbank.net');
 
insert into University (university_name, locations) values ('Ateneo de Naga University', 'Philippines');
insert into University (university_name, locations) values ('Instituto Mauá de Tecnologia', 'Brazil');
insert into University (university_name, locations) values ('Allegheny College', 'United States');", , ,"INSERT INTO Enrollment (student_id, university_name)
SELECT student_id, university_name FROM Student, University
ORDER BY RANDOM()
LIMIT 1000;", , ,,,
A0232007X,/* The code is written for PostgreSQL */,"/*The entity set E1 is to be AppDATA, and the entity set E2 is to be CompanyDATA, and
the optional many-to-many relationship set R is to be ParticipateInDevelopmentMapping.
The table AppDATA contains 4 attributes(namely app name, issue ID, issue date, number of users. The
issue ID is to be the primary key).
The table CompanyDATA contains 2 attributes(namely company name, country. The company name is to be the
primary key).
The table ParticipateInDevelopmentMapping associates the issue ID of apps to the names of the companies they belong to.
The code is written for PostgreSQL
*/", , ,"CREATE TABLE public.""AppDATA""(
    app_name character varying(30) COLLATE pg_catalog.""default"",
    copyright_id integer NOT NULL,
    issue_date character varying COLLATE pg_catalog.""default"",
    number_of_users integer,
    CONSTRAINT ""App_pkey"" PRIMARY KEY (copyright_id)
);
CREATE TABLE public.""CompanyDATA""(
    company_name character varying(30) COLLATE pg_catalog.""default"" NOT NULL,
    country character varying(30) COLLATE pg_catalog.""default"",
    CONSTRAINT ""Company_pkey"" PRIMARY KEY (company_name)
);
CREATE TABLE public.""ParticipateInDevelopmentMapping""(
    copyright_id integer,
    company_name character varying(30) COLLATE pg_catalog.""default"");", , ,"insert into public.""AppDATA"" (app_name, copyright_id, issue_date, number_of_users) values ('Asoka', 523210, '11/15/2019', 9187832);
insert into public.""AppDATA"" (app_name, copyright_id, issue_date, number_of_users) values ('Vagram', 645299, '6/24/2021', 5419117);
insert into public.""AppDATA"" (app_name, copyright_id, issue_date, number_of_users) values ('Y-find', 30264, '1/20/2021', 5727229);
 
insert into public.""AppDATA"" (app_name, copyright_id, issue_date, number_of_users) values ('Sonair', 679721, '2/16/2020', 597140);
insert into public.""AppDATA"" (app_name, copyright_id, issue_date, number_of_users) values ('It', 55720, '8/12/2020', 1623543);
insert into public.""AppDATA"" (app_name, copyright_id, issue_date, number_of_users) values ('Vagram', 826351, '6/22/2020', 6220564);", , ,"INSERT INTO public.""ParticipateInDevelopmentMapping""	select copyright_id,company_name
	from public.""AppDATA"",public.""CompanyDATA""	order by random()
	limit 1000;", , ,,,
A0232009U,The code is written for PostgreSQL.,"Since I am a big fan of soccer, I would like to set up a situation in which the entity set E1 is Players,
the entity set E2 is SoccerClubs and the relationship between two sets is Playfor.
The entity set E1 include player_id, first_name, last_name, nationality and phone_num while E2 entity includes club_id, 
name and region. The table Playfor associates the player_id of Players with the club_id of 
clubs. All code for following questions is written for PostgreSQL.", , ,"CREATE TABLE IF NOT EXISTS players (
player_id VARCHAR(16) PRIMARY KEY,
first_name VARCHAR(64) NOT NULL,
last_name VARCHAR(64) NOT NULL,
nationality VARCHAR(64) NOT NULL,
phone_num VARCHAR(64) NOT NULL);
CREATE TABLE IF NOT EXISTS soccerclubs (
club_id VARCHAR(16) PRIMARY KEY,
name VARCHAR(64) NOT NULL,
region VARCHAR(64) NOT NULL);
CREATE TABLE IF NOT EXISTS playfor (
player_id VARCHAR(16) REFERENCES Players(player_id) ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
club_id VARCHAR(16) REFERENCES SoccerClubs(club_id) ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
PRIMARY KEY(player_id, club_id));", , ,"/*Insert mock data into the first dataset, Players*/ insert into players (player_id, first_name, last_name, nationality, phone_num) values (1, 'Feodor', 'Coulthard', 'Russia', '810-290-0697');
insert into players (player_id, first_name, last_name, nationality, phone_num) values (2, 'Red', 'Cockren', 'South Korea', '916-274-7771');
insert into players (player_id, first_name, last_name, nationality, phone_num) values (3, 'Reamonn', 'Acom', 'Philippines', '590-912-9121');
 
/*Insert into the second dataset, SoccerClubs*/ insert into soccerclubs (club_id, name, region) values (1, 'Hilpert and Sons', 'Philippines');
insert into soccerclubs (club_id, name, region) values (2, 'Kihn Inc', 'China');
insert into soccerclubs (club_id, name, region) values (3, 'Glover-Harvey', 'Estonia');", , ,"insert into playfor (player_id, club_id)
select p.player_id, s.club_id
from players p, soccerclubs s
order by random()
limit 1000;", , ,,,
A0232012E,/* The code is written for SQLite */,"/*If describing with the annotations in the diagram, then the entity set E1 is to be ""students"", the entity set E2 is to be ""modules"" and the relationship set R is to be ""modreg"".
In table students, there are 5 attributes, ""first_name"" and ""last_name"" indicating the students' first names and last names, ""studentid"" indicating students' identification number on the campus, ""email"" indicating students' unique email addresses, and ""country"" indicating the countries where students are from. 
In table modules, there are 4 attributes, ""name"" indicating unique names of modules, ""code"" indicating codes of the corresponding modules, ""class"" indicating the specific classes of the modules, and ""unit"" indicating units of the modules.
The last table modreg represents the modules that students register. There are 4 attributes in it. ""studentid"" represents the student's identification number. ""modulecode"" and ""moduleclass"" indicate the specific module and class that students register. ""status"" indicate if the student register the module successfully. Each student can register more than one module.
*/", , ,".mode column
.header ON
PRAGMA foreign_keys = ON;
CREATE TABLE students(
first_name VARCHAR(64) NOT NULL,
last_name VARCHAR(64) NOT NULL,
studentid VARCHAR(32) PRIMARY KEY,
email VARCHAR(64) NOT NULL UNIQUE,
country VARCHAR(16) NOT NULL);
CREATE TABLE modules(
name VARCHAR(64) NOT NULL UNIQUE,
code VARCHAR(16),
class VARCHAR(2),
unit NUMERIC CHECK (unit>0),
PRIMARY KEY(code, class));
CREATE TABLE modreg(
studentid VARCHAR(32) REFERENCES students(studentid)
ON UPDATE CASCADE
ON DELETE CASCADE,
modulecode VARCHAR(16),
moduleclass VARCHAR(2),
status VARCHAR(1) DEFAULT ""N"",
PRIMARY KEY (studentid, modulecode, moduleclass),
FOREIGN KEY (modulecode, moduleclass) REFERENCES modules(code, class)
ON UPDATE CASCADE
ON DELETE CASCADE);", , ,"insert into students (first_name, last_name, studentid, email, country) values ('Kimmy', 'Fowlds', '59-7029525', 'kfowlds0@sphinn.com', 'Pakistan');
insert into students (first_name, last_name, studentid, email, country) values ('Jeralee', 'Bichener', '42-7818987', 'jbichener1@nytimes.com', 'China');
insert into students (first_name, last_name, studentid, email, country) values ('Lynelle', 'Jedrychowski', '24-8655326', 'ljedrychowski2@wiley.com', 'Sweden');
 
insert into modules (name, code, class, unit) values ('MODULENAME802', 'AC42', 'L3', 5);
insert into modules (name, code, class, unit) values ('MODULENAME514', 'BD35', 'T3', 6);
insert into modules (name, code, class, unit) values ('MODULENAME027', 'BD92', 'L3', 5);", , ,"INSERT INTO modreg(studentid, modulecode, moduleclass)
SELECT s.studentid, m.code, m.class
FROM students s, modules m
ORDER BY random()
LIMIT 1000;
/*At last, */
/*DROP TABLE modreg;
DROP TABLE modules;
DROP TABLE students;
.quit
*/
", , ,,,
A0232013A,/* The code is written for SQLite */,"/* The setting is in 1984Land. People in this country are constantly 
monitored, having microchips embedding in them so the government, or Big 
Brother, can constantly track where they go. This data is constantly pinged 
to the government servers and stored in the tables below. Due to space 
constraints, they are only able to store daily visitation data. This visitation
data is then processed by their algorithmn to determine if they are 
closely afflicated with the resistance movement. Once the algorithm deems 
them to be part of the resistance, they will be erased, or become 
""unpersons"".
Recently, with the out break of COVID-19, they have found a new use for 
this tracking system. Using their location logs, they seek to determine 
who infected people have been in contact with to predict new clusters.
They call this ""TraceTogether"".
In this database:
 E1 is the citizen table. The fields are generally self explanatory, 
and to explain some of the less obvious ones: vaccine_taken refers to the
brand of vaccine that the citizen has been injected with. 
suspected_resistance is a value from 1 to 5, where 1 means that the 
citizen is not suspicious, and 5 is a citizen highly suspicious of being 
in the resistance movement, which acts against the government.
 E2 is the locations table. place and postal_code are self explanatory, 
and the dynamic_threat_level is a number from 0 to 9, with 0 meaning 
that the location is not at all suspicious, and with 9 making reference
to a location that is heavily affiliated with the resistance.
 R is the has_visted table. It shows where citizens have visited in the
10 days from 2021-12-12 to 2021-12-21.*/",,,"CREATE TABLE IF NOT EXISTS citizen (
	citizen_id VARCHAR(10) PRIMARY KEY NOT NULL,
	first_name VARCHAR(50) NOT NULL,
	last_name VARCHAR(50) NOT NULL,
	email VARCHAR(50) NOT NULL,
	gender VARCHAR(50) NOT NULL,
	mobile_number VARCHAR(50) NOT NULL,
	vaccine_taken VARCHAR(64) NOT NULL,
	suspected_resistance VARCHAR(1) NOT NULL
);
CREATE TABLE IF NOT EXISTS locations (
	place VARCHAR(64) NOT NULL,
	postal_code CHAR(12) NOT NULL,
	dynamic_threat_level VARCHAR(1) NOT NULL,
	PRIMARY KEY (place, postal_code)
);
CREATE TABLE IF NOT EXISTS has_visited (
	citizen_id VARCHAR(10) NOT NULL REFERENCES citizen (citizen_id) ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
	place VARCHAR(64) NOT NULL,
	postal_code VARCHAR(12) NOT NULL,
	date_visited DATE NOT NULL,
	PRIMARY KEY (citizen_id, place, postal_code, date_visited),
	FOREIGN KEY (place, postal_code) REFERENCES locations (place, postal_code) ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED
);", , ,"insert into citizen (citizen_id, first_name, last_name, email, gender, mobile_number, vaccine_taken, suspected_resistance) values (1, 'Andy', 'Hakonsen', 'ahakonsen0@ezinearticles.com', 'F', '80704878', 'Pfizer-BioNTech', 2);
insert into citizen (citizen_id, first_name, last_name, email, gender, mobile_number, vaccine_taken, suspected_resistance) values (2, 'Torr', 'Children', 'tchildren1@t-online.de', 'M', '87041840', 'EpiVacCorona', 1);
insert into citizen (citizen_id, first_name, last_name, email, gender, mobile_number, vaccine_taken, suspected_resistance) values (3, 'Adel', 'Presdie', 'apresdie2@hatena.ne.jp', 'F', '94905085', 'Chinese Academy of Medical Sciences', 1);
 
insert into locations (place, postal_code, dynamic_threat_level) values ('Skidoo', '195993', 0);
insert into locations (place, postal_code, dynamic_threat_level) values ('Twinder', '063656', 0);
insert into locations (place, postal_code, dynamic_threat_level) values ('Yata', '496893', 0);", , ,"/* Here we create a dummy date table to randomly populate the 
relationship table, and delete it after. */
CREATE TABLE date_visit (
	date_visited DATE
);
insert into date_visit (date_visited) values ('2021-12-12');
insert into date_visit (date_visited) values ('2021-12-13');
insert into date_visit (date_visited) values ('2021-12-14');
insert into date_visit (date_visited) values ('2021-12-15');
insert into date_visit (date_visited) values ('2021-12-16');
insert into date_visit (date_visited) values ('2021-12-17');
insert into date_visit (date_visited) values ('2021-12-18');
insert into date_visit (date_visited) values ('2021-12-19');
insert into date_visit (date_visited) values ('2021-12-20');
insert into date_visit (date_visited) values ('2021-12-21');
INSERT INTO has_visited (citizen_id, place, postal_code, date_visited)
SELECT citizen_id, place, postal_code, date_visited FROM citizen, locations, date_visit
ORDER BY random() limit(1000);
DROP TABLE date_visit;",,,,,
A0232016X,/*  The code is written for PostgreSQL  */,"/*The FBI has recently managed to monitor the action of some bitcoin accounts which
are suspected to be owned by drug dealers.
The 'Bitcoin Addresses' table contains those in total 108 suspicious bitcoin accounts
and their usernames, their MAC addresses and also IP addresses lately used. The 'Location'
table contains the city names and street numbers where those accounts used to be active.
The relationship table 'Transactions' records which account address used to make transaction
in which city and on which street. 
The fowllowing code is written for PostgreSQL.
*/", , ,"CREATE TABLE IF NOT EXISTS bitcoin_addresses(
bitcoin_address VARCHAR(64) PRIMARY KEY,
device VARCHAR(32) UNIQUE NOT NULL,
last_ip VARCHAR(32) NOT NULL,
bitcoin_username VARCHAR(32) NOT NULL);
CREATE TABLE IF NOT EXISTS locations(
city VARCHAR(32) UNIQUE NOT NULL,
street_number VARCHAR(32) NOT NULL,
PRIMARY KEY(city, street_number));
CREATE TABLE IF NOT EXISTS transactions(
bitcoin_address VARCHAR(64) REFERENCES bitcoin_addresses(bitcoin_address) 
	ON UPDATE CASCADE ON DELETE CASCADE
	DEFERRABLE INITIALLY DEFERRED,
city VARCHAR(32),
street_number VARCHAR(32),
PRIMARY KEY (bitcoin_address, city, street_number),
FOREIGN KEY (city, street_number) REFERENCES locations(city, street_number));", , ,"insert into bitcoin_addresses (bitcoin_address, device, last_ip, bitcoin_username) values ('1Ld1F4ws2FFgUQgm5LhsSQgBTBMEvCjcdP', '10-11-5A-A5-9C-C8', '239.113.223.158', 'tavory0');
insert into bitcoin_addresses (bitcoin_address, device, last_ip, bitcoin_username) values ('1g9Gnh1rYMZnVFktXgkF8sbWDZogxC46h', '60-17-18-63-8F-AA', '241.255.178.85', 'rdixey1');
insert into bitcoin_addresses (bitcoin_address, device, last_ip, bitcoin_username) values ('1CCfiEGSwXyjWdMwC2X5i9zP8axFGpkpJA', '8D-24-E3-17-A7-28', '217.232.83.116', 'iannes2');
 
insert into bitcoin_addresses (bitcoin_address, device, last_ip, bitcoin_username) values ('19GK44RE5zYtys9W5u3PRiLtHyhsoYNgTJ', '5D-0B-34-89-58-73', '75.25.240.124', 'swillmer2s');
insert into bitcoin_addresses (bitcoin_address, device, last_ip, bitcoin_username) values ('1n3R6GrJX834EWzxXnSui8VpLeNzyUr9F', '3C-6F-FF-7B-08-9F', '238.69.79.40', 'nwitson2t');
insert into bitcoin_addresses (bitcoin_address, device, last_ip, bitcoin_username) values ('1GQFnHJGMAcwtvFUPuxKeMPTZmKbfPPnJb', '28-A9-85-5B-58-90', '82.95.39.164', 'jmatiebe2u');", , ,"INSERT INTO transactions(bitcoin_address, city, street_number)
SELECT bitcoin_address, city, street_number FROM bitcoin_addresses,locations
ORDER BY RANDOM() LIMIT 1000;", , ,,,
A0232022A,"/* The code is written for PostgreSQL 
*/","/*	For this project, I am willing to construct three tables which
indicate the match between Bitcoin address and its password, and also insert into the
table corresponding to these two entity sets. Moreover, during this process,
I randomly choose 1000 rows by Cartesian product as possible relationships
from these two entity sets.
	In table person_info, I have bitcoin_id as primary key. Same as table person_info,
table password_note has password as primary key. In table relationship,
it has 1000 rows of random cross productions as possible relationships. 
*/", , ,"create table person_info (
	bitcoin_id  VARCHAR(64),
	first_name  VARCHAR(64),
	last_name   VARCHAR(64),
    primary key(bitcoin_id)
);
create table relationship(
	bitcoin_id    VARCHAR(64),
    password      VARCHAR(64)
);
create table password_note(
	password      VARCHAR(64),
	location      VARCHAR(64),
	email         VARCHAR(64),
	primary key(password)
);", , ,"insert into person_info (bitcoin_id, first_name, last_name) values ('1JaCprCU5oFn3tuz3A1FKxWJFosdeXU8hW', 'Auroora', 'Sainsberry');
insert into person_info (bitcoin_id, first_name, last_name) values ('14x4kwxfWNjk76unf5zMzvWxCqvFMd2HDL', 'Baudoin', 'Woodfin');
insert into person_info (bitcoin_id, first_name, last_name) values ('1E9xFHxCiw3YbemomF3cmmRWVn81RY8i9C', 'Lorenza', 'Hoble');
 
insert into password_note (password, location, email) values ('VunkGu', '49549 Haas Plaza', 'jthews0@lycos.com');
insert into password_note (password, location, email) values ('BPE01ivHl3ot', '63 Vahlen Plaza', 'dfuller1@weibo.com');
insert into password_note (password, location, email) values ('Lv12hT01b', '4743 Manley Circle', 'rcragoe2@ifeng.com');", , ,"-- inert into second table 1000 rows
insert into relationship (
	select bitcoin_id,password from person_info,password_note)
	Order By random() Limit 1000;", , ,,,
A0232060Y,/* The code is written for PostgreSQL */,"/* In an online shopping platform, customers can purchase goods by directly having contact
with the sellers and sellers will get the order information promptly. The profile of customers 
has already been recorded in the system and will be obtained by sellers to fulfill the order. 
The customers' profiles include seven types of information, that are id, cust_id,first name, last name,
email, gender and city. On the other hand, the order will be received once the customer confirm the purchase. 
The system will automatically generate order id numbers and assign them to each particular transaction.
The process also requires the input of payment method that is the type of credit card. In addition,
the price of product, the date of purchase will be stored as well. Therefore, the final summary of 
order information on the side of sellers will include six types of data. To be specific, they are
id, order_id, seller_id, order_value, date and payment. Meanwhile, there is an action for placing order
that connects the buyers to sellers. The information of customer_id will match to one of the order_id in association.
The code is written for PostgreSQL.
*/", , ,"CREATE TABLE Customer (
  id character varying,
  Cust_id character varying (50), 
  first_name character varying(50)NOT NULL,
  last_name character varying(50)NOT NULL,
  email character varying(50)NOT NULL,
  gender character varying(50)NOT NULL,
  Customer_city character varying(50)NOT NULL,
  PRIMARY KEY (id));
CREATE TABLE Orders (
  id character varying,
  Order_id character varying(50), 
  Seller_id character varying(50)NOT NULL,
  Order_value character varying(50)NOT NULL,
  Order_date date,
  Payment character varying(50)NOT NULL,
  PRIMARY KEY (id));
CREATE TABLE Places ( 
  Cust_id character varying(50),
  Order_id character varying(50)
);", , ,"insert into customer (id, Cust_id, first_name, last_name, email, gender, Customer_city) values (1, '4389787225', 'Orson', 'Standage', 'ostandage0@barnesandnoble.com', 'Male', 'Santa Elena de Uairén');
insert into customer (id, Cust_id, first_name, last_name, email, gender, Customer_city) values (2, '5754719264', 'Hettie', 'Guillford', 'hguillford1@engadget.com', 'Female', 'Fuyang');
insert into customer (id, Cust_id, first_name, last_name, email, gender, Customer_city) values (3, '0670172022', 'Gabriel', 'McCandie', 'gmccandie2@ask.com', 'Female', 'Oslo');
 
insert into customer (id, Cust_id, first_name, last_name, email, gender, Customer_city) values (101, '7983108060', 'Jeremy', 'Vasilischev', 'jvasilischev2s@alibaba.com', 'Male', 'Lawa-an');
insert into customer (id, Cust_id, first_name, last_name, email, gender, Customer_city) values (102, '9272951933', 'Darlene', 'Crowson', 'dcrowson2t@redcross.org', 'Female', 'Buldon');
insert into customer (id, Cust_id, first_name, last_name, email, gender, Customer_city) values (103, '1541040074', 'Annetta', 'Vigars', 'avigars2u@youtu.be', 'Female', 'Amsterdam Westpoort');", , ,"insert into places(cust_id,order_id)
select cust_id,order_id
from customer,orders
order by RANDOM()
limit 1000
", , ,,,
A0232064R,/* The code is written for PostgreSQL-Pgadmin */,"/*Use the following SQL written in PostgreSQL-Pgadmin to find out which companies and which departments have the highest salaries.
The first table-company, contains its id, name and contacting email.
In the second sql, person represents the staff or workers in their compaies.Within the sql, you can find their salary information 
and department such as Human Resources Department. By using the given data, it will be easy to find the 'right' people and departments 
who have won the highest salary.
In the third table-worksfor, we cross join the former two tables(company and person). Then we can use the four columns to gain the 
insight.*/", , ,"create table company (
  com_id VARCHAR(50),
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  email VARCHAR(50)
);
create table person (
  staff_id VARCHAR(50),
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  salary INT,
  staff_dpt VARCHAR(50)
);
create table worksfor (
  com_id VARCHAR(50),
  staff_id VARCHAR(50),
  salary INT,
  staff_dpt VARCHAR(50)
);", , ,"insert into company (com_id, first_name, last_name, email) values ('83548', 'Emelia', 'Stoop', 'estoop0@msn.com');
insert into company (com_id, first_name, last_name, email) values ('3318', 'Netti', 'Lardge', 'nlardge1@phpbb.com');
insert into company (com_id, first_name, last_name, email) values ('1', 'Costa', 'Wrightam', 'cwrightam2@myspace.com');
insert into person (staff_id, first_name, last_name, salary, staff_dpt) values ('023967100-7', 'Jacobo', 'Zorzetti', 48192, 'Sales');
insert into person (staff_id, first_name, last_name, salary, staff_dpt) values ('382548093-3', 'Mart', 'Battrum', 8289, 'Business Development');
insert into person (staff_id, first_name, last_name, salary, staff_dpt) values ('451252231-X', 'Matty', 'Duckham', 19097, 'Accounting');", , ,"INSERT INTO worksfor(com_id, staff_id,salary, staff_dpt)SELECT com_id, staff_id,salary, staff_dpt 
FROM company cross join person order by random() limit 1000;", , ,,,
A0232193L,/* The code is written for PostgreSQL */,"/*I'd like to choose PostgreSQL to design my database.
The three tables I design are as follows.
E1 is called 'device'. It contains some attributes about device numbers, which is called 'userid'.
To be specific, each 'userid' has attributes, including its production date 'date', its owner's gender 'gender', its owner's nationality 'country', its owner's race 'race', and its owner's usage situation 'usage_freq'.
E2 is called 'app_info'. It contains many apps' names 'name', their versions 'version' and their founders' nationality 'country'.
R is called 'install'. It contains the app names each device has installed in the past 30 days. It associates the 'userid' of the device to the names of apps they have installed 'name'.
*/", , ,"/* Create table device(E1) */
create table device (
	userid INT NOT NULL PRIMARY KEY,
	date DATE NOT NULL,
	gender VARCHAR(50) NOT NULL,
	country VARCHAR(50) NOT NULL,
	race VARCHAR(50) NOT NULL,
	usage_freq VARCHAR(50) NOT NULL
);
/* Create table app_info(E2) */
create table app_info (
	name VARCHAR(50) NOT NULL PRIMARY KEY,
	version VARCHAR(50) NOT NULL,
	country VARCHAR(50) NOT NULL
);
/* Create table install(R) */
create table install(
    userid INT REFERENCES device(userid),
    name VARCHAR(50) REFERENCES app_info(name),
    PRIMARY KEY(userid, name)
);", , ,"/* Insert data into table device */ insert into device (userid, date, gender, country, race, usage_freq) values (1, '2020-12-14', 'Male', 'Indonesia', 'Sri Lankan', 'Once');
insert into device (userid, date, gender, country, race, usage_freq) values (2, '2020-09-02', 'Male', 'Uzbekistan', 'Apache', 'Daily');
insert into device (userid, date, gender, country, race, usage_freq) values (3, '2020-02-03', 'Male', 'Haiti', 'Honduran', 'Yearly');
 
/* insert data into table app_info */ insert into app_info (name, version, country) values ('com.elpais.Home Ing', '0.86', 'China');
insert into app_info (name, version, country) values ('net.discuz.Span', '0.36', 'Portugal');
insert into app_info (name, version, country) values ('com.hostgator.Tampflex', '0.1.8', 'Senegal');", , ,"/* Insert combined data into table install */
insert into install
select a.userid, b.name
from device a, app_info b
order by random()
limit 1000;", , ,,,
A0232194J,/* The code is written for SQLite */,"/* I am writing with SQLite. The three tables I created are Patients, Purchases, and Drugs.
The table Patients is basically some personal information about patients, and the table Drugs contains some drug information.
The table Purchases records what kind of drug each patient purchased.
For Patients, the attributes are id, full_name, email, gender, ssn,and country.
For Drugs, the attributes are id, drug_name, drug_brand, and drug_company.
For Purchases, the attibutes are patient_ssn and drug_id.
Part (c) is just creating three tables and seeting constraint and type for each attribute.
Pard (d) is inserting records into the table Patients and Durgs, using data generated from mockaroo.
Part (e) is doing a cross join of table Patients and Drugs to get data for Purchases, and then introduce a random column, break up the initial order of data and choose 10% of the rows at random.
*/", , ,"CREATE TABLE Patients (
id INT,
full_name VARCHAR(50) NOT NULL,
email VARCHAR(50) NOT NULL,
gender VARCHAR(50) NOT NULL,
ssn VARCHAR(50) PRIMARY KEY,
country VARCHAR(50) NOT NULL
);
CREATE TABLE Drugs (
id INT Primary Key,
drug_name VARCHAR(50),
drug_brand VARCHAR(50),
drug_company VARCHAR(50)
);
CREATE TABLE Purchases (
patient_ssn VARCHAR(50),
drug_id INT
);", , ,"INSERT INTO Patients (id, full_name, email, gender, ssn, country) VALUES (1, 'Patricio O''Loughnan', 'poloughnan0@php.net', 'Male', '402-03-6274', 'Poland');
INSERT INTO Patients (id, full_name, email, gender, ssn, country) VALUES (2, 'Pavla Annwyl', 'pannwyl1@dailymail.co.uk', 'Male', '434-95-8480', 'South Africa');
INSERT INTO Patients (id, full_name, email, gender, ssn, country) VALUES (3, 'Wye McElane', 'wmcelane2@sitemeter.com', 'Male', '493-17-6490', 'Afghanistan');
 
INSERT INTO Drugs (id, drug_name, drug_brand, drug_company) VALUES (1, 'etidronate disodium', 'Etidronate Disodium', 'Mylan Pharmaceuticals Inc.');
INSERT INTO Drugs (id, drug_name, drug_brand, drug_company) VALUES (2, 'Omeprazole', 'Omeprazole', 'Apotex Corp');
INSERT INTO Drugs (id, drug_name, drug_brand, drug_company) VALUES (3, 'Warfarin Sodium', 'Jantoven', 'Upsher-Smith Laboratories, Inc.');", , ,"INSERT INTO Purchases (patient_ssn, drug_id)
SELECT 
 	--COUNT(*)
 	ssn,
 	drug_id
FROM
(
SELECT
 	p.ssn AS ssn,
 	d.id AS drug_id,
 	random() AS random 
FROM
 	Patients AS p
CROSS JOIN
 	Drugs AS d
ORDER BY random -- breakup the initial order of the selected values with cross join
LIMIT 1000 -- choose 10% rows
);", , ,,,
A0232195H,/* The code is written for PostgreSQL */,"/*First Entity: Investor; Second entity: Stock; Relation: invests in
There are three tables. The first table is called ""Investor"". The attributes of this table includes their first and last name, gender, email, the university they graduated from, and the date they start investing
The second table is called ""stock"", which represents the second entity. The attributes of ""stock"" includes the name of the stock, stock cap and the return of this stock during the investment holding period
The third table is called ""Investment"", it is a bridge between the first and the second entity. It has attibutes such as investor's email, stock return and stock name
*/", , ,"create table Investor (
	first_name VARCHAR(100) NOT NULL,
	last_name VARCHAR(100) NOT NULL,
	email VARCHAR(100) PRIMARY KEY NOT NULL,
	gender VARCHAR(100) NOT NULL,
	Education VARCHAR(100) NOT NULL,
	Since DATE NOT NULL);
create table Stock (
	Stock_Name VARCHAR(100) NOT NULL,
	Stock_Return DECIMAL(2,2) NOT NULL,
	Stock_MarketCap VARCHAR(100) NOT NULL,
    PRIMARY KEY (Stock_Name, Stock_Return));
create table Investment (
	email VARCHAR(100) REFERENCES Investor(email),
	Stock_Name VARCHAR(100),
	Stock_Return DECIMAL(2,2),
    PRIMARY KEY (email, Stock_Name, Stock_Return),
    FOREIGN KEY (Stock_Name, Stock_Return) REFERENCES Stock (Stock_Name, Stock_Return)
	ON UPDATE CASCADE ON DELETE CASCADE
	DEFERRABLE INITIALLY DEFERRED);", , ,"insert into Investor (first_name, last_name, email, gender, Education, Since) values ('Jed', 'McConnel', 'jmcconnel0@archive.org', 'Polygender', 'Ecole Nationale de l''Aviation Civile', '8/1/2011');
insert into Investor (first_name, last_name, email, gender, Education, Since) values ('Daphna', 'Latch', 'dlatch1@purevolume.com', 'Female', 'Malone College', '3/25/2016');
insert into Investor (first_name, last_name, email, gender, Education, Since) values ('Henry', 'Savidge', 'hsavidge2@sourceforge.net', 'Non-binary', 'The Queen''s University Belfast', '8/30/2020');
 
insert into Investor (first_name, last_name, email, gender, Education, Since) values ('Stanton', 'Gilham', 'sgilham2s@indiatimes.com', 'Genderqueer', 'Chestnut Hill College', '4/6/2011');
insert into Investor (first_name, last_name, email, gender, Education, Since) values ('Dar', 'Payton', 'dpayton2t@unc.edu', 'Polygender', 'Politécnico Grancolombiano - Institución Universitaria', '9/15/2015');
insert into Investor (first_name, last_name, email, gender, Education, Since) values ('Chery', 'Abyss', 'cabyss2u@bloglovin.com', 'Genderqueer', 'University of Great Falls', '7/15/2019');", , ,"INSERT INTO Investment (email, Stock_Name, Stock_Return) Values(
'Select email from Investor
Order by RANDOM()
LIMIT 1',
'Select Stock_Name from Stock
Order by RANDOM()
LIMIT 1',
Select Stock_Return from Stock
Order by RANDOM()
LIMIT 1);", , ,,,
A0232196E,/* The code is written for PostgreSQL */,"/* 
I created three tables, student, university and applied_to. They record 
students who applied to universities, information of universities and 
students' application history.
The student table records the information of 100 students, including 
their ID (primary key), first_name, last_name, email, gender and gpa. 
The university table records university_id (primary_key), university_name,
their states and their ranking of 100 universities. The table applied_to records the universities
each student applied to and whether they are admitted or not. 
*/", , ,"create table student (
	id  INT PRIMARY KEY,
	first_name VARCHAR(50) NOT NULL,
	last_name VARCHAR(50) NOT NULL,
	email VARCHAR(50) NOT NULL,
	gender VARCHAR(10) NOT NULL,
	GPA DECIMAL(3,2) NOT NULL
);
create table university (
	university_id INT PRIMARY KEY,
	university_name VARCHAR(100) NOT NULL,
	states VARCHAR(50) NOT NULL,
	university_ranking  INT NOT NULL
);
create table applied_to (
	student_id INT references student(id) NOT NULL,
	university_id INT references university(university_id) NOT NULL,
	admitted BOOLEAN NOT NULL);", , ,"/* student */ insert into student (id, first_name, last_name, email, gender, GPA) values (1, 'Othella', 'Melville', 'omelville0@senate.gov', 'male', 3.14);
insert into student (id, first_name, last_name, email, gender, GPA) values (2, 'Merrill', 'Dumbare', 'mdumbare1@nyu.edu', 'male', 3.64);
insert into student (id, first_name, last_name, email, gender, GPA) values (3, 'Carter', 'Keyzman', 'ckeyzman2@unicef.org', 'female', 3.75);
 
/* university */ insert into university (university_id, university_name, states, university_ranking ) values (1, 'College of the Holy Spirit', 'New Mexico', 8);
insert into university (university_id, university_name, states, university_ranking ) values (2, 'Dokkyo University', 'Tennessee', 12);
insert into university (university_id, university_name, states, university_ranking ) values (3, 'University of Nigeria', 'Pennsylvania', 2);", , ,"INSERT INTO applied_to (student_id, university_id, admitted)
select s.id, u.university_id, random() > 0.7 
from student as s, university as u where random() <= 0.1;", , ,,,
A0232321Y,/* The code is written for SQLite */,"/* This database records prescriptions a docter writes to patients.
Table patient: info of patients with NHS number, name, email, gender, age and past medical history;
Table drug:	info of drugs with drug id, name, producer and price
Table prescription: prescrptions combine patients with drugs and also calculate the payment of each prescription
*/", , ,"CREATE TABLE patient(
	NHS_number VARCHAR(16) PRIMARY KEY,
	first_name VARCHAR(64) NOT NULL,
	last_name VARCHAR(64) NOT NULL,
	gender VARCHAR(2) NOT NULL,
	age INT(2) NOT NULL,
	email VARCHAR(64) UNIQUE NOT NULL,
	past_medical_history VARCHAR(100)
);
CREATE TABLE drug(
	drug_id VARCHAR(16) UNIQUE,
	drug_name VARCHAR(64) NOT NULL,
	producer VARCHAR(64) NOT NULL,
	price NUMERIC(16) NOT NULL CHECK(price>0),
	PRIMARY KEY(drug_name, producer)
);
CREATE TABLE prescription(
	prescription_id INTEGER PRIMARY KEY AUTOINCREMENT,
	NHS_number VARCHAR(16) NOT NULL,
	drug_name VARCHAR(64)NOT NULL,
	producer VARCHAR(64)NOT NULL,
	price NUMERIC(16) NOT NULL,
	quantity NUMERIC(16) DEFAULT 1 NOT NULL,
	total_payment AS (price * quantity),
	FOREIGN KEY(drug_name, producer) REFERENCES drug(drug_name, producer) ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
	FOREIGN KEY(NHS_number) REFERENCES patient(NHS_number) ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED
);", , ,"insert into patient (NHS_number, first_name, last_name, gender, age, email, past_medical_history) values ('2226309241', 'Romola', 'Rigts', 'F', 36, 'rrigts0@xrea.com', 'Toxic effect of pesticides, intentional self-harm, sequela');
insert into patient (NHS_number, first_name, last_name, gender, age, email, past_medical_history) values ('3625603438', 'Mal', 'Maginn', 'M', 71, 'mmaginn1@shop-pro.jp', 'Maternal care for (suspected) cnsl malform in fetus, fetus 3');
insert into patient (NHS_number, first_name, last_name, gender, age, email, past_medical_history) values ('0912114339', 'Rodge', 'Nabarro', 'M', 32, 'rnabarro2@sohu.com', 'Other specified crystal arthropathies, ankle and foot');
 
insert into drug (drug_id, drug_name, producer, price) values ('35356-744', 'Alprazolam', 'Lake Erie Medical & Surgical Supply DBA Quality Care Products LLC', 74.36);
insert into drug (drug_id, drug_name, producer, price) values ('43353-942', 'Metoprolol Tartrate', 'Aphena Pharma Solutions - Tennessee, LLC', 66.44);
insert into drug (drug_id, drug_name, producer, price) values ('44206-310', 'AlbuRx', 'CSL Behring AG', 44.21);", , ,"INSERT INTO prescription(NHS_number, drug_name, producer,price)
	SELECT NHS_number, drug_name, producer,price
	FROM patient, drug 
	ORDER BY RANDOM() LIMIT 1000;
UPDATE prescription
	SET quantity = ABS(RANDOM()) % (100 - 1) + 1 /* assume quantity is between 1 to 100*/
	WHERE prescription_id IS NOT NULL;", , ,,,
A0232322X,/* The code is written for PostgreSQL */,"/*The Central Intelligence Agency (CIA) has a database comprising records of 100 individuals, who are prospects of being a spy.  
The database contains the following tables, which have the attributes as mentioned below along-side each table:
1. Table ‘spy’:  Contains details of the individual such as first name, last name and email ID (as the primary key)
2. Table ‘website’:  Contains the URL most viewed by the individual/ prospective spy and IP address (as the primary key) through which it is viewed 
3. Table ‘viewed’ (relationship table): Associates the email ID (foreign key) of the prospect with his/ her system’s IP address (foreign key)
The task is to create the aforementioned entity tables 'spy', 'website' and the relationship table 'viewed'. 
The entity tables will contain 100 records each while the relationship table 'viewed' will generate records 
through the relationship between two entity tables (10% chosen at random, of the possible relationships). 
The code for the following questions has been written in PostgreSQL.
*/", , ,"DROP 
  TABLE IF EXISTS spy, 
  website, 
  viewed;
CREATE TABLE spy(
  first_name VARCHAR(64) NOT NULL, 
  last_name VARCHAR(64) NOT NULL, 
  email VARCHAR(32) PRIMARY KEY
);
CREATE TABLE website(
  url VARCHAR(100) NOT NULL, 
  ipaddress VARCHAR(32) PRIMARY KEY
);
CREATE TABLE viewed(
  email VARCHAR(32) REFERENCES spy(email), 
  ipaddress VARCHAR(32) REFERENCES website(ipaddress)
);", , ,"/* Inserting records into 'spy' table: */ insert into spy (first_name, last_name, email) values ('Shannen', 'Daniely', 'sdaniely0@yahoo.com');
insert into spy (first_name, last_name, email) values ('Leonard', 'Gypps', 'lgypps1@unesco.org');
insert into spy (first_name, last_name, email) values ('Jedediah', 'Freeman', 'jfreeman2@fotki.com');
 
/* Inserting records into 'website' table: */ insert into website (url, ipaddress) values ('https://ycombinator.com/cubilia/curae/nulla/dapibus/dolor/vel/est.jpg', '116.32.72.189');
insert into website (url, ipaddress) values ('https://redcross.org/non.jpg', '104.30.178.9');
insert into website (url, ipaddress) values ('http://barnesandnoble.com/mauris/eget/massa.js', '229.99.58.106');", , ,"INSERT INTO viewed(email, ipaddress) 
SELECT 
  s.email, 
  w.ipaddress 
FROM 
  spy s, 
  website w 
ORDER BY 
  RANDOM() 
LIMIT 
  1000;", , ,,,
